{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n  /**\n   * This class represents the XML sent by Splunk for external validation of a\n   * new modular input.\n   *\n   * @example\n   *\n   *      var v =  new ValidationDefinition();\n   *\n   * @class splunkjs.ModularInputs.ValidationDefinition\n   */\n\n\n  function ValidationDefinition() {\n    this.metadata = {};\n    this.parameters = {};\n  }\n  /**\n   * Creates a `ValidationDefinition` from a provided string containing XML.\n   *\n   * This function will throw an exception if `str`\n   * contains unexpected XML.\n   *\n   * The XML typically will look like this:\n   * \n   * `<items>`\n   * `   <server_host>myHost</server_host>`\n   * `     <server_uri>https://127.0.0.1:8089</server_uri>`\n   * `     <session_key>123102983109283019283</session_key>`\n   * `     <checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`\n   * `     <item name=\"myScheme\">`\n   * `       <param name=\"param1\">value1</param>`\n   * `       <param_list name=\"param2\">`\n   * `         <value>value2</value>`\n   * `         <value>value3</value>`\n   * `         <value>value4</value>`\n   * `       </param_list>`\n   * `     </item>`\n   * `</items>`\n   *\n   * @param {String} str A string containing XML to parse.\n   *\n   * @function splunkjs.ModularInputs.ValidationDefinition\n   */\n\n\n  ValidationDefinition.parse = function (str) {\n    var definition = new ValidationDefinition();\n    var rootChildren = ET.parse(str).getroot().getchildren();\n\n    for (var i = 0; i < rootChildren.length; i++) {\n      var node = rootChildren[i];\n\n      if (node.tag === \"item\") {\n        definition.metadata[\"name\"] = node.get(\"name\");\n        definition.parameters = utils.parseXMLData(node, \"\");\n      } else {\n        definition.metadata[node.tag] = node.text;\n      }\n    }\n\n    return definition;\n  };\n\n  module.exports = ValidationDefinition;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/validationdefinition.js"],"names":["ET","require","utils","ValidationDefinition","metadata","parameters","parse","str","definition","rootChildren","getroot","getchildren","i","length","node","tag","get","parseXMLData","text","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,YAAW;AACR,MAAIA,EAAE,GAAQC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAIC,KAAK,GAAKD,OAAO,CAAC,SAAD,CAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASE,oBAAT,GAAgC;AAC5B,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,oBAAoB,CAACG,KAArB,GAA6B,UAASC,GAAT,EAAc;AACvC,QAAIC,UAAU,GAAG,IAAIL,oBAAJ,EAAjB;AACA,QAAIM,YAAY,GAAGT,EAAE,CAACM,KAAH,CAASC,GAAT,EAAcG,OAAd,GAAwBC,WAAxB,EAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAAY,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,UAAIE,IAAI,GAAGL,YAAY,CAACG,CAAD,CAAvB;;AACA,UAAIE,IAAI,CAACC,GAAL,KAAa,MAAjB,EAAyB;AACrBP,QAAAA,UAAU,CAACJ,QAAX,CAAoB,MAApB,IAA8BU,IAAI,CAACE,GAAL,CAAS,MAAT,CAA9B;AACAR,QAAAA,UAAU,CAACH,UAAX,GAAwBH,KAAK,CAACe,YAAN,CAAmBH,IAAnB,EAAyB,EAAzB,CAAxB;AACH,OAHD,MAIK;AACDN,QAAAA,UAAU,CAACJ,QAAX,CAAoBU,IAAI,CAACC,GAAzB,IAAgCD,IAAI,CAACI,IAArC;AACH;AACJ;;AACD,WAAOV,UAAP;AACH,GAfD;;AAiBAW,EAAAA,MAAM,CAACC,OAAP,GAAiBjB,oBAAjB;AACH,CAhED","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET      = require(\"elementtree\");\n    var utils   = require(\"./utils\");\n\n    /**\n     * This class represents the XML sent by Splunk for external validation of a\n     * new modular input.\n     *\n     * @example\n     *\n     *      var v =  new ValidationDefinition();\n     *\n     * @class splunkjs.ModularInputs.ValidationDefinition\n     */\n    function ValidationDefinition() {\n        this.metadata = {};\n        this.parameters = {};\n    }\n\n    /**\n     * Creates a `ValidationDefinition` from a provided string containing XML.\n     *\n     * This function will throw an exception if `str`\n     * contains unexpected XML.\n     *\n     * The XML typically will look like this:\n     * \n     * `<items>`\n     * `   <server_host>myHost</server_host>`\n     * `     <server_uri>https://127.0.0.1:8089</server_uri>`\n     * `     <session_key>123102983109283019283</session_key>`\n     * `     <checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`\n     * `     <item name=\"myScheme\">`\n     * `       <param name=\"param1\">value1</param>`\n     * `       <param_list name=\"param2\">`\n     * `         <value>value2</value>`\n     * `         <value>value3</value>`\n     * `         <value>value4</value>`\n     * `       </param_list>`\n     * `     </item>`\n     * `</items>`\n     *\n     * @param {String} str A string containing XML to parse.\n     *\n     * @function splunkjs.ModularInputs.ValidationDefinition\n     */\n    ValidationDefinition.parse = function(str) {\n        var definition = new ValidationDefinition();\n        var rootChildren = ET.parse(str).getroot().getchildren();\n\n        for (var i = 0; i < rootChildren.length; i++) {\n            var node = rootChildren[i];            \n            if (node.tag === \"item\") {\n                definition.metadata[\"name\"] = node.get(\"name\");\n                definition.parameters = utils.parseXMLData(node, \"\");\n            }\n            else {\n                definition.metadata[node.tag] = node.text;\n            }\n        }\n        return definition;\n    };\n    \n    module.exports = ValidationDefinition;\n})();"]},"metadata":{},"sourceType":"script"}