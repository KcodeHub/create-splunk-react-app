{"ast":null,"code":"/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var Class = require('./jquery.class').Class;\n\n  var logger = require('./log').Logger;\n\n  var utils = require('./utils');\n\n  var CookieHandler = require('cookie');\n\n  var root = exports || this;\n  var Http = null;\n  var queryBuilderMap = {\n    \"5\": function (message) {\n      var query = message.query || {};\n      var post = message.post || {};\n      var outputMode = query.output_mode || post.output_mode || \"json\"; // If the output mode doesn't start with \"json\" (e.g. \"csv\" or\n      // \"xml\"), we change it to \"json\".\n\n      if (!utils.startsWith(outputMode, \"json\")) {\n        outputMode = \"json\";\n      }\n\n      query.output_mode = outputMode;\n      return query;\n    },\n    \"4\": function (message) {\n      return message.query || {};\n    },\n    \"default\": function (message) {\n      return queryBuilderMap[\"5\"](message);\n    },\n    \"none\": function (message) {\n      return message.query || {};\n    }\n  };\n  /**\n   * A base class for HTTP abstraction that provides the basic functionality\n   * for performing GET, POST, DELETE, and REQUEST operations, and provides\n   * utilities to construct uniform responses.\n   *\n   * Base classes should only override `makeRequest` and `parseJSON`.\n   *\n   * @class splunkjs.Http\n   */\n\n  module.exports = root = Http = Class.extend({\n    /**\n     * Constructor for `splunkjs.Http`.\n     *\n     * @constructor\n     * @return {splunkjs.Http} A new `splunkjs.Http` instance.\n     *\n     * @method splunkjs.Http\n     */\n    init: function () {\n      // We perform the bindings so that every function works\n      // properly when it is passed as a callback.\n      this.get = utils.bind(this, this.get);\n      this.del = utils.bind(this, this.del);\n      this.post = utils.bind(this, this.post);\n      this.request = utils.bind(this, this.request);\n      this._buildResponse = utils.bind(this, this._buildResponse); // Set our default version to \"none\"\n\n      this._setSplunkVersion(\"none\"); // Cookie store for cookie based authentication.\n\n\n      this._cookieStore = {};\n    },\n\n    /*!*/\n    _setSplunkVersion: function (version) {\n      this.version = version;\n    },\n\n    /**\n     * Returns all cookies formatted as a string to be put into the Cookie Header.\n     */\n    _getCookieString: function () {\n      var cookieString = \"\";\n      utils.forEach(this._cookieStore, function (cookieValue, cookieKey) {\n        cookieString += cookieKey;\n        cookieString += '=';\n        cookieString += cookieValue;\n        cookieString += '; ';\n      });\n      return cookieString;\n    },\n\n    /**\n     * Takes a cookie header and returns an object of form { key: $cookieKey value: $cookieValue }\n     */\n    _parseCookieHeader: function (cookieHeader) {\n      // Returns an object of form { $cookieKey: $cookieValue, $optionalCookieAttributeName: $\"\"value, ... }\n      var parsedCookieObject = CookieHandler.parse(cookieHeader);\n      var cookie = {}; // This gets the first key value pair into an object and just repeatedly returns thereafter\n\n      utils.forEach(parsedCookieObject, function (cookieValue, cookieKey) {\n        if (cookie.key) {\n          return;\n        }\n\n        cookie.key = cookieKey;\n        cookie.value = cookieValue;\n      });\n      return cookie;\n    },\n\n    /**\n     * Performs a GET request.\n     *\n     * @param {String} url The URL of the GET request.\n     * @param {Object} headers An object of headers for this request.\n     * @param {Object} params Parameters for this request.\n     * @param {Number} timeout A timeout period.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Http\n     */\n    get: function (url, headers, params, timeout, callback) {\n      var message = {\n        method: \"GET\",\n        headers: headers,\n        timeout: timeout,\n        query: params\n      };\n      return this.request(url, message, callback);\n    },\n\n    /**\n     * Performs a POST request.\n     *\n     * @param {String} url The URL of the POST request.\n     * @param {Object} headers  An object of headers for this request.\n     * @param {Object} params Parameters for this request.\n     * @param {Number} timeout A timeout period.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Http\n     */\n    post: function (url, headers, params, timeout, callback) {\n      headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n      var message = {\n        method: \"POST\",\n        headers: headers,\n        timeout: timeout,\n        post: params\n      };\n      return this.request(url, message, callback);\n    },\n\n    /**\n     * Performs a DELETE request.\n     *\n     * @param {String} url The URL of the DELETE request.\n     * @param {Object} headers An object of headers for this request.\n     * @param {Object} params Query parameters for this request.\n     * @param {Number} timeout A timeout period.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Http\n     */\n    del: function (url, headers, params, timeout, callback) {\n      var message = {\n        method: \"DELETE\",\n        headers: headers,\n        timeout: timeout,\n        query: params\n      };\n      return this.request(url, message, callback);\n    },\n\n    /**\n     * Performs a request.\n     *\n     * This function sets up how to handle a response from a request, but\n     * delegates calling the request to the `makeRequest` subclass.\n     *\n     * @param {String} url The encoded URL of the request.\n     * @param {Object} message An object with values for method, headers, timeout, and encoded body.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Http\n     * @see makeRequest\n     */\n    request: function (url, message, callback) {\n      var that = this;\n\n      var wrappedCallback = function (response) {\n        callback = callback || function () {}; // Handle cookies if 'set-cookie' header is in the response\n\n\n        var cookieHeaders = response.response.headers['set-cookie'];\n\n        if (cookieHeaders) {\n          utils.forEach(cookieHeaders, function (cookieHeader) {\n            var cookie = that._parseCookieHeader(cookieHeader);\n\n            that._cookieStore[cookie.key] = cookie.value;\n          });\n        } // Handle callback\n\n\n        if (response.status < 400 && response.status !== \"abort\") {\n          callback(null, response);\n        } else {\n          callback(response);\n        }\n      };\n\n      var query = utils.getWithVersion(this.version, queryBuilderMap)(message);\n      var post = message.post || {};\n      var encodedUrl = url + \"?\" + Http.encode(query);\n      var body = message.body ? message.body : Http.encode(post);\n\n      var cookieString = that._getCookieString();\n\n      if (cookieString.length !== 0) {\n        message.headers[\"Cookie\"] = cookieString; // Remove Authorization header\n        // Splunk will use Authorization header and ignore Cookies if Authorization header is sent\n\n        delete message.headers[\"Authorization\"];\n      }\n\n      var options = {\n        method: message.method,\n        headers: message.headers,\n        timeout: message.timeout,\n        body: body\n      }; // Now we can invoke the user-provided HTTP class,\n      // passing in our \"wrapped\" callback\n\n      return this.makeRequest(encodedUrl, options, wrappedCallback);\n    },\n\n    /**\n     * Encapsulates the client-specific logic for performing a request. This\n     * function is meant to be overriden by subclasses.\n     *\n     * @param {String} url The encoded URL of the request.\n     * @param {Object} message An object with values for method, headers, timeout, and encoded body.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Http\n     */\n    makeRequest: function (url, message, callback) {\n      throw new Error(\"UNDEFINED FUNCTION - OVERRIDE REQUIRED\");\n    },\n\n    /**\n     * Encapsulates the client-specific logic for parsing the JSON response.\n     *\n     * @param {String} json The JSON response to parse.\n     * @return {Object} The parsed JSON.\n     *\n     * @method splunkjs.Http\n     */\n    parseJson: function (json) {\n      throw new Error(\"UNDEFINED FUNCTION - OVERRIDE REQUIRED\");\n    },\n\n    /**\n     * Generates a unified response with the given parameters.\n     *\n     * @param {Object} error An error object, if one exists for the request.\n     * @param {Object} response The response object.\n     * @param {Object} data The response data.\n     * @return {Object} A unified response object.\n     *\n     * @method splunkjs.Http\n     */\n    _buildResponse: function (error, response, data) {\n      var complete_response,\n          json = {};\n      var contentType = null;\n\n      if (response && response.headers) {\n        contentType = utils.trim(response.headers[\"content-type\"] || response.headers[\"Content-Type\"] || response.headers[\"Content-type\"] || response.headers[\"contentType\"]);\n      }\n\n      if (utils.startsWith(contentType, \"application/json\") && data) {\n        try {\n          json = this.parseJson(data) || {};\n        } catch (e) {\n          logger.error(\"Error in parsing JSON:\", data, e);\n          json = data;\n        }\n      } else {\n        json = data;\n      }\n\n      if (json) {\n        logger.printMessages(json.messages);\n      }\n\n      complete_response = {\n        response: response,\n        status: response ? response.statusCode : 0,\n        data: json,\n        error: error\n      };\n      return complete_response;\n    }\n  });\n  /**\n   * Encodes a dictionary of values into a URL-encoded format.\n   *\n   * @example\n   *\n   *      // should be a=1&b=2&b=3&b=4\n   *      encode({a: 1, b: [2,3,4]})\n   *\n   * @param {Object} params The parameters to URL encode.\n   * @return {String} The URL-encoded string.\n   *\n   * @function splunkjs.Http\n   */\n\n  Http.encode = function (params) {\n    var encodedStr = \"\"; // We loop over all the keys so we encode them.\n\n    for (var key in params) {\n      if (params.hasOwnProperty(key)) {\n        // Only append the ampersand if we already have\n        // something encoded, and the last character isn't\n        // already an ampersand\n        if (encodedStr && encodedStr[encodedStr.length - 1] !== \"&\") {\n          encodedStr = encodedStr + \"&\";\n        } // Get the value\n\n\n        var value = params[key]; // If it's an array, we loop over each value\n        // and encode it in the form &key=value[i]\n\n        if (value instanceof Array) {\n          for (var i = 0; i < value.length; i++) {\n            encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value[i]) + \"&\";\n          }\n        } else if (typeof value === \"object\") {\n          for (var innerKey in value) {\n            if (value.hasOwnProperty(innerKey)) {\n              var innerValue = value[innerKey];\n              encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value[innerKey]) + \"&\";\n            }\n          }\n        } else {\n          // If it's not an array, we just encode it\n          encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value);\n        }\n      }\n    }\n\n    if (encodedStr[encodedStr.length - 1] === '&') {\n      encodedStr = encodedStr.substr(0, encodedStr.length - 1);\n    }\n\n    return encodedStr;\n  };\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/http.js"],"names":["Class","require","logger","Logger","utils","CookieHandler","root","exports","Http","queryBuilderMap","message","query","post","outputMode","output_mode","startsWith","module","extend","init","get","bind","del","request","_buildResponse","_setSplunkVersion","_cookieStore","version","_getCookieString","cookieString","forEach","cookieValue","cookieKey","_parseCookieHeader","cookieHeader","parsedCookieObject","parse","cookie","key","value","url","headers","params","timeout","callback","method","that","wrappedCallback","response","cookieHeaders","status","getWithVersion","encodedUrl","encode","body","length","options","makeRequest","Error","parseJson","json","error","data","complete_response","contentType","trim","e","printMessages","messages","statusCode","encodedStr","hasOwnProperty","Array","i","encodeURIComponent","innerKey","innerValue","substr"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    \"use strict\";\n\n    var Class           = require('./jquery.class').Class;\n    var logger          = require('./log').Logger;\n    var utils           = require('./utils');\n    var CookieHandler   = require('cookie');\n\n    var root = exports || this;\n    var Http = null;\n\n    var queryBuilderMap = {\n        \"5\": function(message) {\n            var query = message.query || {};\n            var post = message.post || {};\n            var outputMode = query.output_mode || post.output_mode || \"json\";\n\n            // If the output mode doesn't start with \"json\" (e.g. \"csv\" or\n            // \"xml\"), we change it to \"json\".\n            if (!utils.startsWith(outputMode, \"json\")) {\n                outputMode = \"json\";\n            }\n\n            query.output_mode = outputMode;\n\n            return query;\n        },\n        \"4\": function(message) {\n            return message.query || {};\n        },\n        \"default\": function(message) {\n            return queryBuilderMap[\"5\"](message);\n        },\n        \"none\": function(message) {\n            return message.query || {};\n        }\n    };\n\n    /**\n     * A base class for HTTP abstraction that provides the basic functionality\n     * for performing GET, POST, DELETE, and REQUEST operations, and provides\n     * utilities to construct uniform responses.\n     *\n     * Base classes should only override `makeRequest` and `parseJSON`.\n     *\n     * @class splunkjs.Http\n     */\n    module.exports = root = Http = Class.extend({\n        /**\n         * Constructor for `splunkjs.Http`.\n         *\n         * @constructor\n         * @return {splunkjs.Http} A new `splunkjs.Http` instance.\n         *\n         * @method splunkjs.Http\n         */\n        init: function() {\n\n            // We perform the bindings so that every function works\n            // properly when it is passed as a callback.\n            this.get                = utils.bind(this, this.get);\n            this.del                = utils.bind(this, this.del);\n            this.post               = utils.bind(this, this.post);\n            this.request            = utils.bind(this, this.request);\n            this._buildResponse     = utils.bind(this, this._buildResponse);\n\n            // Set our default version to \"none\"\n            this._setSplunkVersion(\"none\");\n\n            // Cookie store for cookie based authentication.\n            this._cookieStore = {};\n        },\n\n        /*!*/\n        _setSplunkVersion: function(version) {\n            this.version = version;\n        },\n\n        /**\n         * Returns all cookies formatted as a string to be put into the Cookie Header.\n         */\n        _getCookieString: function() {\n            var cookieString = \"\";\n\n            utils.forEach(this._cookieStore, function (cookieValue, cookieKey) {\n                cookieString += cookieKey;\n                cookieString += '=';\n                cookieString += cookieValue;\n                cookieString += '; ';\n            });\n\n            return cookieString;\n\n        },\n\n        /**\n         * Takes a cookie header and returns an object of form { key: $cookieKey value: $cookieValue }\n         */\n        _parseCookieHeader: function(cookieHeader) {\n            // Returns an object of form { $cookieKey: $cookieValue, $optionalCookieAttributeName: $\"\"value, ... }\n            var parsedCookieObject = CookieHandler.parse(cookieHeader);\n            var cookie = {};\n\n            // This gets the first key value pair into an object and just repeatedly returns thereafter\n            utils.forEach(parsedCookieObject, function(cookieValue, cookieKey) {\n                if(cookie.key) {\n                    return;\n                }\n                cookie.key = cookieKey;\n                cookie.value = cookieValue;\n            });\n\n            return cookie;\n        },\n\n        /**\n         * Performs a GET request.\n         *\n         * @param {String} url The URL of the GET request.\n         * @param {Object} headers An object of headers for this request.\n         * @param {Object} params Parameters for this request.\n         * @param {Number} timeout A timeout period.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Http\n         */\n        get: function(url, headers, params, timeout, callback) {\n            var message = {\n                method: \"GET\",\n                headers: headers,\n                timeout: timeout,\n                query: params\n            };\n\n            return this.request(url, message, callback);\n        },\n\n        /**\n         * Performs a POST request.\n         *\n         * @param {String} url The URL of the POST request.\n         * @param {Object} headers  An object of headers for this request.\n         * @param {Object} params Parameters for this request.\n         * @param {Number} timeout A timeout period.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Http\n         */\n        post: function(url, headers, params, timeout, callback) {\n            headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n            var message = {\n                method: \"POST\",\n                headers: headers,\n                timeout: timeout,\n                post: params\n            };\n\n            return this.request(url, message, callback);\n        },\n\n        /**\n         * Performs a DELETE request.\n         *\n         * @param {String} url The URL of the DELETE request.\n         * @param {Object} headers An object of headers for this request.\n         * @param {Object} params Query parameters for this request.\n         * @param {Number} timeout A timeout period.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Http\n         */\n        del: function(url, headers, params, timeout, callback) {\n            var message = {\n                method: \"DELETE\",\n                headers: headers,\n                timeout: timeout,\n                query: params\n            };\n\n            return this.request(url, message, callback);\n        },\n\n        /**\n         * Performs a request.\n         *\n         * This function sets up how to handle a response from a request, but\n         * delegates calling the request to the `makeRequest` subclass.\n         *\n         * @param {String} url The encoded URL of the request.\n         * @param {Object} message An object with values for method, headers, timeout, and encoded body.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Http\n         * @see makeRequest\n         */\n        request: function(url, message, callback) {\n            var that = this;\n            var wrappedCallback = function(response) {\n                callback = callback || function() {};\n\n                // Handle cookies if 'set-cookie' header is in the response\n\n                var cookieHeaders = response.response.headers['set-cookie'];\n                if (cookieHeaders) {\n                    utils.forEach(cookieHeaders, function (cookieHeader) {\n                        var cookie = that._parseCookieHeader(cookieHeader);\n                        that._cookieStore[cookie.key] = cookie.value;\n                    });\n                }\n\n                // Handle callback\n\n                if (response.status < 400 && response.status !== \"abort\") {\n                    callback(null, response);\n                }\n                else {\n                    callback(response);\n                }\n            };\n\n            var query = utils.getWithVersion(this.version, queryBuilderMap)(message);\n            var post = message.post || {};\n\n            var encodedUrl = url + \"?\" + Http.encode(query);\n            var body = message.body ? message.body : Http.encode(post);\n\n            var cookieString = that._getCookieString();\n\n            if (cookieString.length !== 0) {\n                message.headers[\"Cookie\"] = cookieString;\n\n                // Remove Authorization header\n                // Splunk will use Authorization header and ignore Cookies if Authorization header is sent\n                delete message.headers[\"Authorization\"];\n            }\n\n            var options = {\n                method: message.method,\n                headers: message.headers,\n                timeout: message.timeout,\n                body: body\n            };\n\n            // Now we can invoke the user-provided HTTP class,\n            // passing in our \"wrapped\" callback\n            return this.makeRequest(encodedUrl, options, wrappedCallback);\n        },\n\n        /**\n         * Encapsulates the client-specific logic for performing a request. This\n         * function is meant to be overriden by subclasses.\n         *\n         * @param {String} url The encoded URL of the request.\n         * @param {Object} message An object with values for method, headers, timeout, and encoded body.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Http\n         */\n        makeRequest: function(url, message, callback) {\n            throw new Error(\"UNDEFINED FUNCTION - OVERRIDE REQUIRED\");\n        },\n\n        /**\n         * Encapsulates the client-specific logic for parsing the JSON response.\n         *\n         * @param {String} json The JSON response to parse.\n         * @return {Object} The parsed JSON.\n         *\n         * @method splunkjs.Http\n         */\n        parseJson: function(json) {\n            throw new Error(\"UNDEFINED FUNCTION - OVERRIDE REQUIRED\");\n        },\n\n        /**\n         * Generates a unified response with the given parameters.\n         *\n         * @param {Object} error An error object, if one exists for the request.\n         * @param {Object} response The response object.\n         * @param {Object} data The response data.\n         * @return {Object} A unified response object.\n         *\n         * @method splunkjs.Http\n         */\n        _buildResponse: function(error, response, data) {\n            var complete_response, json = {};\n\n            var contentType = null;\n            if (response && response.headers) {\n                contentType = utils.trim(response.headers[\"content-type\"] || response.headers[\"Content-Type\"] || response.headers[\"Content-type\"] || response.headers[\"contentType\"]);\n            }\n\n            if (utils.startsWith(contentType, \"application/json\") && data) {\n                try {\n                    json = this.parseJson(data) || {};\n                }\n                catch(e) {\n                    logger.error(\"Error in parsing JSON:\", data, e);\n                    json = data;\n                }\n            }\n            else {\n                json = data;\n            }\n\n            if (json) {\n                logger.printMessages(json.messages);\n            }\n\n            complete_response = {\n                response: response,\n                status: (response ? response.statusCode : 0),\n                data: json,\n                error: error\n            };\n\n            return complete_response;\n        }\n    });\n\n    /**\n     * Encodes a dictionary of values into a URL-encoded format.\n     *\n     * @example\n     *\n     *      // should be a=1&b=2&b=3&b=4\n     *      encode({a: 1, b: [2,3,4]})\n     *\n     * @param {Object} params The parameters to URL encode.\n     * @return {String} The URL-encoded string.\n     *\n     * @function splunkjs.Http\n     */\n    Http.encode = function(params) {\n        var encodedStr = \"\";\n\n        // We loop over all the keys so we encode them.\n        for (var key in params) {\n            if (params.hasOwnProperty(key)) {\n                // Only append the ampersand if we already have\n                // something encoded, and the last character isn't\n                // already an ampersand\n                if (encodedStr && encodedStr[encodedStr.length - 1] !== \"&\") {\n                    encodedStr = encodedStr + \"&\";\n                }\n\n                // Get the value\n                var value = params[key];\n\n                // If it's an array, we loop over each value\n                // and encode it in the form &key=value[i]\n                if (value instanceof Array) {\n                    for (var i = 0; i < value.length; i++) {\n                        encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value[i]) + \"&\";\n                    }\n                }\n                else if (typeof value === \"object\") {\n                    for(var innerKey in value) {\n                        if (value.hasOwnProperty(innerKey)) {\n                            var innerValue = value[innerKey];\n                            encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value[innerKey]) + \"&\";\n                        }\n                    }\n                }\n                else {\n                    // If it's not an array, we just encode it\n                    encodedStr = encodedStr + key + \"=\" + encodeURIComponent(value);\n                }\n            }\n        }\n\n        if (encodedStr[encodedStr.length - 1] === '&') {\n            encodedStr = encodedStr.substr(0, encodedStr.length - 1);\n        }\n\n        return encodedStr;\n    };\n})();\n"]},"metadata":{},"sourceType":"script"}