{"ast":null,"code":"// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\nvar Async = require('../async');\n\nvar ModularInputs = {\n  utils: require(\"./utils\"),\n  ValidationDefinition: require('./validationdefinition'),\n  InputDefinition: require('./inputdefinition'),\n  Event: require('./event'),\n  EventWriter: require('./eventwriter'),\n  Argument: require('./argument'),\n  Scheme: require('./scheme'),\n  ModularInput: require('./modularinput'),\n  Logger: require('./logger')\n};\n/**\n * Executes a modular input script.\n *\n * @param {Object} exports An instance of ModularInput representing a modular input.\n * @param {Object} module The module object, used for determining if it's the main module (`require.main`).\n */\n\nModularInputs.execute = function (exports, module) {\n  if (require.main === module) {\n    // Slice process.argv ignoring the first argument as it is the path to the node executable.\n    var args = process.argv.slice(1); // Default empty functions for life cycle events.\n\n    exports.setup = exports.setup || ModularInputs.ModularInput.prototype.setup;\n    exports.start = exports.start || ModularInputs.ModularInput.prototype.start;\n    exports.end = exports.end || ModularInputs.ModularInput.prototype.end;\n    exports.teardown = exports.teardown || ModularInputs.ModularInput.prototype.teardown; // Setup the default values.\n\n    exports._inputDefinition = exports._inputDefinition || null;\n    exports._service = exports._service || null; // We will call close() on this EventWriter after streaming events, which is handled internally\n    // by ModularInput.runScript().\n\n    var ew = new this.EventWriter(); // In order to ensure that everything that is written to stdout/stderr is flushed before we exit,\n    // set the file handles to blocking. This ensures we exit properly in a timely fashion.\n    // https://github.com/nodejs/node/issues/6456\n\n    [process.stdout, process.stderr].forEach(function (s) {\n      if (s && s.isTTY && s._handle && s._handle.setBlocking) {\n        s._handle.setBlocking(true);\n      }\n    });\n    var scriptStatus;\n    Async.chain([function (done) {\n      exports.setup(done);\n    }, function (done) {\n      ModularInputs.ModularInput.runScript(exports, args, ew, process.stdin, done);\n    }, function (status, done) {\n      scriptStatus = status;\n      exports.teardown(done);\n    }], function (err) {\n      if (err) {\n        ModularInputs.Logger.error('', err, ew._err);\n      }\n\n      process.exit(scriptStatus || err ? 1 : 0);\n    });\n  }\n};\n\nmodule.exports = ModularInputs;","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/index.js"],"names":["Async","require","ModularInputs","utils","ValidationDefinition","InputDefinition","Event","EventWriter","Argument","Scheme","ModularInput","Logger","execute","exports","module","main","args","process","argv","slice","setup","prototype","start","end","teardown","_inputDefinition","_service","ew","stdout","stderr","forEach","s","isTTY","_handle","setBlocking","scriptStatus","chain","done","runScript","stdin","status","err","error","_err","exit"],"mappings":"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","sourcesContent":["\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\nvar Async = require('../async');\n\nvar ModularInputs = {\n    utils: require(\"./utils\"),\n    ValidationDefinition: require('./validationdefinition'),\n    InputDefinition: require('./inputdefinition'),\n    Event: require('./event'),\n    EventWriter: require('./eventwriter'),\n    Argument: require('./argument'),\n    Scheme: require('./scheme'),\n    ModularInput: require('./modularinput'),\n    Logger: require('./logger')\n};\n\n/**\n * Executes a modular input script.\n *\n * @param {Object} exports An instance of ModularInput representing a modular input.\n * @param {Object} module The module object, used for determining if it's the main module (`require.main`).\n */\nModularInputs.execute = function(exports, module) {\n    if (require.main === module) {\n        // Slice process.argv ignoring the first argument as it is the path to the node executable.\n        var args = process.argv.slice(1);\n\n        // Default empty functions for life cycle events.\n        exports.setup       = exports.setup     || ModularInputs.ModularInput.prototype.setup;\n        exports.start       = exports.start     || ModularInputs.ModularInput.prototype.start;\n        exports.end         = exports.end       || ModularInputs.ModularInput.prototype.end;\n        exports.teardown    = exports.teardown  || ModularInputs.ModularInput.prototype.teardown;\n\n        // Setup the default values.\n        exports._inputDefinition = exports._inputDefinition || null;\n        exports._service         = exports._service         || null;\n\n        // We will call close() on this EventWriter after streaming events, which is handled internally\n        // by ModularInput.runScript().\n        var ew = new this.EventWriter();\n\n        // In order to ensure that everything that is written to stdout/stderr is flushed before we exit,\n        // set the file handles to blocking. This ensures we exit properly in a timely fashion.\n        // https://github.com/nodejs/node/issues/6456\n        [process.stdout, process.stderr].forEach(function(s) {\n            if (s && s.isTTY && s._handle && s._handle.setBlocking) {\n                s._handle.setBlocking(true);\n            }\n        });\n\n        var scriptStatus;\n        Async.chain([\n                function(done) {\n                    exports.setup(done);\n                },\n                function(done) {\n                    ModularInputs.ModularInput.runScript(exports, args, ew, process.stdin, done);\n                },\n                function(status, done) {\n                    scriptStatus = status;\n                    exports.teardown(done);\n                }\n            ],\n            function(err) {\n                if (err) {\n                    ModularInputs.Logger.error('', err, ew._err);\n                }\n\n                process.exit(scriptStatus || err ? 1 : 0);\n            }\n        );\n    }\n};\n\nmodule.exports = ModularInputs;\n"]},"metadata":{},"sourceType":"script"}