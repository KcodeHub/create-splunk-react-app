{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var Context = require('./context');\n\n  var Http = require('./http');\n\n  var Async = require('./async');\n\n  var Paths = require('./paths').Paths;\n\n  var Class = require('./jquery.class').Class;\n\n  var utils = require('./utils');\n\n  var root = exports || this;\n  var Service = null;\n  /**\n   * Contains functionality common to Splunk Enterprise and Splunk Storm.\n   * \n   * This class is an implementation detail and is therefore SDK-private.\n   * \n   * @class splunkjs.private.BaseService\n   * @extends splunkjs.Context\n   */\n\n  var BaseService = Context.extend({\n    init: function () {\n      this._super.apply(this, arguments);\n    }\n  });\n  /**\n   * Provides a root access point to Splunk functionality with typed access to \n   * Splunk resources such as searches, indexes, inputs, and more. Provides\n   * methods to authenticate and create specialized instances of the service.\n   *\n   * @class splunkjs.Service\n   * @extends splunkjs.private.BaseService\n   */\n\n  module.exports = root = Service = BaseService.extend({\n    /**\n     * Constructor for `splunkjs.Service`.\n     *\n     * @constructor\n     * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.\n     * @param {Object} params A dictionary of optional parameters: \n     *    - `scheme` (_string_): The scheme (\"http\" or \"https\") for accessing Splunk.\n     *    - `host` (_string_): The host name (the default is \"localhost\").\n     *    - `port` (_integer_): The port number (the default is 8089).\n     *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.\n     *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.\n     *    - `owner` (_string_): The owner (username) component of the namespace.\n     *    - `app` (_string_): The app component of the namespace.\n     *    - `sessionKey` (_string_): The current session token.\n     *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).\n     *    - `version` (_string_): The version string for Splunk, for example \"4.3.2\" (the default is \"5.0\").\n     * @return {splunkjs.Service} A new `splunkjs.Service` instance.\n     *\n     * @method splunkjs.Service\n     */\n    init: function () {\n      this._super.apply(this, arguments); // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n\n      this.specialize = utils.bind(this, this.specialize);\n      this.apps = utils.bind(this, this.apps);\n      this.configurations = utils.bind(this, this.configurations);\n      this.indexes = utils.bind(this, this.indexes);\n      this.savedSearches = utils.bind(this, this.savedSearches);\n      this.jobs = utils.bind(this, this.jobs);\n      this.users = utils.bind(this, this.users);\n      this.currentUser = utils.bind(this, this.currentUser);\n      this.views = utils.bind(this, this.views);\n      this.firedAlertGroups = utils.bind(this, this.firedAlertGroups);\n      this.dataModels = utils.bind(this, this.dataModels);\n    },\n\n    /**\n     * Creates a specialized version of the current `Service` instance for\n     * a specific namespace context. \n     *\n     * @example\n     *\n     *      var svc = ...;\n     *      var newService = svc.specialize(\"myuser\", \"unix\");\n     *\n     * @param {String} owner The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     * @param {String} app The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     * @return {splunkjs.Service} The specialized `Service` instance.\n     *\n     * @method splunkjs.Service\n     */\n    specialize: function (owner, app) {\n      return new Service(this.http, {\n        scheme: this.scheme,\n        host: this.host,\n        port: this.port,\n        username: this.username,\n        password: this.password,\n        owner: owner,\n        app: app,\n        sessionKey: this.sessionKey,\n        version: this.version\n      });\n    },\n\n    /**\n     * Gets the `Applications` collection, which allows you to \n     * list installed apps and retrieve information about them.\n     *\n     * @example\n     *\n     *      // List installed apps\n     *      var apps = svc.apps();\n     *      apps.fetch(function(err) { console.log(apps.list()); });\n     *\n     * @return {splunkjs.Service.Collection} The `Applications` collection.\n     *\n     * @endpoint apps/local\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Applications\n     */\n    apps: function () {\n      return new root.Applications(this);\n    },\n\n    /**\n     * Gets the `Configurations` collection, which lets you \n     * create, list, and retrieve configuration (.conf) files.\n     *\n     * @example\n     *\n     *      // List all properties in the 'props.conf' file\n     *      var files = svc.configurations();\n     *      files.item(\"props\", function(err, propsFile) {\n     *          propsFile.fetch(function(err, props) {\n     *              console.log(props.properties()); \n     *          });\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Configurations} The `Configurations` collection.\n     *\n     * @endpoint configs\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Configurations\n     */\n    configurations: function (namespace) {\n      return new root.Configurations(this, namespace);\n    },\n\n    /**\n     * Gets the `Indexes` collection, which lets you create, \n     * list, and update indexes. \n     *\n     * @example\n     *\n     *      // Check if we have an _internal index\n     *      var indexes = svc.indexes();\n     *      indexes.fetch(function(err, indexes) {\n     *          var index = indexes.item(\"_internal\");\n     *          console.log(\"Was index found: \" + !!index);\n     *          // `index` is an Index object.\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Indexes} The `Indexes` collection.\n     *\n     * @endpoint data/indexes\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Indexes\n     */\n    indexes: function (namespace) {\n      return new root.Indexes(this, namespace);\n    },\n\n    /**\n     * Gets the `SavedSearches` collection, which lets you\n     * create, list, and update saved searches. \n     *\n     * @example\n     *\n     *      // List all # of saved searches\n     *      var savedSearches = svc.savedSearches();\n     *      savedSearches.fetch(function(err, savedSearches) {\n     *          console.log(\"# Of Saved Searches: \" + savedSearches.list().length);\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.SavedSearches} The `SavedSearches` collection.\n     *\n     * @endpoint saved/searches\n     * @method splunkjs.Service\n     * @see splunkjs.Service.SavedSearches\n     */\n    savedSearches: function (namespace) {\n      return new root.SavedSearches(this, namespace);\n    },\n\n    /**\n     * Gets the `StoragePasswords` collection, which lets you\n     * create, list, and update storage passwords. \n     *\n     * @example\n     *\n     *      // List all # of storage passwords\n     *      var storagePasswords = svc.storagePasswords();\n     *      storagePasswords.fetch(function(err, storagePasswords) {\n     *          console.log(\"# of Storage Passwords: \" + storagePasswords.list().length);\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.StoragePasswords} The `StoragePasswords` collection.\n     *\n     * @endpoint storage/passwords\n     * @method splunkjs.Service\n     * @see splunkjs.Service.StoragePasswords\n     */\n    storagePasswords: function (namespace) {\n      return new root.StoragePasswords(this, namespace);\n    },\n\n    /**\n     * Gets the `FiredAlertGroupCollection` collection, which lets you\n     * list alert groups.\n     * \n     * @example\n     *      \n     *      // List all # of fired alert groups\n     *      var firedAlertGroups = svc.firedAlertGroups();\n     *      firedAlertGroups.fetch(function(err, firedAlertGroups) {\n     *          console.log(\"# of alert groups: \" + firedAlertGroups.list().length);\n     *      });\n     *\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.FiredAlertGroupCollection} The `FiredAlertGroupCollection` collection.\n     *\n     * @endpoint saved/searches\n     * @method splunkjs.Service\n     * @see splunkjs.Service.FiredAlertGroupCollection\n     */\n    firedAlertGroups: function (namespace) {\n      return new root.FiredAlertGroupCollection(this, namespace);\n    },\n\n    /**\n     * Gets the `Jobs` collection, which lets you create, list,\n     * and retrieve search jobs. \n     *\n     * @example\n     *\n     *      // List all job IDs\n     *      var jobs = svc.jobs();\n     *      jobs.fetch(function(err, jobs) {\n     *          var list = jobs.list();\n     *          for(var i = 0; i < list.length; i++) {\n     *              console.log(\"Job \" + (i+1) + \": \" + list[i].sid);\n     *          }\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Jobs} The `Jobs` collection.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Jobs\n     */\n    jobs: function (namespace) {\n      return new root.Jobs(this, namespace);\n    },\n\n    /**\n     * Gets the `DataModels` collection, which lets you create, list,\n     * and retrieve data models.\n     *\n     * @endpoint datamodel/model\n     * @method splunkjs.Service\n     * @see splunkjs.Service.DataModels\n     */\n    dataModels: function (namespace) {\n      return new root.DataModels(this, namespace);\n    },\n\n    /**\n     * Gets the `Users` collection, which lets you create, \n     * list, and retrieve users. \n     *\n     * @example\n     *\n     *      // List all usernames\n     *      var users = svc.users();\n     *      users.fetch(function(err, users) {\n     *          var list = users.list();\n     *          for(var i = 0; i < list.length; i++) {\n     *              console.log(\"User \" + (i+1) + \": \" + list[i].properties().name);\n     *          }\n     *      });\n     *\n     * @return {splunkjs.Service.Users} The `Users` collection.\n     *\n     * @endpoint authorization/users\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Users\n     */\n    users: function () {\n      return new root.Users(this);\n    },\n\n    /**\n     * Gets the `Views` collection, which lets you create,\n     * list, and retrieve views (custom UIs built in Splunk's app framework). \n     *\n     * @example\n     *\n     *      // List all views\n     *      var views = svc.views();\n     *      views.fetch(function(err, views) {\n     *          var list = views.list();\n     *          for(var i = 0; i < list.length; i++) {\n     *              console.log(\"View \" + (i+1) + \": \" + list[i].properties().name);\n     *          }\n     *      });\n     *\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Views} The `Views` collection.\n     *\n     * @endpoint data/ui/views\n     * @method splunkjs.Service\n     * @see splunkjs.Service.Views\n     */\n    views: function (namespace) {\n      return new root.Views(this, namespace);\n    },\n\n    /**\n     * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n     *\n     *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n     *      Poll for completion to find out when you can retrieve search results. \n     *\n     *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n     * \n     * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.\n     *\n     * @example\n     *\n     *      service.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\n     *          console.log(\"CREATED\": newJob.sid);\n     *      });\n     *\n     * @param {String} query The search query.\n     * @param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=\" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @param {Function} callback A function to call with the created job: `(err, createdJob)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service\n     */\n    search: function (query, params, namespace, callback) {\n      if (!callback && utils.isFunction(namespace)) {\n        callback = namespace;\n        namespace = null;\n      }\n\n      var jobs = new root.Jobs(this, namespace);\n      return jobs.search(query, params, callback);\n    },\n\n    /**\n     * A convenience method to get a `Job` by its sid.\n     *\n     * @param {String} sid The search ID for a search job.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @param {Function} callback A function to call with the created job: `(err, job)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service\n     */\n    getJob: function (sid, namespace, callback) {\n      if (!callback && utils.isFunction(namespace)) {\n        callback = namespace;\n        namespace = null;\n      }\n\n      var job = new root.Job(this, sid, namespace);\n      return job.fetch({}, callback);\n    },\n\n    /**\n     * Creates a oneshot search from a given search query and optional parameters.\n     *\n     * @example\n     *\n     *      service.oneshotSearch(\"search ERROR\", {id: \"myjob_123\"}, function(err, results) {\n     *          console.log(\"RESULT FIELDS\": results.fields);\n     *      });\n     *\n     * @param {String} query The search query.\n     * @param {Object} params A dictionary of properties for the search:\n     *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).\n     *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n     *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n     *    - `rf` (_string_): Specifies one or more fields to add to the search.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @param {Function} callback A function to call with the results of the search: `(err, results)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service\n     */\n    oneshotSearch: function (query, params, namespace, callback) {\n      if (!callback && utils.isFunction(namespace)) {\n        callback = namespace;\n        namespace = null;\n      }\n\n      var jobs = new root.Jobs(this, namespace);\n      return jobs.oneshotSearch(query, params, callback);\n    },\n\n    /**\n     * Gets the user that is currently logged in.\n     *\n     * @example\n     *\n     *      service.currentUser(function(err, user) {\n     *          console.log(\"Real name: \", user.properties().realname);\n     *      });\n     *\n     * @param {Function} callback A function to call with the user instance: `(err, user)`.\n     * @return {splunkjs.Service.currentUser} The `User`.\n     *\n     * @endpoint authorization/current-context\n     * @method splunkjs.Service\n     */\n    currentUser: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.get(Paths.currentUser, {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var username = response.data.entry[0].content.username;\n          var user = new root.User(that, username);\n          user.fetch(function () {\n            if (req.wasAborted) {\n              return; // aborted, so ignore\n            } else {\n              callback.apply(null, arguments);\n            }\n          });\n        }\n      });\n      return req;\n    },\n\n    /**\n     * Gets configuration information about the server.\n     *\n     * @example\n     *\n     *      service.serverInfo(function(err, info) {\n     *          console.log(\"Splunk Version: \", info.properties().version);\n     *      });\n     *\n     * @param {Function} callback A function to call with the server info: `(err, info)`.\n     *\n     * @endpoint server/info\n     * @method splunkjs.Service\n     */\n    serverInfo: function (callback) {\n      callback = callback || function () {};\n\n      var serverInfo = new root.ServerInfo(this);\n      return serverInfo.fetch(callback);\n    },\n\n    /**\n     * Parses a search query.\n     *\n     * @example\n     *\n     *      service.parse(\"search index=_internal | head 1\", function(err, parse) {\n     *          console.log(\"Commands: \", parse.commands);\n     *      });\n     *\n     * @param {String} query The search query to parse.\n     * @param {Object} params An object of options for the parser:\n     *    - `enable_lookups` (_boolean_): If `true`, performs reverse lookups to expand the search expression.\n     *    - `output_mode` (_string_): The output format (XML or JSON).\n     *    - `parse_only` (_boolean_): If `true`, disables the expansion of search due to evaluation of subsearches, time term expansion, lookups, tags, eventtypes, and sourcetype alias.\n     *    - `reload_macros` (_boolean_): If `true`, reloads macro definitions from macros.conf.\n     * @param {Function} callback A function to call with the parse info: `(err, parse)`.\n     *\n     * @endpoint search/parser\n     * @method splunkjs.Service\n     */\n    parse: function (query, params, callback) {\n      if (!callback && utils.isFunction(params)) {\n        callback = params;\n        params = {};\n      }\n\n      callback = callback || function () {};\n\n      params = params || {};\n      params.q = query;\n      return this.get(Paths.parser, params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data);\n        }\n      });\n    },\n\n    /**\n     * Provides auto-complete suggestions for search queries.\n     *\n     * @example\n     *\n     *      service.typeahead(\"index=\", 10, function(err, options) {\n     *          console.log(\"Autocompletion options: \", options);\n     *      });\n     *\n     * @param {String} prefix The query fragment to autocomplete.\n     * @param {Number} count The number of options to return (optional).\n     * @param {Function} callback A function to call with the autocompletion info: `(err, options)`.\n     *\n     * @endpoint search/typeahead\n     * @method splunkjs.Service\n     */\n    typeahead: function (prefix, count, callback) {\n      if (!callback && utils.isFunction(count)) {\n        callback = count;\n        count = 10;\n      }\n\n      callback = callback || function () {};\n\n      var params = {\n        count: count || 10,\n        prefix: prefix\n      };\n      return this.get(Paths.typeahead, params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var results = (response.data || {}).results;\n          callback(null, results || []);\n        }\n      });\n    },\n\n    /**\n     * Logs an event to Splunk.\n     *\n     * @example\n     *\n     *      service.log(\"A new event\", {index: \"_internal\", sourcetype: \"mysourcetype\"}, function(err, result) {\n     *          console.log(\"Submitted event: \", result);\n     *      });\n     *\n     * @param {String|Object} event The text for this event, or a JSON object.\n     * @param {Object} params A dictionary of parameters for indexing: \n     *    - `index` (_string_): The index to send events from this input to.\n     *    - `host` (_string_): The value to populate in the Host field for events from this data input. \n     *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. \n     *    - `source` (_string_): The value to populate in the Source field for events from this data input.\n     *    - `sourcetype` (_string_): The value to populate in the Sourcetype field for events from this data input.\n     * @param {Function} callback A function to call when the event is submitted: `(err, result)`.\n     *\n     * @endpoint receivers/simple\n     * @method splunkjs.Service\n     */\n    log: function (event, params, callback) {\n      if (!callback && utils.isFunction(params)) {\n        callback = params;\n        params = {};\n      }\n\n      callback = callback || function () {};\n\n      params = params || {}; // If the event is a JSON object, convert it to a string.\n\n      if (utils.isObject(event)) {\n        event = JSON.stringify(event);\n      }\n\n      var path = this.paths.submitEvent;\n      var method = \"POST\";\n      var headers = {\n        \"Content-Type\": \"text/plain\"\n      };\n      var body = event;\n      var get = params;\n      var post = {};\n      var req = this.request(path, method, get, post, body, headers, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data);\n        }\n      });\n      return req;\n    }\n  });\n  /**\n   * Provides a base definition for a Splunk endpoint, which is a combination of\n   * a specific service and path. Provides convenience methods for GET, POST, and\n   * DELETE operations used in splunkjs, automatically preparing the path correctly\n   * and allowing for relative calls.\n   *\n   * @class splunkjs.Service.Endpoint\n   */\n\n  root.Endpoint = Class.extend({\n    /**\n     * Constructor for `splunkjs.Service.Endpoint`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} qualifiedPath A fully-qualified relative endpoint path (for example, \"/services/search/jobs\").\n     * @return {splunkjs.Service.Endpoint} A new `splunkjs.Service.Endpoint` instance.\n     *\n     * @method splunkjs.Service.Endpoint\n     */\n    init: function (service, qualifiedPath) {\n      if (!service) {\n        throw new Error(\"Passed in a null Service.\");\n      }\n\n      if (!qualifiedPath) {\n        throw new Error(\"Passed in an empty path.\");\n      }\n\n      this.service = service;\n      this.qualifiedPath = qualifiedPath; // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n      this.get = utils.bind(this, this.get);\n      this.post = utils.bind(this, this.post);\n      this.del = utils.bind(this, this.del);\n    },\n\n    /**\n     * Performs a relative GET request on an endpoint's path,\n     * combined with the parameters and a relative path if specified.\n     *\n     * @example\n     *\n     *      // Will make a request to {service.prefix}/search/jobs/123456/results?offset=1\n     *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n     *      endpoint.get(\"results\", {offset: 1}, function() { console.log(\"DONE\"))});\n     *\n     * @param {String} relpath A relative path to append to the endpoint path.\n     * @param {Object} params A dictionary of entity-specific parameters to add to the query string.\n     * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Service.Endpoint\n     */\n    get: function (relpath, params, callback) {\n      var url = this.qualifiedPath; // If we have a relative path, we will append it with a preceding\n      // slash.\n\n      if (relpath) {\n        url = url + \"/\" + relpath;\n      }\n\n      return this.service.get(url, params, callback);\n    },\n\n    /**\n     * Performs a relative POST request on an endpoint's path,\n     * combined with the parameters and a relative path if specified.\n     *\n     * @example\n     *\n     *      // Will make a request to {service.prefix}/search/jobs/123456/control\n     *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n     *      endpoint.post(\"control\", {action: \"cancel\"}, function() { console.log(\"CANCELLED\"))});\n     *\n     * @param {String} relpath A relative path to append to the endpoint path.\n     * @param {Object} params A dictionary of entity-specific parameters to add to the body.\n     * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Service.Endpoint\n     */\n    post: function (relpath, params, callback) {\n      var url = this.qualifiedPath; // If we have a relative path, we will append it with a preceding\n      // slash.\n\n      if (relpath) {\n        url = url + \"/\" + relpath;\n      }\n\n      return this.service.post(url, params, callback);\n    },\n\n    /**\n     * Performs a relative DELETE request on an endpoint's path,\n     * combined with the parameters and a relative path if specified.\n     *\n     * @example\n     *\n     *      // Will make a request to {service.prefix}/search/jobs/123456\n     *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n     *      endpoint.delete(\"\", {}, function() { console.log(\"DELETED\"))});\n     *\n     * @param {String} relpath A relative path to append to the endpoint path.\n     * @param {Object} params A dictionary of entity-specific parameters to add to the query string.\n     * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Service.Endpoint\n     */\n    del: function (relpath, params, callback) {\n      var url = this.qualifiedPath; // If we have a relative path, we will append it with a preceding\n      // slash.\n\n      if (relpath) {\n        url = url + \"/\" + relpath;\n      }\n\n      return this.service.del(url, params, callback);\n    }\n  });\n  /**\n   * Provides a base definition for a Splunk resource (for example, an entity \n   * such as an index or search job, or a collection of entities). Provides \n   * basic methods for handling Splunk resources, such as validation and \n   * accessing properties. \n   *\n   * This class should not be used directly because most methods are meant to be overridden.\n   *\n   * @class splunkjs.Service.Resource\n   * @extends splunkjs.Service.Endpoint\n   */\n\n  root.Resource = root.Endpoint.extend({\n    /**\n     * Constructor for `splunkjs.Service.Resource`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Resource} A new `splunkjs.Service.Resource` instance.\n     *\n     * @method splunkjs.Service.Resource\n     */\n    init: function (service, path, namespace) {\n      var fullpath = service.fullpath(path, namespace);\n\n      this._super(service, fullpath);\n\n      this.namespace = namespace;\n      this._properties = {};\n      this._state = {}; // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n      this._load = utils.bind(this, this._load);\n      this.fetch = utils.bind(this, this.fetch);\n      this.properties = utils.bind(this, this.properties);\n      this.state = utils.bind(this, this.state);\n      this.path = utils.bind(this, this.path);\n    },\n\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Resource\n     */\n    path: function () {\n      throw new Error(\"MUST BE OVERRIDDEN\");\n    },\n\n    /**\n     * Loads the resource and stores the properties.\n     *\n     * @param {Object} properties The properties for this resource.\n     *\n     * @method splunkjs.Service.Resource\n     * @protected\n     */\n    _load: function (properties) {\n      this._properties = properties || {};\n      this._state = properties || {};\n    },\n\n    /**\n     * Refreshes the resource by fetching the object from the server\n     * and loading it.\n     *\n     * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n     *\n     * @method splunkjs.Service.Resource\n     * @protected\n     */\n    fetch: function (callback) {\n      throw new Error(\"MUST BE OVERRIDDEN\");\n    },\n\n    /**\n     * Retrieves the current properties for this resource.\n     *\n     * @return {Object} The properties.\n     *\n     * @method splunkjs.Service.Resource\n     */\n    properties: function () {\n      return this._properties;\n    },\n\n    /**\n     * Retrieves the current full state (properties and metadata) of this resource.\n     *\n     * @return {Object} The current full state of this resource.\n     *\n     * @method splunkjs.Service.Resource\n     */\n    state: function () {\n      return this._state;\n    }\n  });\n  /**\n   * Defines a base class for a Splunk entity, which is a well-defined construct\n   * with certain operations (such as \"properties\", \"update\", and \"delete\"). \n   * Entities include search jobs, indexes, inputs, apps, and more. \n   *\n   * Provides basic methods for working with Splunk entities, such as fetching and\n   * updating them.\n   *\n   * @class splunkjs.Service.Entity\n   * @extends splunkjs.Service.Resource\n   */\n\n  root.Entity = root.Resource.extend({\n    /**\n     * A static property that indicates whether to call `fetch` after an \n     * update to get the updated entity. By default, the entity is not \n     * fetched because the endpoint returns (echoes) the updated entity.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    fetchOnUpdate: false,\n\n    /**\n     * Constructor for `splunkjs.Service.Entity`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    init: function (service, path, namespace) {\n      this._super(service, path, namespace); // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n\n      this._load = utils.bind(this, this._load);\n      this.fetch = utils.bind(this, this.fetch);\n      this.remove = utils.bind(this, this.remove);\n      this.update = utils.bind(this, this.update);\n      this.fields = utils.bind(this, this.fields);\n      this.links = utils.bind(this, this.links);\n      this.acl = utils.bind(this, this.acl);\n      this.author = utils.bind(this, this.author);\n      this.updated = utils.bind(this, this.updated);\n      this.published = utils.bind(this, this.published);\n      this.enable = utils.bind(this, this.enable);\n      this.disable = utils.bind(this, this.disable);\n      this.reload = utils.bind(this, this.reload); // Initial values\n\n      this._properties = {};\n      this._fields = {};\n      this._acl = {};\n      this._links = {};\n    },\n\n    /**\n     * Loads the entity and stores the properties.\n     *\n     * @param {Object} properties The properties for this entity.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    _load: function (properties) {\n      properties = utils.isArray(properties) ? properties[0] : properties; // Initialize the properties to\n      // empty values\n\n      properties = properties || {\n        content: {},\n        fields: {},\n        acl: {},\n        links: {}\n      };\n\n      this._super(properties); // Take out the entity-specific content\n\n\n      this._properties = properties.content || {};\n      this._fields = properties.fields || this._fields || {};\n      this._acl = properties.acl || {};\n      this._links = properties.links || {};\n      this._author = properties.author || null;\n      this._updated = properties.updated || null;\n      this._published = properties.published || null;\n    },\n\n    /**\n     * Retrieves the fields information for this entity, indicating which \n     * fields are wildcards, required, and optional.\n     *\n     * @return {Object} The fields information.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    fields: function () {\n      return this._fields;\n    },\n\n    /**\n     * Retrieves the access control list (ACL) information for this entity,\n     * which contains the permissions for accessing the entity.\n     *\n     * @return {Object} The ACL.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    acl: function () {\n      return this._acl;\n    },\n\n    /**\n     * Retrieves the links information for this entity, which is the URI of\n     * the entity relative to the management port of a Splunk instance.\n     *\n     * @return {Object} The links information.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    links: function () {\n      return this._links;\n    },\n\n    /**\n     * Retrieves the author information for this entity.\n     *\n     * @return {String} The author.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    author: function () {\n      return this._author;\n    },\n\n    /**\n     * Retrieves the updated time for this entity.\n     *\n     * @return {String} The updated time.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    updated: function () {\n      return this._updated;\n    },\n\n    /**\n     * Retrieves the published time for this entity.\n     *\n     * @return {String} The published time.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    published: function () {\n      return this._published;\n    },\n\n    /**\n     * Refreshes the entity by fetching the object from the server and \n     * loading it.\n     *\n     * @param {Object} options An optional dictionary of collection filtering and pagination options:\n     *    - `count` (_integer_): The maximum number of items to return.\n     *    - `offset` (_integer_): The offset of the first item to return.\n     *    - `search` (_string_): The search query to filter responses.\n     *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.\n     *    - `sort_key` (_string_): The field to use for sorting (optional).\n     *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.\n     * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n     *\n     * @method splunkjs.Service.Entity\n     */\n    fetch: function (options, callback) {\n      if (!callback && utils.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      options = options || {};\n      var that = this;\n      return this.get(\"\", options, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          that._load(response.data ? response.data.entry : null);\n\n          callback(null, that);\n        }\n      });\n    },\n\n    /**\n     * Deletes the entity from the server.\n     *\n     * @param {Function} callback A function to call when the object is deleted: `(err)`.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    remove: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.del(\"\", {}, function (err) {\n        callback(err);\n      });\n    },\n\n    /**\n     * Updates the entity on the server.\n     *\n     * @param {Object} props The properties to update the object with.\n     * @param {Function} callback A function to call when the object is updated: `(err, entity)`.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    update: function (props, callback) {\n      callback = callback || function () {};\n\n      if (props.hasOwnProperty(\"name\")) {\n        throw new Error(\"Cannot set 'name' field in 'update'\");\n      }\n\n      var that = this;\n      var req = this.post(\"\", props, function (err, response) {\n        if (!err && !that.fetchOnUpdate) {\n          that._load(response.data.entry);\n\n          callback(err, that);\n        } else if (!err && that.fetchOnUpdate) {\n          that.fetch(function () {\n            if (req.wasAborted) {\n              return; // aborted, so ignore\n            } else {\n              callback.apply(null, arguments);\n            }\n          });\n        } else {\n          callback(err, that);\n        }\n      });\n      return req;\n    },\n\n    /**\n     * Disables the entity on the server.\n     *\n     * @param {Function} callback A function to call when the object is disabled: `(err, entity)`.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    disable: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      this.post(\"disable\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, that);\n        }\n      });\n    },\n\n    /**\n     * Enables the entity on the server.\n     *\n     * @param {Function} callback A function to call when the object is enabled: `(err, entity)`.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    enable: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      this.post(\"enable\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, that);\n        }\n      });\n    },\n\n    /**\n     * Reloads the entity on the server.\n     *\n     * @param {Function} callback A function to call when the object is reloaded: `(err, entity)`.\n     *\n     * @method splunkjs.Service.Entity\n     * @protected\n     */\n    reload: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      this.post(\"_reload\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, that);\n        }\n      });\n    }\n  });\n  /**\n   * Defines a base class for a Splunk collection, which is a well-defined construct\n   * that provides basic methods for working with collections of entities, such as \n   * creating and listing entities.\n   *\n   * @class splunkjs.Service.Collection\n   * @extends splunkjs.Service.Resource\n   */\n\n  root.Collection = root.Resource.extend({\n    /**\n     * A static property that indicates whether to call `fetch` after an \n     * entity has been created. By default, the entity is not fetched \n     * because the endpoint returns (echoes) the new entity.\n      * @method splunkjs.Service.Collection\n     */\n    fetchOnEntityCreation: false,\n\n    /**\n     * Constructor for `splunkjs.Service.Collection`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Collection} A new `splunkjs.Service.Collection` instance.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    init: function (service, path, namespace) {\n      this._super(service, path, namespace); // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n\n      this._load = utils.bind(this, this._load);\n      this.fetch = utils.bind(this, this.fetch);\n      this.create = utils.bind(this, this.create);\n      this.list = utils.bind(this, this.list);\n      this.item = utils.bind(this, this.item);\n      this.instantiateEntity = utils.bind(this, this.instantiateEntity); // Initial values\n\n      this._entities = [];\n      this._entitiesByName = {};\n      this._properties = {};\n      this._paging = {};\n      this._links = {};\n    },\n\n    /**\n     * Creates a local instance of an entity. \n     *\n     * @param {Object} props The properties for this entity.\n     * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    instantiateEntity: function (props) {\n      throw new Error(\"MUST BE OVERRIDDEN\");\n    },\n\n    /**\n     * Loads the collection and properties, and creates a map of entity\n     * names to entity IDs (for retrieval purposes).\n     *\n     * @param {Object} properties The properties for this collection.\n     *\n     * @method splunkjs.Service.Collection\n     * @private\n     */\n    _load: function (properties) {\n      this._super(properties);\n\n      var entities = [];\n      var entitiesByName = {};\n      var entityPropertyList = properties.entry || [];\n\n      for (var i = 0; i < entityPropertyList.length; i++) {\n        var props = entityPropertyList[i];\n        var entity = this.instantiateEntity(props);\n\n        entity._load(props);\n\n        entities.push(entity);\n\n        if (entitiesByName.hasOwnProperty(entity.name)) {\n          entitiesByName[entity.name].push(entity);\n        } else {\n          entitiesByName[entity.name] = [entity];\n        }\n      }\n\n      this._entities = entities;\n      this._entitiesByName = entitiesByName;\n      this._paging = properties.paging || {};\n      this._links = properties.links || {};\n      this._updated = properties.updated || null;\n    },\n\n    /**\n     * Retrieves the links information for this collection, which is the URI of\n     * the resource relative to the management port of a Splunk instance.\n     *\n     * @return {Object} The links information.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    links: function () {\n      return this._links;\n    },\n\n    /**\n     * Retrieves the author information for this collection.\n     *\n     * @return {String} The author.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    paging: function () {\n      return this._paging;\n    },\n\n    /**\n     * Retrieves the updated time for this collection.\n     *\n     * @return {String} The updated time.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    updated: function () {\n      return this._updated;\n    },\n\n    /**\n     * Refreshes the resource by fetching the object from the server and \n     * loading it.\n     *\n     * @param {Object} options A dictionary of collection filtering and pagination options:\n     *    - `count` (_integer_): The maximum number of items to return.\n     *    - `offset` (_integer_): The offset of the first item to return.\n     *    - `search` (_string_): The search query to filter responses.\n     *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.\n     *    - `sort_key` (_string_): The field to use for sorting (optional).\n     *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.\n     * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    fetch: function (options, callback) {\n      if (!callback && utils.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      options = options || {};\n\n      if (!options.count) {\n        options.count = 0;\n      }\n\n      var that = this;\n      var req = that.get(\"\", options, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          that._load(response.data);\n\n          callback(null, that);\n        }\n      });\n      return req;\n    },\n\n    /**\n     * Returns a specific entity from the collection.\n     *\n     * @example\n     *\n     *      var apps = service.apps();\n     *      apps.fetch(function(err, apps) {\n     *          var app = apps.item(\"search\");\n     *          console.log(\"Search App Found: \" + !!app);\n     *          // `app` is an Application object.\n     *      });\n     *\n     * @param {String} id The name of the entity to retrieve.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The wildcard value \"-\", is not acceptable when searching for an entity.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The wildcard value \"-\" is unacceptable when searching for an entity.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @returns {splunkjs.Service.Entity} The entity, or `null` if one is not found.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    item: function (id, namespace) {\n      if (utils.isEmpty(namespace)) {\n        namespace = null;\n      }\n\n      if (!id) {\n        throw new Error(\"Must suply a non-empty name.\");\n      }\n\n      if (namespace && (namespace.app === '-' || namespace.owner === '-')) {\n        throw new Error(\"When searching for an entity, wildcards are not allowed in the namespace. Please refine your search.\");\n      }\n\n      var fullPath = null;\n\n      if (this._entitiesByName.hasOwnProperty(id)) {\n        var entities = this._entitiesByName[id];\n\n        if (entities.length === 1 && !namespace) {\n          // If there is only one entity with the\n          // specified name and the user did not\n          // specify a namespace, then we just\n          // return it\n          return entities[0];\n        } else if (entities.length === 1 && namespace) {\n          // If we specified a namespace, then we \n          // only return the entity if it matches\n          // the full path\n          fullPath = this.service.fullpath(entities[0].path(), namespace);\n\n          if (entities[0].qualifiedPath === fullPath) {\n            return entities[0];\n          } else {\n            return null;\n          }\n        } else if (entities.length > 1 && !namespace) {\n          // If there is more than one entity and we didn't\n          // specify a namespace, then we return an error\n          // saying the match is ambiguous\n          throw new Error(\"Ambiguous match for name '\" + id + \"'\");\n        } else {\n          // There is more than one entity, and we do have\n          // a namespace, so we try and find it\n          for (var i = 0; i < entities.length; i++) {\n            var entity = entities[i];\n            fullPath = this.service.fullpath(entities[i].path(), namespace);\n\n            if (entity.qualifiedPath === fullPath) {\n              return entity;\n            }\n          }\n        }\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Creates an entity on the server for this collection with the specified\n     * parameters.\n     *\n     * @example\n     *\n     *      var apps = service.apps();\n     *      apps.create({name: \"NewSearchApp\"}, function(err, newApp) {\n     *          console.log(\"CREATED\");\n     *      });\n     *\n     * @param {Object} params A dictionary of entity-specific properties.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     * @returns {Array} An array of `splunkjs.Service.Entity` objects.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    create: function (params, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var props = response.data.entry;\n\n          if (utils.isArray(props)) {\n            props = props[0];\n          }\n\n          var entity = that.instantiateEntity(props);\n\n          entity._load(props);\n\n          if (that.fetchOnEntityCreation) {\n            entity.fetch(function () {\n              if (req.wasAborted) {\n                return; // aborted, so ignore\n              } else {\n                callback.apply(null, arguments);\n              }\n            });\n          } else {\n            callback(null, entity);\n          }\n        }\n      });\n      return req;\n    },\n\n    /**\n     * Retrieves a list of all entities in the collection.\n     *\n     * @example\n     *\n     *      var apps = service.apps();\n     *      apps.fetch(function(err, apps) {\n     *          var appList = apps.list();\n     *          console.log(appList.length);\n     *      });\n     *\n     * @param {Function} callback A function to call with the list of entities: `(err, list)`.\n     *\n     * @method splunkjs.Service.Collection\n     */\n    list: function (callback) {\n      callback = callback || function () {};\n\n      return utils.clone(this._entities);\n    }\n  });\n  /**\n   * Represents a specific saved search, which you can then view, modify, and\n   * remove.\n   *\n   * @endpoint saved/searches/{name}\n   * @class splunkjs.Service.SavedSearch\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.SavedSearch = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.SavedSearch\n     */\n    path: function () {\n      return Paths.savedSearches + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.SavedSearch`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name for the new saved search.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.\n     *\n     * @method splunkjs.Service.SavedSearch\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n\n      this.acknowledge = utils.bind(this, this.acknowledge);\n      this.dispatch = utils.bind(this, this.dispatch);\n      this.history = utils.bind(this, this.history);\n      this.suppressInfo = utils.bind(this, this.suppressInfo);\n    },\n\n    /**\n     * Gets the count of triggered alerts for this savedSearch,\n     * defaulting to 0 when undefined.\n     *\n     * @example\n     *\n     *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n     *      var alertCount = savedSearch.alertCount();\n     * \n     * @return {Number} The count of triggered alerts.\n     *\n     * @method splunkjs.Service.SavedSearch\n     */\n    alertCount: function () {\n      return parseInt(this.properties().triggered_alert_count, 10) || 0;\n    },\n\n    /**\n     * Acknowledges the suppression of the alerts from a saved search and\n     * resumes alerting.\n     *\n     * @example\n     *\n     *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n     *      savedSearch.acknowledge(function(err, search) {\n     *          console.log(\"ACKNOWLEDGED\");\n     *      });\n     *\n     * @param {Function} callback A function to call when the saved search is acknowledged: `(err, savedSearch)`.\n     *\n     * @endpoint saved/searches/{name}/acknowledge\n     * @method splunkjs.Service.SavedSearch\n     */\n    acknowledge: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"acknowledge\", {}, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Dispatches a saved search, which creates a search job and returns a \n     * `splunkjs.Service.Job` instance in the callback function.\n     *\n     * @example\n     *\n     *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n     *      savedSearch.dispatch({force_dispatch: false}, function(err, job, savedSearch) {\n     *          console.log(\"Job SID: \", job.sid);\n     *      });\n     *\n     * @param {Object} options The options for dispatching this saved search:\n     *    - `dispatch.now` (_string_): The time that is used to dispatch the search as though the specified time were the current time.\n     *    - `dispatch.*` (_string_): Overwrites the value of the search field specified in *.\n     *    - `trigger_actions` (_boolean_): Indicates whether to trigger alert actions.\n     *    - `force_dispatch` (_boolean_): Indicates whether to start a new search if another instance of this search is already running.\n     * @param {Function} callback A function to call when the saved search is dispatched: `(err, job, savedSearch)`.\n     *\n     * @endpoint saved/searches/{name}/dispatch\n     * @method splunkjs.Service.SavedSearch\n     */\n    dispatch: function (options, callback) {\n      if (!callback && utils.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      options = options || {};\n      var that = this;\n      var req = this.post(\"dispatch\", options, function (err, response) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var sid = response.data.sid;\n        var job = new root.Job(that.service, sid, that.namespace);\n        callback(null, job, that);\n      });\n      return req;\n    },\n\n    /** \n     * Gets the `splunkjs.Service.FiredAlertGroup` for firedAlerts associated with this saved search.\n     *\n     * @example\n     *\n     *      var alerts = service.firedAlertGroups().item(\"MySavedSearch\");\n     *\n     * @return {splunkjs.Service.FiredAlertGroup} An AlertGroup object with the\n     * same name as this SavedSearch object.\n     *\n     * @method splunkjs.Service.SavedSearch\n     */\n    firedAlertGroup: function () {\n      return new root.FiredAlertGroup(this.service, this.name);\n    },\n\n    /**\n     * Retrieves the job history for a saved search, which is a list of \n     * `splunkjs.Service.Job` instances.\n     *\n     * @example\n     *\n     *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n     *      savedSearch.history(function(err, jobs, search) {\n     *          for(var i = 0; i < jobs.length; i++) {\n     *              console.log(\"Job\", i, \":\", jobs[i].sid);\n     *          }\n     *      });\n     *\n     * @param {Function} callback A function to call when the history is retrieved: `(err, job, savedSearch)`.\n     *\n     * @endpoint saved/searches/{name}/history\n     * @method splunkjs.Service.SavedSearch\n     */\n    history: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"history\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var jobs = [];\n        var data = response.data.entry || [];\n\n        for (var i = 0; i < data.length; i++) {\n          var jobData = response.data.entry[i];\n          var namespace = utils.namespaceFromProperties(jobData);\n          var job = new root.Job(that.service, jobData.name, namespace);\n\n          job._load(jobData);\n\n          jobs.push(job);\n        }\n\n        callback(null, jobs, that);\n      });\n    },\n\n    /**\n     * Retrieves the suppression state of a saved search.\n     *\n     * @example\n     *\n     *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n     *      savedSearch.history(function(err, suppressionState, search) {\n     *          console.log(\"STATE: \", suppressionState);\n     *      });\n     *\n     * @param {Function} callback A function to call when the suppression state is retrieved: `(err, suppressionState, savedSearch)`.\n     *\n     * @endpoint saved/searches/{name}/suppress\n     * @method splunkjs.Service.SavedSearch\n     */\n    suppressInfo: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"suppress\", {}, function (err, response) {\n        callback(err, response.data.entry.content, that);\n      });\n    },\n\n    /**\n     * Updates the saved search on the server. \n     *\n     * **Note:** The search query is required, even when it isn't being modified.\n     * If you don't provide it, this method will fetch the search string from\n     * the server or from the local cache. \n     *\n     * @param {Object} props The properties to update the saved search with. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams\" target=\"_blank\">Saved search parameters</a> on Splunk Developer Portal.\n     * @param {Function} callback A function to call when the object is updated: `(err, entity)`.\n     *\n     * @method splunkjs.Service.SavedSearch\n     */\n    update: function (params, callback) {\n      params = params || {};\n\n      if (!params.search) {\n        var update = this._super;\n        var req = this.fetch(function (err, search) {\n          if (err) {\n            callback(err);\n          } else {\n            params.search = search.properties().search;\n            update.call(search, params, function () {\n              if (req.wasAborted) {\n                return; // aborted, so ignore\n              } else {\n                callback.apply(null, arguments);\n              }\n            });\n          }\n        });\n        return req;\n      } else {\n        return this._super(params, callback);\n      }\n    }\n  });\n  /**\n   * Represents a collection of saved searches. You can create and list saved \n   * searches using this collection container, or get a specific saved search.\n   *\n   *\n   * @endpoint saved/searches\n   * @class splunkjs.Service.SavedSearches\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.SavedSearches = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.SavedSearches\n     */\n    path: function () {\n      return Paths.savedSearches;\n    },\n\n    /**\n     * Creates a local instance of a saved search.\n     *\n     * @param {Object} props The properties for the new saved search. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams\" target=\"_blank\">Saved search parameters</a> on Splunk Developer Portal.\n     * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.\n     *\n     * @method splunkjs.Service.SavedSearches\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.SavedSearch(this.service, props.name, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.SavedSearches`. \n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.SavedSearches} A new `splunkjs.Service.SavedSearches` instance.\n     *\n     * @method splunkjs.Service.SavedSearches\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a specific storage password, which you can then view, modify, and\n   * remove.\n   *\n   * @endpoint storage/passwords/{name}\n   * @class splunkjs.Service.StoragePassword\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.StoragePassword = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.StoragePassword\n     */\n    path: function () {\n      return Paths.storagePasswords + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.StoragePassword`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name for the new storage password.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.StoragePassword} A new `splunkjs.Service.StoragePassword` instance.\n     *\n     * @method splunkjs.Service.StoragePassword\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a collection of storage passwords. You can create and list storage \n   * passwords using this collection container, or get a specific storage password.\n   *\n   * @endpoint storage/passwords\n   * @class splunkjs.Service.StoragePasswords\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.StoragePasswords = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.StoragePasswords\n     */\n    path: function () {\n      return Paths.storagePasswords;\n    },\n\n    /**\n     * Creates a local instance of a storage password.\n     *\n     * @param {Object} props The properties for the new storage password. For a list of available parameters,\n     * see <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords\" target=\"_blank\">\n     * POST storage/passwords</a> on Splunk Developer Portal.\n     * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.\n     *\n     * @method splunkjs.Service.StoragePasswords\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.StoragePassword(this.service, props.name, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.StoragePasswords`. \n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.StoragePasswords} A new `splunkjs.Service.StoragePasswords` instance.\n     *\n     * @method splunkjs.Service.StoragePasswords\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a fired alert. \n   * You can retrieve several of the fired alert's properties by\n   * the corresponding function name.\n   *\n   * @endpoint alerts/fired_alerts/{name}\n   * @class splunkjs.Service.FiredAlert\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.FiredAlert = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.FiredAlert\n     */\n    path: function () {\n      return Paths.firedAlerts + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Returns this alert's actions (such as notifying by email, running a \n     * script, adding to RSS, tracking in Alert Manager, and enabling \n     * summary indexing). \n     *\n     * @return {Array} of actions, an empty {Array} if no actions\n     * @method splunkjs.Service.FiredAlert\n     */\n    actions: function () {\n      return this.properties().actions || [];\n    },\n\n    /**\n     * Returns this alert's type.\n     *\n     * @return {String} the alert's type.\n     * @method splunkjs.Service.FiredAlert\n     */\n    alertType: function () {\n      return this.properties().alert_type || null;\n    },\n\n    /**\n     * Indicates whether the result is a set of events (digest) or a single\n     * event (per result).\n     *\n     * This method is available in Splunk 4.3 and later.\n     *\n     * @return {Boolean} true if the result is a digest, false if per result\n     * @method splunkjs.Service.FiredAlert\n     */\n    isDigestMode: function () {\n      // Convert this property to a Boolean\n      return !!this.properties().digest_mode;\n    },\n\n    /**\n     * Returns the rendered expiration time for this alert.\n     *\n     * This method is available in Splunk 4.3 and later.\n     *\n     * @return {String}\n     * @method splunkjs.Service.FiredAlert\n     */\n    expirationTime: function () {\n      return this.properties().expiration_time_rendered || null;\n    },\n\n    /**\n     * Returns the saved search for this alert.\n     *\n     * @return {String} The saved search name, or {null} if not available.\n     * @method splunkjs.Service.FiredAlert\n     */\n    savedSearchName: function () {\n      return this.properties().savedsearch_name || null;\n    },\n\n    /**\n     * Returns this alert's severity on a scale of 1 to 10, with 1 being the\n     * highest severity.\n     *\n     * @return {Number} this alert's severity, -1 if not specified\n     * @method splunkjs.Service.FiredAlert\n     */\n    severity: function () {\n      return parseInt(this.properties().severity, 10) || -1;\n    },\n\n    /**\n     * Returns this alert's search ID (SID).\n     *\n     * @return {String} This alert's SID, or {null} if not available.\n     * @method splunkjs.Service.FiredAlert\n     */\n    sid: function () {\n      return this.properties().sid || null;\n    },\n\n    /**\n     * Returns the time this alert was triggered.\n     *\n     * @return {Number} This alert's trigger time, or {null} if not available.\n     * @method splunkjs.Service.FiredAlert\n     */\n    triggerTime: function () {\n      return this.properties().trigger_time || null;\n    },\n\n    /**\n     * Returns this alert's rendered trigger time.\n     *\n     * This method is available in Splunk 4.3 and later.\n     *\n     * @return {String} This alert's rendered trigger time, or {null} if not available.\n     * @method splunkjs.Service.FiredAlert\n     */\n    triggerTimeRendered: function () {\n      return this.properties().trigger_time_rendered || null;\n    },\n\n    /**\n     * Returns the count of triggered alerts.\n     *\n     * This method is available in Splunk 4.3 and later.\n     *\n     * @return {Number} The number of triggered alerts, or -1 if not specified.\n     * @method splunkjs.Service.FiredAlert\n     */\n    triggeredAlertCount: function () {\n      return parseInt(this.properties().triggered_alerts, 10) || -1;\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.FiredAlert`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name for the new alert group.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.FiredAlert} A new `splunkjs.Service.FiredAlert` instance.\n     *\n     * @method splunkjs.Service.FiredAlert\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a specific alert group, which you can then view and\n   * remove.\n   *\n   * @endpoint alerts/fired_alerts/{name}\n   * @class splunkjs.Service.FiredAlertGroup\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.FiredAlertGroup = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.FiredAlertGroup\n     */\n    path: function () {\n      return Paths.firedAlerts + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Returns the `triggered_alert_count` property, the count\n     * of triggered alerts.\n     *\n     * @return {Number} the count of triggered alerts\n     *\n     * @method splunkjs.Service.FiredAlertGroup\n     */\n    count: function () {\n      return parseInt(this.properties().triggered_alert_count, 10) || 0;\n    },\n\n    /**\n     * Returns fired instances of this alert, which is\n     * a list of `splunkjs.Service.FiredAlert` instances.\n     *\n     * @example\n     *\n     *      var alertGroup = service.firedAlertGroups().item(\"MyAlert\");\n     *      alertGroup.list(function(err, firedAlerts, alert) {\n     *          for(var i = 0; i < firedAlerts.length; i++) {\n     *              console.log(\"Fired alert\", i, \":\", firedAlerts[i].sid);\n     *          }\n     *      });\n     *\n     * @param {Function} callback A function to call when the fired alerts are retrieved: `(err, firedAlerts, alertGroup)`.\n     *\n     * @method splunkjs.Service.FiredAlertGroup\n     */\n    list: function (options, callback) {\n      if (!callback && utils.isFunction(options)) {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      options = options || {};\n      var that = this;\n      return this.get(\"\", options, function (err, response) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var firedAlerts = [];\n        var data = response.data.entry || [];\n\n        for (var i = 0; i < data.length; i++) {\n          var firedAlertData = response.data.entry[i];\n          var namespace = utils.namespaceFromProperties(firedAlertData);\n          var firedAlert = new root.FiredAlert(that.service, firedAlertData.name, namespace);\n\n          firedAlert._load(firedAlertData);\n\n          firedAlerts.push(firedAlert);\n        }\n\n        callback(null, firedAlerts, that);\n      });\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.FiredAlertGroup`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name for the new alert group.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.\n     *\n     * @method splunkjs.Service.FiredAlertGroup\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n\n      this.list = utils.bind(this, this.list);\n    }\n  });\n  /**\n   * Represents a collection of fired alerts for a saved search. You can\n   * create and list saved searches using this collection container, or\n   * get a specific alert group. \n   *\n   *\n   * @endpoint alerts/fired_alerts\n   * @class splunkjs.Service.FiredAlertGroupCollection\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.FiredAlertGroupCollection = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.FiredAlertGroupCollection\n     */\n    path: function () {\n      return Paths.firedAlerts;\n    },\n\n    /**\n     * Creates a local instance of an alert group.\n     *\n     * @param {Object} props The properties for the alert group.\n     * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.\n     *\n     * @method splunkjs.Service.FiredAlertGroupCollection\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.FiredAlertGroup(this.service, props.name, entityNamespace);\n    },\n\n    /**\n     * Suppress removing alerts via the fired alerts endpoint.\n     *\n     * @method splunkjs.Service.FiredAlertGroupCollection\n     */\n    remove: function () {\n      throw new Error(\"To remove an alert, remove the saved search with the same name.\");\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.FiredAlertGroupCollection`. \n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.FiredAlertGroupCollection} A new `splunkjs.Service.FiredAlertGroupCollection` instance.\n     *\n     * @method splunkjs.Service.FiredAlertGroupCollection\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace);\n\n      this.instantiateEntity = utils.bind(this, this.instantiateEntity);\n      this.remove = utils.bind(this, this.remove);\n    }\n  });\n  /**\n   * Represents a specific Splunk app that you can view, modify, and\n   * remove.\n   *\n   * @endpoint apps/local/{name}\n   * @class splunkjs.Service.Application\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.Application = root.Entity.extend({\n    /**\n     * Indicates whether to call `fetch` after an update to get the updated \n     * item.\n     *\n     * @method splunkjs.Service.Application\n     */\n    fetchOnUpdate: true,\n\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Application\n     */\n    path: function () {\n      return Paths.apps + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Application`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name of the Splunk app.\n     * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.\n     *\n     * @method splunkjs.Service.Application\n     */\n    init: function (service, name) {\n      this.name = name;\n\n      this._super(service, this.path(), {});\n\n      this.setupInfo = utils.bind(this, this.setupInfo);\n      this.updateInfo = utils.bind(this, this.updateInfo);\n    },\n\n    /**\n     * Retrieves the setup information for a Splunk app.\n     *\n     * @example\n     *\n     *      var app = service.apps().item(\"app\");\n     *      app.setup(function(err, info, search) {\n     *          console.log(\"SETUP INFO: \", info);\n     *      });\n     *\n     * @param {Function} callback A function to call when setup information is retrieved: `(err, info, app)`.\n     *\n     * @endpoint apps/local/{name}/setup\n     * @method splunkjs.Service.Application\n     */\n    setupInfo: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"setup\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data.entry.content, that);\n        }\n      });\n    },\n\n    /**\n     * Retrieves any information for an update to a locally-installed Splunk app.\n     *\n     * @example\n     *\n     *      var app = service.apps().item(\"MyApp\");\n     *      app.updateInfo(function(err, info, app) {\n     *          console.log(\"UPDATE INFO: \", info);\n     *      });\n     *\n     * @param {Function} callback A function to call when update information is retrieved: `(err, info, app)`.\n     *\n     * @endpoint apps/local/{name}/update\n     * @method splunkjs.Service.Application\n     */\n    updateInfo: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"update\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data.entry.content, that);\n        }\n      });\n    }\n  });\n  /**\n   * Represents a collection of Splunk apps. You can create and list applications \n   * using this collection container, or get a specific app.\n   *\n   * @endpoint apps/local\n   * @class splunkjs.Service.Applications\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Applications = root.Collection.extend({\n    /**\n     * Indicates whether to call `fetch` after an entity has been created. By \n     * default, the entity is not fetched because the endpoint returns\n     * (echoes) the new entity.\n     *\n     * @method splunkjs.Service.Applications\n     */\n    fetchOnEntityCreation: true,\n\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Applications\n     */\n    path: function () {\n      return Paths.apps;\n    },\n\n    /**\n     * Creates a local instance of an app.\n     *\n     * @param {Object} props The properties for the new app. For details, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTapps#POST_apps.2Flocal\" target=\"_blank\">POST apps/local</a> endpoint in the REST API documentation.\n     * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.\n     *\n     * @method splunkjs.Service.Applications\n     */\n    instantiateEntity: function (props) {\n      return new root.Application(this.service, props.name, {});\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Applications`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @return {splunkjs.Service.Applications} A new `splunkjs.Service.Applications` instance.\n     *\n     * @method splunkjs.Service.Applications\n     */\n    init: function (service) {\n      this._super(service, this.path(), {});\n    }\n  });\n  /**\n   * Provides access to configuration information about the server.\n   *\n   * @endpoint server/info\n   * @class splunkjs.Service.ServerInfo\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.ServerInfo = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.ServerInfo\n     */\n    path: function () {\n      return Paths.info;\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.ServerInfo`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @return {splunkjs.Service.ServerInfo} A new `splunkjs.Service.ServerInfo` instance.\n     *\n     * @method splunkjs.Service.ServerInfo\n     */\n    init: function (service) {\n      this.name = \"server-info\";\n\n      this._super(service, this.path(), {});\n    }\n  });\n  /**\n   * Represents a specific Splunk user, which you can view, modify, and\n   * remove.\n   *\n   * @endpoint authentication/users/{name}\n   * @class splunkjs.Service.User\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.User = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.User\n     */\n    path: function () {\n      return Paths.users + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.User`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The Splunk username.\n     * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.\n     *\n     * @method splunkjs.Service.User\n     */\n    init: function (service, name) {\n      this.name = name;\n\n      this._super(service, this.path(), {});\n    }\n  });\n  /**\n   * Represents a collection of users. You can create and list users using \n   * this collection container, or get a specific user.\n   *\n   * @endpoint authentication/users\n   * @class splunkjs.Service.Users\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Users = root.Collection.extend({\n    /**\n     * Indicates whether to call `fetch` after an entity has been created. By \n     * default, the entity is not fetched because the endpoint returns\n     * (echoes) the new entity.\n     *\n     * @method splunkjs.Service.Users\n     */\n    fetchOnEntityCreation: true,\n\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Users\n     */\n    path: function () {\n      return Paths.users;\n    },\n\n    /**\n     * Creates a local instance of a user.\n     *\n     * @param {Object} props The properties for this new user. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams\" target=\"_blank\">User authentication parameters</a> on Splunk Developer Portal.\n     * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.\n     *\n     * @method splunkjs.Service.Users\n     */\n    instantiateEntity: function (props) {\n      return new root.User(this.service, props.name, {});\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Users`. \n     * \n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @return {splunkjs.Service.Users} A new `splunkjs.Service.Users` instance.\n     *\n     * @method splunkjs.Service.Users\n     */\n    init: function (service) {\n      this._super(service, this.path(), {});\n    },\n\n    /**\n     * Creates a new user. \n     *\n     * **Note:** This endpoint requires a special implementation.\n     *\n     * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams\" target=\"_blank\">User authentication parameters</a> on Splunk Developer Portal.\n     * @param {Function} callback A function to call with the new entity: `(err, createdEntity)`.\n     *\n     * @method splunkjs.Service.Users\n     */\n    create: function (params, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          // This endpoint requires us to use the passed-in name\n          var props = {\n            name: params.name\n          };\n          var entity = that.instantiateEntity(props);\n          entity.fetch(function () {\n            if (req.wasAborted) {\n              return; // aborted, so ignore\n            } else {\n              callback.apply(null, arguments);\n            }\n          });\n        }\n      });\n      return req;\n    }\n  });\n  /**\n   * Represents a specific Splunk view, which you can view, modify, and\n   * remove.\n   *\n   * @endpoint data/ui/views/{name}\n   * @class splunkjs.Service.View\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.View = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.View\n     */\n    path: function () {\n      return Paths.views + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.View`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name of the view.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.\n     *\n     * @method splunkjs.Service.View\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a collection of views. You can create and list views using \n   * this collection container, or get a specific view.\n   *\n   * @endpoint data/ui/views\n   * @class splunkjs.Service.Views\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Views = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Views\n     */\n    path: function () {\n      return Paths.views;\n    },\n\n    /**\n     * Creates a local instance of a view.\n     *\n     * @param {Object} props The properties for the new view. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_scheduled.2Fviews.2F.7Bname.7D\" target=\"_blank\">POST scheduled/views/{name}</a> endpoint in the REST API documentation.\n     * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.\n     *\n     * @method splunkjs.Service.Views\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.View(this.service, props.name, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Views`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Views} A new `splunkjs.Service.Views` instance.\n     *\n     * @method splunkjs.Service.Views\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents an index, which you can update and submit events to.\n   *\n   * @endpoint data/indexes/name\n   * @class splunkjs.Service.Index\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.Index = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Index\n     */\n    path: function () {\n      return Paths.indexes + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Index`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name of the index.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.\n     *\n     * @method splunkjs.Service.Index\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n\n      this.submitEvent = utils.bind(this, this.submitEvent);\n    },\n\n    /**\n     * Submits an event to this index.\n     *\n     * @example\n     *\n     *      var index = service.indexes().item(\"_internal\");\n     *      index.submitEvent(\"A new event\", {sourcetype: \"mysourcetype\"}, function(err, result, index) {\n     *          console.log(\"Submitted event: \", result);\n     *      });\n     *\n     * @param {String} event The text for this event.\n     * @param {Object} params A dictionary of parameters for indexing: \n     *    - `host` (_string_): The value to populate in the host field for events from this data input. \n     *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. \n     *    - `source` (_string_): The source value to fill in the metadata for this input's events.\n     *    - `sourcetype` (_string_): The sourcetype to apply to events from this input.\n     * @param {Function} callback A function to call when the event is submitted: `(err, result, index)`.\n     *\n     * @endpoint receivers/simple?index={name}\n     * @method splunkjs.Service.Index\n     */\n    submitEvent: function (event, params, callback) {\n      if (!callback && utils.isFunction(params)) {\n        callback = params;\n        params = {};\n      }\n\n      callback = callback || function () {};\n\n      params = params || {}; // Add the index name\n\n      params[\"index\"] = this.name;\n      var that = this;\n      return this.service.log(event, params, function (err, result) {\n        callback(err, result, that);\n      });\n    },\n    remove: function (callback) {\n      if (this.service.versionCompare(\"5.0\") < 0) {\n        throw new Error(\"Indexes cannot be removed in Splunk 4.x\");\n      } else {\n        return this._super(callback);\n      }\n    }\n  });\n  /**\n   * Represents a collection of indexes. You can create and list indexes using \n   * this collection container, or get a specific index.\n   *\n   * @endpoint data/indexes\n   * @class splunkjs.Service.Indexes\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Indexes = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Indexes\n     */\n    path: function () {\n      return Paths.indexes;\n    },\n\n    /**\n     * Creates a local instance of an index.\n     *\n     * @param {Object} props The properties for the new index. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ3#indexparams\" target=\"_blank\">Index parameters</a> on Splunk Developer Portal.\n     * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.\n     *\n     * @method splunkjs.Service.Indexes\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.Index(this.service, props.name, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Indexes`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Indexes} A new `splunkjs.Service.Indexes` instance.\n     *\n     * @method splunkjs.Service.Indexes\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace);\n    },\n\n    /**\n     * Creates an index with the given name and parameters.\n     *\n     * @example\n     *\n     *      var indexes = service.indexes();\n     *      indexes.create(\"NewIndex\", {assureUTF8: true}, function(err, newIndex) {\n     *          console.log(\"CREATED\");\n     *      });\n     *\n     * @param {String} name A name for this index.\n     * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ3#indexparams\" target=\"_blank\">Index parameters</a> on Splunk Developer Portal.\n     * @param {Function} callback A function to call with the new index: `(err, createdIndex)`.\n     *\n     * @endpoint data/indexes\n     * @method splunkjs.Service.Indexes\n     */\n    create: function (name, params, callback) {\n      // If someone called us with the default style of (params, callback),\n      // lets make it work\n      if (utils.isObject(name) && utils.isFunction(params) && !callback) {\n        callback = params;\n        params = name;\n        name = params.name;\n      }\n\n      params = params || {};\n      params[\"name\"] = name;\n      return this._super(params, callback);\n    }\n  });\n  /**\n   * Represents a specific stanza, which you can update and remove, from a \n   * configuration file.\n   *\n   * @endpoint configs/conf-{file}/{name}`\n   * @class splunkjs.Service.ConfigurationStanza\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.ConfigurationStanza = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.ConfigurationStanza\n     */\n    path: function () {\n      var name = this.name === \"default\" ? \"_new\" : this.name;\n      return Paths.configurations + \"/conf-\" + encodeURIComponent(this.file) + \"/\" + encodeURIComponent(name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.ConfigurationStanza`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} file The name of the configuration file.\n     * @param {String} name The name of the new stanza.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n     *\n     * @method splunkjs.Service.ConfigurationStanza\n     */\n    init: function (service, file, name, namespace) {\n      this.name = name;\n      this.file = file;\n\n      this._super(service, this.path(), namespace);\n    }\n  });\n  /**\n   * Represents a collection of stanzas for a specific property file. You can\n   * create and list stanzas using this collection container, or get a specific \n   * stanza.\n   *\n   * @endpoint configs/conf-{file}\n   * @class splunkjs.Service.ConfigurationFile\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.ConfigurationFile = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.ConfigurationFile\n     */\n    path: function () {\n      return Paths.configurations + \"/conf-\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Creates a local instance of the default stanza in a configuration file.\n     * You cannot directly update the `ConfigurationStanza` returned by this function.\n     *\n     * This is equivalent to viewing `configs/conf-{file}/_new`.\n     *\n     * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n     *\n     * @method splunkjs.Service.ConfigurationFile\n     */\n    getDefaultStanza: function () {\n      return new root.ConfigurationStanza(this.service, this.name, \"default\", this.namespace);\n    },\n\n    /**\n     * Creates a local instance of a stanza in a configuration file.\n     *\n     * @param {Object} props The key-value properties for the new stanza. \n     * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n     *\n     * @method splunkjs.Service.ConfigurationFile\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.ConfigurationStanza(this.service, this.name, props.name, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.ConfigurationFile`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name of the configuration file.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.\n     *\n     * @method splunkjs.Service.ConfigurationFile\n     */\n    init: function (service, name, namespace) {\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n    },\n\n    /**\n     * Creates a stanza in this configuration file.\n     *\n     * @example\n     *\n     *      var file = service.configurations().item(\"props\");\n     *      file.create(\"my_stanza\", function(err, newStanza) {\n     *          console.log(\"CREATED\");\n     *      });\n     *\n     * @param {String} stanzaName A name for this stanza.\n     * @param {Object} values A dictionary of key-value pairs to put in this stanza.\n     * @param {Function} callback A function to call with the created stanza: `(err, createdStanza)`.\n     *\n     * @endpoint configs/conf-{file}\n     * @method splunkjs.Service.ConfigurationFile\n     */\n    create: function (stanzaName, values, callback) {\n      // If someone called us with the default style of (params, callback),\n      // lets make it work\n      if (utils.isObject(stanzaName) && utils.isFunction(values) && !callback) {\n        callback = values;\n        values = stanzaName;\n        stanzaName = values.name;\n      }\n\n      if (utils.isFunction(values) && !callback) {\n        callback = values;\n        values = {};\n      }\n\n      values = values || {};\n      values[\"name\"] = stanzaName;\n      return this._super(values, callback);\n    }\n  });\n  /**\n   * Represents a collection of configuration files. You can create and list \n   * configuration files using this collection container, or get a specific file.\n   *\n   * @endpoint properties\n   * @class splunkjs.Service.Configurations\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Configurations = root.Collection.extend({\n    /**\n     * Indicates whether to call `fetch` after an entity has been created. By \n     * default, the entity is not fetched because the endpoint returns\n     * (echoes) the new entity.\n     *\n     * @method splunkjs.Service.Configurations\n     */\n    fetchOnEntityCreation: true,\n\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Configurations\n     */\n    path: function () {\n      return Paths.properties;\n    },\n\n    /**\n     * Creates a local instance of a configuration file.\n     *\n     * @param {Object} props The properties for this configuration file.\n     * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.\n     *\n     * @method splunkjs.Service.Configurations\n     */\n    instantiateEntity: function (props) {\n      return new root.ConfigurationFile(this.service, props.name, this.namespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Configurations`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Configurations} A new `splunkjs.Service.Configurations` instance.\n     *\n     * @method splunkjs.Service.Configurations\n     */\n    init: function (service, namespace) {\n      if (!namespace || namespace.owner === \"-\" || namespace.app === \"-\") {\n        throw new Error(\"Configurations requires a non-wildcard owner/app\");\n      }\n\n      this._super(service, this.path(), namespace);\n    },\n\n    /**\n     * Creates a configuration file.\n     *\n     * @example\n     *\n     *      var configurations = service.configurations();\n     *      configurations.create(\"myprops\", function(err, newFile) {\n     *          console.log(\"CREATED\");\n     *      });\n     *\n     * @param {String} filename A name for this configuration file.\n     * @param {Function} callback A function to call with the new configuration file: `(err, createdFile)`.\n     *\n     * @endpoint properties\n     * @method splunkjs.Service.Configurations\n     */\n    create: function (filename, callback) {\n      // If someone called us with the default style of (params, callback),\n      // lets make it work\n      if (utils.isObject(filename)) {\n        filename = filename[\"__conf\"];\n      }\n\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"\", {\n        __conf: filename\n      }, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var entity = new root.ConfigurationFile(that.service, filename);\n          entity.fetch(function () {\n            if (req.wasAborted) {\n              return; // aborted, so ignore\n            } else {\n              callback.apply(null, arguments);\n            }\n          });\n        }\n      });\n      return req;\n    }\n  });\n  /**\n   * Represents a specific search job. You can perform different operations\n   * on this job, such as reading its status, canceling it, and getting results.\n   *\n   * @endpoint search/jobs/{search_id}\n   * @class splunkjs.Service.Job\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.Job = root.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Job\n     */\n    path: function () {\n      return Paths.jobs + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Job`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} sid The search ID for this search job.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.\n     *\n     * @method splunkjs.Service.Job\n     */\n    init: function (service, sid, namespace) {\n      this.name = sid;\n\n      this._super(service, this.path(), namespace);\n\n      this.sid = sid; // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n      this.cancel = utils.bind(this, this.cancel);\n      this.disablePreview = utils.bind(this, this.disablePreview);\n      this.enablePreview = utils.bind(this, this.enablePreview);\n      this.events = utils.bind(this, this.events);\n      this.finalize = utils.bind(this, this.finalize);\n      this.pause = utils.bind(this, this.pause);\n      this.preview = utils.bind(this, this.preview);\n      this.results = utils.bind(this, this.results);\n      this.searchlog = utils.bind(this, this.searchlog);\n      this.setPriority = utils.bind(this, this.setPriority);\n      this.setTTL = utils.bind(this, this.setTTL);\n      this.summary = utils.bind(this, this.summary);\n      this.timeline = utils.bind(this, this.timeline);\n      this.touch = utils.bind(this, this.touch);\n      this.unpause = utils.bind(this, this.unpause);\n    },\n\n    /**\n     * Cancels a search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.cancel(function(err) {\n     *          console.log(\"CANCELLED\");\n     *      });\n     *\n     * @param {Function} callback A function to call when the search is done: `(err)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    cancel: function (callback) {\n      var req = this.post(\"control\", {\n        action: \"cancel\"\n      }, callback);\n      return req;\n    },\n\n    /**\n     * Disables preview generation for a search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.disablePreview(function(err, job) {\n     *          console.log(\"PREVIEW DISABLED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with this search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    disablePreview: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"disablepreview\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Enables preview generation for a search job. \n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.disablePreview(function(err, job) {\n     *          console.log(\"PREVIEW ENABLED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with this search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    enablePreview: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"enablepreview\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Returns the events of a search job with given parameters.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.events({count: 10}, function(err, events, job) {\n     *          console.log(\"Fields: \", events.fields);\n     *      });\n     *\n     * @param {Object} params The parameters for retrieving events. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fevents\" target=\"_blank\">GET search/jobs/{search_id}/events</a> endpoint in the REST API documentation.\n     * @param {Function} callback A function to call when the events are retrieved: `(err, events, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/events\n     * @method splunkjs.Service.Job\n     */\n    events: function (params, callback) {\n      callback = callback || function () {};\n\n      params = params || {};\n      params.output_mode = params.output_mode || \"json_rows\";\n      var that = this;\n      return this.get(\"events\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Finalizes a search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.finalize(function(err, job) {\n     *          console.log(\"JOB FINALIZED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with the job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    finalize: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"finalize\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Returns an iterator over this search job's events or results.\n     *\n     * @param {String} type One of {\"events\", \"preview\", \"results\"}.\n     * @param {Object} params A dictionary of optional parameters:\n     *    - `pagesize` (_integer_): The number of items to return on each request. Defaults to as many as possible.\n     * @return {Object} An iterator object with a `next(callback)` method, where `callback` is of the form `(err, results, hasMoreResults)`.\n     * \n     * @endpoint search/jobs/{search_id}/results\n     * @method splunkjs.Service.Job\n     */\n    iterator: function (type, params) {\n      return new root.PaginatedEndpointIterator(this[type], params);\n    },\n\n    /**\n     * Pauses a search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.pause(function(err, job) {\n     *          console.log(\"JOB PAUSED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with the job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    pause: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"pause\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /*\n     * Gets the preview results for a search job with given parameters.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.preview({count: 10}, function(err, results, job) {\n     *          console.log(\"Fields: \", results.fields);\n     *      });\n     *\n     * @param {Object} params The parameters for retrieving preview results. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults_preview\" target=\"_blank\">GET search/jobs/{search_id}/results_preview</a> endpoint in the REST API documentation.\n     * @param {Function} callback A function to call when the preview results are retrieved : `(err, results, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/results_preview\n     * @method splunkjs.Service.Job\n     */\n    preview: function (params, callback) {\n      callback = callback || function () {};\n\n      params = params || {};\n      params.output_mode = params.output_mode || \"json_rows\";\n      var that = this;\n      return this.get(\"results_preview\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Gets the results for a search job with given parameters.\n     * \n     * The callback can get `undefined` for its `results` parameter if the\n     * job is not yet done. To avoid this, use the `Job.track()` method to\n     * wait until the job is complete prior to fetching the results with\n     * this method.\n     * \n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.results({count: 10}, function(err, results, job) {\n     *          console.log(\"Fields: \", results.results);\n     *      });\n     *\n     * @param {Object} params The parameters for retrieving search results. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults\" target=\"_blank\">GET search/jobs/{search_id}/results</a> endpoint in the REST API documentation.\n     * @param {Function} callback A function to call when the results are retrieved: `(err, results, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/results\n     * @method splunkjs.Service.Job\n     */\n    results: function (params, callback) {\n      callback = callback || function () {};\n\n      params = params || {};\n      params.output_mode = params.output_mode || \"json_rows\";\n      var that = this;\n      return this.get(\"results\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Gets the search log for this search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.searchlog(function(err, searchlog, job) {\n     *          console.log(searchlog);\n     *      });\n     *\n     * @param {Function} callback A function to call with the search log and job: `(err, searchlog, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/search.log\n     * @method splunkjs.Service.Job\n     */\n    searchlog: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"search.log\", {}, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Sets the priority for this search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.setPriority(6, function(err, job) {\n     *          console.log(\"JOB PRIORITY SET\");\n     *      });\n     *\n     * @param {Number} value The priority (an integer between 1-10). A higher value means a higher priority.\n     * @param {Function} callback A function to call with the search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    setPriority: function (value, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"setpriority\",\n        priority: value\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Sets the time to live (TTL) for the search job, which is the time before\n     * the search job expires after it has been completed and is still available.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.setTTL(1000, function(err, job) {\n     *          console.log(\"JOB TTL SET\");\n     *      });\n     *\n     * @param {Number} value The time to live, in seconds. \n     * @param {Function} callback A function to call with the search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    setTTL: function (value, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"setttl\",\n        ttl: value\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Gets the summary for this search job with the given parameters.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.summary({top_count: 5}, function(err, summary, job) {\n     *          console.log(\"Summary: \", summary);\n     *      });\n     *\n     * @param {Object} params The parameters for retrieving the summary. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fsummary\" target=\"_blank\">GET search/jobs/{search_id}/summary</a> endpoint in the REST API documentation.\n     * @param {Function} callback A function to call with the summary and search job: `(err, summary, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/summmary\n     * @method splunkjs.Service.Job\n     */\n    summary: function (params, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"summary\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Gets the timeline for this search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.timeline({time_format: \"%c\"}, function(err, job, timeline) {\n     *          console.log(\"Timeline: \", timeline);\n     *      });\n     *\n     * @param {Object} params The parameters for retrieving the timeline. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Ftimeline\" target=\"_blank\">GET search/jobs/{search_id}/timeline </a> endpoint in the REST API documentation.\n     * @param {Function} callback A function to call with the timeline and search job: `(err, timeline, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/timeline\n     * @method splunkjs.Service.Job\n     */\n    timeline: function (params, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      return this.get(\"timeline\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data, that);\n        }\n      });\n    },\n\n    /**\n     * Touches a search job, which means extending the expiration time of \n     * the search to now plus the time to live (TTL).\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.touch(function(err) {\n     *          console.log(\"JOB TOUCHED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with the search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    touch: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"touch\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    },\n\n    /**\n     * Starts polling the status of this search job, and fires callbacks\n     * upon each status change.\n     * \n     * @param {Object} options A dictionary of optional parameters:\n     *    - `period` (_integer_): The number of milliseconds to wait between each poll. Defaults to 500.\n     * @param {Object|Function} callbacks A dictionary of optional callbacks:\n     *    - `ready`: A function `(job)` invoked when the job's properties first become available.\n     *    - `progress`: A function `(job)` invoked whenever new job properties are available.\n     *    - `done`: A function `(job)` invoked if the job completes successfully. No further polling is done.\n     *    - `failed`: A function `(job)` invoked if the job fails executing on the server. No further polling is done.\n     *    - `error`: A function `(err)` invoked if an error occurs while polling. No further polling is done.\n     * Or, if a function `(job)`, equivalent to passing it as a `done` callback.\n     *\n     * @method splunkjs.Service.Job\n     */\n    track: function (options, callbacks) {\n      var period = options.period || 500; // ms\n\n      if (utils.isFunction(callbacks)) {\n        callbacks = {\n          done: callbacks\n        };\n      }\n\n      var noCallbacksAfterReady = !callbacks.progress && !callbacks.done && !callbacks.failed && !callbacks.error;\n\n      callbacks.ready = callbacks.ready || function () {};\n\n      callbacks.progress = callbacks.progress || function () {};\n\n      callbacks.done = callbacks.done || function () {};\n\n      callbacks.failed = callbacks.failed || function () {};\n\n      callbacks.error = callbacks.error || function () {}; // For use by tests only\n\n\n      callbacks._preready = callbacks._preready || function () {};\n\n      callbacks._stoppedAfterReady = callbacks._stoppedAfterReady || function () {};\n\n      var that = this;\n      var emittedReady = false;\n      var doneLooping = false;\n      Async.whilst(function () {\n        return !doneLooping;\n      }, function (nextIteration) {\n        that.fetch(function (err, job) {\n          if (err) {\n            nextIteration(err);\n            return;\n          }\n\n          var dispatchState = job.properties().dispatchState;\n          var notReady = dispatchState === \"QUEUED\" || dispatchState === \"PARSING\";\n\n          if (notReady) {\n            callbacks._preready(job);\n          } else {\n            if (!emittedReady) {\n              callbacks.ready(job);\n              emittedReady = true; // Optimization: Don't keep polling the job if the\n              // caller only cares about the `ready` event.\n\n              if (noCallbacksAfterReady) {\n                callbacks._stoppedAfterReady(job);\n\n                doneLooping = true;\n                nextIteration();\n                return;\n              }\n            }\n\n            callbacks.progress(job);\n            var props = job.properties();\n\n            if (dispatchState === \"DONE\" && props.isDone) {\n              callbacks.done(job);\n              doneLooping = true;\n              nextIteration();\n              return;\n            } else if (dispatchState === \"FAILED\" && props.isFailed) {\n              callbacks.failed(job);\n              doneLooping = true;\n              nextIteration();\n              return;\n            }\n          }\n\n          Async.sleep(period, nextIteration);\n        });\n      }, function (err) {\n        if (err) {\n          callbacks.error(err);\n        }\n      });\n    },\n\n    /**\n     * Resumes a search job.\n     *\n     * @example\n     *\n     *      var job = service.jobs().item(\"mysid\");\n     *      job.unpause(function(err) {\n     *          console.log(\"JOB UNPAUSED\");\n     *      });\n     *\n     * @param {Function} callback A function to call with the search job: `(err, job)`.\n     *\n     * @endpoint search/jobs/{search_id}/control\n     * @method splunkjs.Service.Job\n     */\n    unpause: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = this.post(\"control\", {\n        action: \"unpause\"\n      }, function (err) {\n        callback(err, that);\n      });\n      return req;\n    }\n  });\n  /**\n   * Represents a collection of search jobs. You can create and list search \n   * jobs using this collection container, or get a specific search job.\n   *\n   * @endpoint search/jobs\n   * @class splunkjs.Service.Jobs\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.Jobs = root.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.Jobs\n     */\n    path: function () {\n      return Paths.jobs;\n    },\n\n    /**\n     * Creates a local instance of a job.\n     *\n     * @param {Object} props The properties for this new job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.\n     *\n     * @method splunkjs.Service.Jobs\n     */\n    instantiateEntity: function (props) {\n      var sid = props.content.sid;\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.Job(this.service, sid, entityNamespace);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.Jobs`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace Namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @return {splunkjs.Service.Jobs} A new `splunkjs.Service.Jobs` instance.\n     *\n     * @method splunkjs.Service.Jobs\n     */\n    init: function (service, namespace) {\n      this._super(service, this.path(), namespace); // We perform the bindings so that every function works \n      // properly when it is passed as a callback.\n\n\n      this.create = utils.bind(this, this.create);\n    },\n\n    /**\n     * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n     *\n     *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n     *      Poll for completion to find out when you can retrieve search results. \n     *\n     *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n     * \n     * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.\n     *\n     * @param {String} query The search query.\n     * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     * @param {Function} callback A function to call with the created job: `(err, createdJob)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service.Jobs\n     */\n    create: function (query, params, callback) {\n      // If someone called us with the default style of (params, callback),\n      // lets make it work\n      if (utils.isObject(query) && utils.isFunction(params) && !callback) {\n        callback = params;\n        params = query;\n        query = params.search;\n      }\n\n      callback = callback || function () {};\n\n      params = params || {};\n      params.search = query;\n\n      if ((params.exec_mode || \"\").toLowerCase() === \"oneshot\") {\n        throw new Error(\"Please use splunkjs.Service.Jobs.oneshotSearch for exec_mode=oneshot\");\n      }\n\n      if (!params.search) {\n        callback(\"Must provide a query to create a search job\");\n        return;\n      }\n\n      var that = this;\n      return this.post(\"\", params, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var job = new root.Job(that.service, response.data.sid, that.namespace);\n          callback(null, job);\n        }\n      });\n    },\n\n    /**\n     * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n     *\n     *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n     *      Poll for completion to find out when you can retrieve search results. \n     *\n     *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n     * \n     * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.\n     *\n     * @example\n     *\n     *      var jobs = service.jobs();\n     *      jobs.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\n     *          console.log(\"CREATED\": newJob.sid);\n     *      });\n     *\n     * @param {String} query The search query.\n     * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n     * @param {Function} callback A function to call with the new search job: `(err, createdJob)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service.Jobs\n     */\n    search: function (query, params, callback) {\n      return this.create(query, params, callback);\n    },\n\n    /**\n     * Creates a oneshot search from a given search query and parameters.\n     *\n     * @example\n     *\n     *      var jobs = service.jobs();\n     *      jobs.oneshotSearch(\"search ERROR\", {id: \"myjob_123\"}, function(err, results) {\n     *          console.log(\"RESULT FIELDS\": results.fields);\n     *      });\n     *\n     * @param {String} query The search query. \n     * @param {Object} params A dictionary of properties for the search:\n     *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).\n     *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n     *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n     *    - `rf` (_string_): Specifies one or more fields to add to the search.\n     * @param {Function} callback A function to call with the results of the search: `(err, results)`.\n     *\n     * @endpoint search/jobs\n     * @method splunkjs.Service.Jobs\n     */\n    oneshotSearch: function (query, params, callback) {\n      // If someone called us with the default style of (params, callback),\n      // lets make it work\n      if (utils.isObject(query) && utils.isFunction(params) && !callback) {\n        callback = params;\n        params = query;\n        query = params.search;\n      }\n\n      callback = callback || function () {};\n\n      params = params || {};\n      params.search = query;\n      params.exec_mode = \"oneshot\";\n\n      if (!params.search) {\n        callback(\"Must provide a query to create a search job\");\n      }\n\n      var outputMode = params.output_mode || \"json_rows\";\n      var path = this.qualifiedPath;\n      var method = \"POST\";\n      var headers = {};\n      var post = params;\n      var get = {\n        output_mode: outputMode\n      };\n      var body = null;\n      var req = this.service.request(path, method, get, post, body, headers, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, response.data);\n        }\n      });\n      return req;\n    }\n  });\n  /**\n   * Represents a field of a data model object.\n   * This is a helper class for `DataModelCalculation`\n   * and `DataModelObject`.\n   *\n   * Has these properties:\n   *    - `fieldName` (_string_): The name of this field.\n   *    - `displayName` (_string_):  A human readable name for this field.\n   *    - `type` (_string_): The type of this field.\n   *    - `multivalued` (_boolean_): Whether this field is multivalued.\n   *    - `required` (_boolean_): Whether this field is required.\n   *    - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.\n   *    - `editable` (_boolean_): Whether this field can be edited.\n   *    - `comment` (_string_): A comment for this field, or `null` if there isn't one.\n   *    - `fieldSearch` (_string_): A search query fragment for this field.\n   *    - `lineage` (_array_): An array of strings of the lineage of the data model\n   *          on which this field is defined.\n   *    - `owner` (_string_): The name of the data model object on which this field is defined.\n   *\n   * Possible types for a data model field:\n   *    - `string`\n   *    - `boolean`\n   *    - `number`\n   *    - `timestamp`\n   *    - `objectCount`\n   *    - `childCount`\n   *    - `ipv4`\n   *\n   * @class splunkjs.Service.DataModelField\n   */\n\n  root.DataModelField = Class.extend({\n    _types: [\"string\", \"number\", \"timestamp\", \"objectCount\", \"childCount\", \"ipv4\", \"boolean\"],\n\n    /**\n     * Constructor for a data model field.\n     * SDK users are not expected to invoke this constructor directly.\n     *\n     * @constructor\n     * @param {Object} props A dictionary of properties to set:\n     *     - `fieldName` (_string_): The name of this field.\n     *     - `displayName` (_string_): A human readable name for this field.\n     *     - `type` (_string_): The type of this field, see valid types in class docs.\n     *     - `multivalue` (_boolean_): Whether this field is multivalued.\n     *     - `required` (_boolean_): Whether this field is required on events in the object\n     *     - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.\n     *     - `editable` (_boolean_): Whether this field can be edited.\n     *     - `comment` (_string_): A comment for this field, or `null` if there isn't one.\n     *     - `fieldSearch` (_string_): A search query fragment for this field.\n     *     - `lineage` (_string_): The lineage of the data model object on which this field\n     *          is defined, items are delimited by a dot. This is converted into an array of\n     *          strings upon construction.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    init: function (props) {\n      props = props || {};\n      props.owner = props.owner || \"\";\n      this.name = props.fieldName;\n      this.displayName = props.displayName;\n      this.type = props.type;\n      this.multivalued = props.multivalue;\n      this.required = props.required;\n      this.hidden = props.hidden;\n      this.editable = props.editable;\n      this.comment = props.comment || null;\n      this.fieldSearch = props.fieldSearch;\n      this.lineage = props.owner.split(\".\");\n      this.owner = this.lineage[this.lineage.length - 1];\n    },\n\n    /**\n     * Is this data model field of type string?\n     *\n     * @return {Boolean} True if this data model field is of type string.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isString: function () {\n      return \"string\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type number?\n     *\n     * @return {Boolean} True if this data model field is of type number.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isNumber: function () {\n      return \"number\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type timestamp?\n     *\n     * @return {Boolean} True if this data model field is of type timestamp.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isTimestamp: function () {\n      return \"timestamp\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type object count?\n     *\n     * @return {Boolean} True if this data model field is of type object count.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isObjectcount: function () {\n      return \"objectCount\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type child count?\n     *\n     * @return {Boolean} True if this data model field is of type child count.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isChildcount: function () {\n      return \"childCount\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type ipv4?\n     *\n     * @return {Boolean} True if this data model field is of type ipv4.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isIPv4: function () {\n      return \"ipv4\" === this.type;\n    },\n\n    /**\n     * Is this data model field of type boolean?\n     *\n     * @return {Boolean} True if this data model field is of type boolean.\n     *\n     * @method splunkjs.Service.DataModelField\n     */\n    isBoolean: function () {\n      return \"boolean\" === this.type;\n    }\n  });\n  /**\n   * Represents a constraint on a `DataModelObject` or a `DataModelField`.\n   *\n   * Has these properties:\n   *    - `query` (_string_): The search query defining this data model constraint.\n   *    - `lineage` (_array_): The lineage of this data model constraint.\n   *    - `owner` (_string_): The name of the data model object that owns\n   *          this data model constraint.\n   *\n   * @class splunkjs.Service.DataModelConstraint\n   */\n\n  root.DataModelConstraint = Class.extend({\n    /**\n     * Constructor for a data model constraint.\n     * SDK users are not expected to invoke this constructor directly.\n     *\n     * @constructor\n     * @param {Object} props A dictionary of properties to set:\n     *     - `search` (_string_): The Splunk search query this constraint specifies.\n     *     - `owner` (_string_): The lineage of the data model object that owns this\n     *          constraint, items are delimited by a dot. This is converted into\n     *          an array of strings upon construction.\n     *\n     * @method splunkjs.Service.DataModelConstraint\n     */\n    init: function (props) {\n      props = props || {};\n      props.owner = props.owner || \"\";\n      this.query = props.search;\n      this.lineage = props.owner.split(\".\");\n      this.owner = this.lineage[this.lineage.length - 1];\n    }\n  });\n  /**\n   * Used for specifying a calculation on a `DataModelObject`.\n   *\n   * Has these properties:\n   *    - `id` (_string_): The ID for this data model calculation.\n   *    - `type` (_string_): The type of this data model calculation.\n   *    - `comment` (_string_|_null_): The comment for this data model calculation, or `null`.\n   *    - `editable` (_boolean_): True if this calculation can be edited, false otherwise.\n   *    - `lineage` (_array_): The lineage of the data model object on which this calculation\n   *          is defined in an array of strings.\n   *    - `owner` (_string_): The data model that this calculation belongs to.\n   *    - `outputFields` (_array_): The fields output by this calculation.\n   *\n   * The Rex and Eval types have an additional property:\n   *    - `expression` (_string_): The expression to use for this calculation.\n   *\n   * The Rex and GeoIP types have an additional property:\n   *    - `inputField` (_string_): The field to use for calculation.\n   *\n   * The Lookup type has additional properties:\n   *    - `lookupName` (_string_): The name of the lookup to perform.\n   *    - `inputFieldMappings` (_object_): The mappings from fields in the events to fields in the lookup.\n   *\n   * Valid types of calculations are:\n   *    - `Lookup`\n   *    - `Eval`\n   *    - `GeoIP`\n   *    - `Rex`\n   *\n   * @class splunkjs.Service.DataModelCalculation\n   */\n\n  root.DataModelCalculation = Class.extend({\n    _types: [\"Lookup\", \"Eval\", \"GeoIP\", \"Rex\"],\n\n    /**\n     * Constructor for a data model calculation.\n     * SDK users are not expected to invoke this constructor directly.\n     *\n     * @constructor\n     * @param {Object} props A dictionary of properties to set:\n     *     - `calculationID` (_string_): The ID of this calculation.\n     *     - `calculationType` (_string_): The type of this calculation, see class docs for valid types.\n     *     - `editable` (_boolean_): Whether this calculation can be edited.\n     *     - `comment` (_string_): A comment for this calculation, or `null` if there isn't one.\n     *     - `owner` (_string_): The lineage of the data model object on which this calculation\n     *          is defined, items are delimited by a dot. This is converted into an array of\n     *          strings upon construction.\n     *     - `outputFields` (_array_): An array of the fields this calculation generates.\n     *     - `expression` (_string_): The expression to use for this calculation; exclusive to `Eval` and `Rex` calculations (optional)\n     *     - `inputField` (_string_): The field to use for calculation; exclusive to `GeoIP` and `Rex` calculations (optional)\n     *     - `lookupName` (_string_): The name of the lookup to perform; exclusive to `Lookup` calculations (optional)\n     *     - `inputFieldMappings` (_array_): One element array containing an object with the mappings from fields in the events to fields\n     *         in the lookup; exclusive to `Lookup` calculations (optional)\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    init: function (props) {\n      props = props || {};\n      props.owner = props.owner || \"\";\n      this.id = props.calculationID;\n      this.type = props.calculationType;\n      this.comment = props.comment || null;\n      this.editable = props.editable;\n      this.lineage = props.owner.split(\".\");\n      this.owner = this.lineage[this.lineage.length - 1];\n      this.outputFields = [];\n\n      for (var i = 0; i < props.outputFields.length; i++) {\n        this.outputFields[props.outputFields[i].fieldName] = new root.DataModelField(props.outputFields[i]);\n      }\n\n      if (\"Eval\" === this.type || \"Rex\" === this.type) {\n        this.expression = props.expression;\n      }\n\n      if (\"GeoIP\" === this.type || \"Rex\" === this.type) {\n        this.inputField = props.inputField;\n      }\n\n      if (\"Lookup\" === this.type) {\n        this.lookupName = props.lookupName;\n        this.inputFieldMappings = props.lookupInputs[0];\n      }\n    },\n\n    /**\n     * Returns an array of strings of output field names.\n     *\n     * @return {Array} An array of strings of output field names.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    outputFieldNames: function () {\n      return Object.keys(this.outputFields);\n    },\n\n    /**\n     * Is this data model calculation editable?\n     *\n     * @return {Boolean} True if this data model calculation is editable.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    isEditable: function () {\n      return !!this.editable;\n    },\n\n    /**\n     * Is this data model calculation of type lookup?\n     *\n     * @return {Boolean} True if this data model calculation is of type lookup.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    isLookup: function () {\n      return \"Lookup\" === this.type;\n    },\n\n    /**\n     * Is this data model calculation of type eval?\n     *\n     * @return {Boolean} True if this data model calculation is of type eval.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    isEval: function () {\n      return \"Eval\" === this.type;\n    },\n\n    /**\n     * Is this data model calculation of type Rex?\n     *\n     * @return {Boolean} True if this data model calculation is of type Rex.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    isRex: function () {\n      return \"Rex\" === this.type;\n    },\n\n    /**\n     * Is this data model calculation of type GeoIP?\n     *\n     * @return {Boolean} True if this data model calculation is of type GeoIP.\n     *\n     * @method splunkjs.Service.DataModelCalculation\n     */\n    isGeoIP: function () {\n      return \"GeoIP\" === this.type;\n    }\n  });\n  /**\n   * Pivot represents data about a pivot report returned by the Splunk Server.\n   *\n   * Has these properties:\n   *    - `service` (_splunkjs.Service_): A `Service` instance.\n   *    - `search` (_string_): The search string for running the pivot report.\n   *    - `drilldownSearch` (_string_): The search for running this pivot report using drilldown.\n   *    - `openInSearch` (_string_): Equivalent to search parameter, but listed more simply.\n   *    - `prettyQuery` (_string_): Equivalent to `openInSearch`.\n   *    - `pivotSearch` (_string_): A pivot search command based on the named data model.\n   *    - `tstatsSearch` (_string_): The search for running this pivot report using tstats.\n   *\n   * @class splunkjs.Service.Pivot\n   */\n\n  root.Pivot = Class.extend({\n    /**\n     * Constructor for a pivot.\n     * SDK users are not expected to invoke this constructor directly.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} props A dictionary of properties to set:\n     *    - `search` (_string_): The search string for running the pivot report.\n     *    - `drilldown_search` (_string_): The search for running this pivot report using drilldown.\n     *    - `open_in_search` (_string_): Equivalent to search parameter, but listed more simply.\n     *    - `pivot_search` (_string_): A pivot search command based on the named data model.\n     *    - `tstats_search` (_string_|_null_): The search for running this pivot report using tstats, null if acceleration is disabled.\n     *\n     * @method splunkjs.Service.Pivot\n     */\n    init: function (service, props) {\n      this.service = service;\n      this.search = props.search;\n      this.drilldownSearch = props.drilldown_search;\n      this.prettyQuery = this.openInSearch = props.open_in_search;\n      this.pivotSearch = props.pivot_search;\n      this.tstatsSearch = props.tstats_search || null;\n      this.run = utils.bind(this, this.run);\n    },\n\n    /**\n     * Starts a search job running this pivot, accelerated if possible.\n     *\n     * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n     * @param {Function} callback A function to call when done creating the search job: `(err, job)`.\n     * @method splunkjs.Service.Pivot\n     */\n    run: function (args, callback) {\n      if (utils.isUndefined(callback)) {\n        callback = args;\n        args = {};\n      }\n\n      if (!args || Object.keys(args).length === 0) {\n        args = {};\n      } // If tstats is undefined, use pivotSearch (try to run an accelerated search if possible)\n\n\n      this.service.search(this.tstatsSearch || this.pivotSearch, args, callback);\n    }\n  });\n  /**\n   * PivotSpecification represents a pivot to be done on a particular data model object.\n   * The user creates a PivotSpecification on some data model object, adds filters, row splits,\n   * column splits, and cell values, then calls the pivot method to query splunkd and\n   * get a set of SPL queries corresponding to this specification.\n   *\n   * Call the `pivot` method to query Splunk for SPL queries corresponding to this pivot.\n   *\n   * This class supports a fluent API, each function except `init`, `toJsonObject` & `pivot`\n   * return the modified `splunkjs.Service.PivotSpecification` instance.\n   *\n   * @example\n   *     service.dataModels().fetch(function(err, dataModels) {\n   *         var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n   *         var pivotSpecification = searches.createPivotSpecification();\n   *         pivotSpecification\n   *             .addRowSplit(\"user\", \"Executing user\")\n   *             .addRangeColumnSplit(\"exec_time\", {limit: 4})\n   *             .addCellValue(\"search\", \"Search Query\", \"values\")\n   *             .pivot(function(err, pivot) {\n   *                 console.log(\"Got a Pivot object from the Splunk server!\");\n   *             });\n   *     });\n   *\n   * Has these properties:\n   *    - `dataModelObject` (_splunkjs.Service.DataModelObject_): The `DataModelObject` from which\n   *        this `PivotSpecification` was created.\n   *    - `columns` (_array_): The column splits on this `PivotSpecification`.\n   *    - `rows` (_array_): The row splits on this `PivotSpecification`.\n   *    - `filters` (_array_): The filters on this `PivotSpecification`.\n   *    - `cells` (_array_): The cell aggregations for this`PivotSpecification`.\n   *    - `accelerationNamespace` (_string_|_null_): The name of the `DataModel` that owns the `DataModelObject`\n   *        on which this `PivotSpecification` was created if the `DataModel` is accelerated. Alternatively,\n   *        you can set this property manually to the sid of an acceleration job in the format `sid=<sid>`.\n   *\n   * Valid comparison types are:\n   *    - `boolean`\n   *    - `string`\n   *    - `number`\n   *    - `ipv4`\n   *\n   * Valid boolean comparisons are:\n   *    - `=`\n   *    - `is`\n   *    - `isNull`\n   *    - `isNotNull`\n   *\n   * Valid string comparisons are:\n   *    - `=`\n   *    - `is`\n   *    - `isNull`\n   *    - `isNotNull`\n   *    - `contains`\n   *    - `doesNotContain`\n   *    - `startsWith`\n   *    - `endsWith`\n   *    - `regex`\n   *\n   * Valid number comparisons are:\n   *    - `=`\n   *    - `!=`\n   *    - `<`\n   *    - `>`\n   *    - `<=`\n   *    - `>=`\n   *    - `is`\n   *    - `isNull`\n   *    - `isNotNull`\n   *\n   * Valid ipv4 comparisons are:\n   *    - `is`\n   *    - `isNull`\n   *    - `isNotNull`\n   *    - `contains`\n   *    - `doesNotContain`\n   *    - `startsWith`\n   *\n   * Valid binning values are:\n   *    - `auto`\n   *    - `year`\n   *    - `month`\n   *    - `day`\n   *    - `hour`\n   *    - `minute`\n   *    - `second`\n   *\n   * Valid sort directions are:\n   *    - `ASCENDING`\n   *    - `DECENDING`\n   *    - `DEFAULT`\n   *\n   * Valid stats functions are:\n   *    - `list`\n   *    - `values`\n   *    - `first`\n   *    - `last`\n   *    - `count`\n   *    - `dc`\n   *    - `sum`\n   *    - `average`\n   *    - `max`\n   *    - `min`\n   *    - `stdev`\n   *    - `duration`\n   *    - `earliest`\n   *    - `latest`\n   *\n   * @class splunkjs.Service.PivotSpecification\n   */\n\n  root.PivotSpecification = Class.extend({\n    _comparisons: {\n      boolean: [\"=\", \"is\", \"isNull\", \"isNotNull\"],\n      string: [\"=\", \"is\", \"isNull\", \"isNotNull\", \"contains\", \"doesNotContain\", \"startsWith\", \"endsWith\", \"regex\"],\n      number: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"is\", \"isNull\", \"isNotNull\"],\n      ipv4: [\"is\", \"isNull\", \"isNotNull\", \"contains\", \"doesNotContain\", \"startsWith\"]\n    },\n    _binning: [\"auto\", \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\"],\n    _sortDirection: [\"ASCENDING\", \"DESCENDING\", \"DEFAULT\"],\n    _statsFunctions: [\"list\", \"values\", \"first\", \"last\", \"count\", \"dc\", \"sum\", \"average\", \"max\", \"min\", \"stdev\", \"duration\", \"earliest\", \"latest\"],\n\n    /**\n     * Constructor for a pivot specification.\n     *\n     * @constructor\n     * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    init: function (dataModelObject) {\n      this.dataModelObject = dataModelObject;\n      this.columns = [];\n      this.rows = [];\n      this.filters = [];\n      this.cells = [];\n      this.accelerationNamespace = dataModelObject.dataModel.isAccelerated() ? dataModelObject.dataModel.name : null;\n      this.run = utils.bind(this, this.run);\n      this.pivot = utils.bind(this, this.pivot);\n    },\n\n    /**\n     * Set the acceleration cache for this pivot specification to a job,\n     * usually generated by createLocalAccelerationJob on a DataModelObject\n     * instance, as the acceleration cache for this pivot specification.\n     *\n     * @param {String|splunkjs.Service.Job} sid The sid of an acceleration job,\n     *     or, a `splunkjs.Service.Job` instance.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    setAccelerationJob: function (sid) {\n      // If a search object is passed in, get its sid\n      if (sid && sid instanceof Service.Job) {\n        sid = sid.sid;\n      }\n\n      if (!sid) {\n        throw new Error(\"Sid to use for acceleration must not be null.\");\n      }\n\n      this.accelerationNamespace = \"sid=\" + sid;\n      return this;\n    },\n\n    /**\n     * Add a filter on a boolean valued field. The filter will be a constraint of the form\n     * `field `comparison` compareTo`, for example: `is_remote = false`.\n     *\n     * @param {String} fieldName The name of field to filter on\n     * @param {String} comparisonType The type of comparison, see class docs for valid types.\n     * @param {String} comparisonOp The comparison, see class docs for valid comparisons, based on type.\n     * @param {String} compareTo The value to compare the field to.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addFilter: function (fieldName, comparisonType, comparisonOp, compareTo) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Cannot add filter on a nonexistent field.\");\n      }\n\n      if (comparisonType !== this.dataModelObject.fieldByName(fieldName).type) {\n        throw new Error(\"Cannot add \" + comparisonType + \" filter on \" + fieldName + \" because it is of type \" + this.dataModelObject.fieldByName(fieldName).type);\n      }\n\n      if (!utils.contains(this._comparisons[comparisonType], comparisonOp)) {\n        throw new Error(\"Cannot add \" + comparisonType + \" filter because \" + comparisonOp + \" is not a valid comparison operator\");\n      }\n\n      var ret = {\n        fieldName: fieldName,\n        owner: this.dataModelObject.fieldByName(fieldName).lineage.join(\".\"),\n        type: comparisonType\n      }; // These fields are type dependent\n\n      if (utils.contains([\"boolean\", \"string\", \"ipv4\", \"number\"], ret.type)) {\n        ret.rule = {\n          comparator: comparisonOp,\n          compareTo: compareTo\n        };\n      }\n\n      this.filters.push(ret);\n      return this;\n    },\n\n    /**\n     * Add a limit on the events shown in a pivot by sorting them according to some field, then taking\n     * the specified number from the beginning or end of the list.\n     *\n     * @param {String} fieldName The name of field to filter on.\n     * @param {String} sortAttribute The name of the field to use for sorting.\n     * @param {String} sortDirection The direction to sort events, see class docs for valid types.\n     * @param {String} limit The number of values from the sorted list to allow through this filter.\n     * @param {String} statsFunction The stats function to use for aggregation before sorting, see class docs for valid types.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addLimitFilter: function (fieldName, sortAttribute, sortDirection, limit, statsFunction) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Cannot add limit filter on a nonexistent field.\");\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (!utils.contains([\"string\", \"number\", \"objectCount\"], f.type)) {\n        throw new Error(\"Cannot add limit filter on \" + fieldName + \" because it is of type \" + f.type);\n      }\n\n      if (\"string\" === f.type && !utils.contains([\"count\", \"dc\"], statsFunction)) {\n        throw new Error(\"Stats function for fields of type string must be COUNT or DISTINCT_COUNT; found \" + statsFunction);\n      }\n\n      if (\"number\" === f.type && !utils.contains([\"count\", \"dc\", \"average\", \"sum\"], statsFunction)) {\n        throw new Error(\"Stats function for fields of type number must be one of COUNT, DISTINCT_COUNT, SUM, or AVERAGE; found \" + statsFunction);\n      }\n\n      if (\"objectCount\" === f.type && !utils.contains([\"count\"], statsFunction)) {\n        throw new Error(\"Stats function for fields of type object count must be COUNT; found \" + statsFunction);\n      }\n\n      var filter = {\n        fieldName: fieldName,\n        owner: f.lineage.join(\".\"),\n        type: f.type,\n        attributeName: sortAttribute,\n        attributeOwner: this.dataModelObject.fieldByName(sortAttribute).lineage.join(\".\"),\n        sortDirection: sortDirection,\n        limitAmount: limit,\n        statsFn: statsFunction\n      }; // Assumed \"highest\" is preferred for when sortDirection is \"DEFAULT\"\n\n      filter.limitType = \"ASCENDING\" === sortDirection ? \"lowest\" : \"highest\";\n      this.filters.push(filter);\n      return this;\n    },\n\n    /**\n     * Add a row split on a numeric or string valued field, splitting on each distinct value of the field.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @param {String} label A human readable name for this set of rows.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addRowSplit: function (fieldName, label) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Did not find field \" + fieldName);\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (!utils.contains([\"number\", \"string\"], f.type)) {\n        throw new Error(\"Field was of type \" + f.type + \", expected number or string.\");\n      }\n\n      var row = {\n        fieldName: fieldName,\n        owner: f.owner,\n        type: f.type,\n        label: label\n      };\n\n      if (\"number\" === f.type) {\n        row.display = \"all\";\n      }\n\n      this.rows.push(row);\n      return this;\n    },\n\n    /**\n     * Add a row split on a numeric field, splitting into numeric ranges.\n     *\n     * This split generates bins with edges equivalent to the\n     * classic loop 'for i in <start> to <end> by <step>' but with a maximum\n     * number of bins <limit>. This dispatches to the stats and xyseries search commands.\n     * See their documentation for more details.\n     *\n     * @param {String} fieldName The field to split on.\n     * @param {String} label A human readable name for this set of rows.\n     * @param {Object} options An optional dictionary of collection filtering and pagination options:\n     *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.\n     *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.\n     *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.\n     *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addRangeRowSplit: function (field, label, ranges) {\n      if (!this.dataModelObject.hasField(field)) {\n        throw new Error(\"Did not find field \" + field);\n      }\n\n      var f = this.dataModelObject.fieldByName(field);\n\n      if (\"number\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected number.\");\n      }\n\n      var updateRanges = {};\n\n      if (!utils.isUndefined(ranges.start) && ranges.start !== null) {\n        updateRanges.start = ranges.start;\n      }\n\n      if (!utils.isUndefined(ranges.end) && ranges.end !== null) {\n        updateRanges.end = ranges.end;\n      }\n\n      if (!utils.isUndefined(ranges.step) && ranges.step !== null) {\n        updateRanges.size = ranges.step;\n      }\n\n      if (!utils.isUndefined(ranges.limit) && ranges.limit !== null) {\n        updateRanges.maxNumberOf = ranges.limit;\n      }\n\n      this.rows.push({\n        fieldName: field,\n        owner: f.owner,\n        type: f.type,\n        label: label,\n        display: \"ranges\",\n        ranges: updateRanges\n      });\n      return this;\n    },\n\n    /**\n     * Add a row split on a boolean valued field.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @param {String} label A human readable name for this set of rows.\n     * @param {String} trueDisplayValue A string to display in the true valued row label.\n     * @param {String} falseDisplayValue A string to display in the false valued row label.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addBooleanRowSplit: function (field, label, trueDisplayValue, falseDisplayValue) {\n      if (!this.dataModelObject.fieldByName(field)) {\n        throw new Error(\"Did not find field \" + field);\n      }\n\n      var f = this.dataModelObject.fieldByName(field);\n\n      if (\"boolean\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected boolean.\");\n      }\n\n      this.rows.push({\n        fieldName: field,\n        owner: f.owner,\n        type: f.type,\n        label: label,\n        trueLabel: trueDisplayValue,\n        falseLabel: falseDisplayValue\n      });\n      return this;\n    },\n\n    /**\n     * Add a row split on a timestamp valued field, binned by the specified bucket size.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @param {String} label A human readable name for this set of rows.\n     * @param {String} binning The size of bins to use, see class docs for valid types.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addTimestampRowSplit: function (field, label, binning) {\n      if (!this.dataModelObject.hasField(field)) {\n        throw new Error(\"Did not find field \" + field);\n      }\n\n      var f = this.dataModelObject.fieldByName(field);\n\n      if (\"timestamp\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected timestamp.\");\n      }\n\n      if (!utils.contains(this._binning, binning)) {\n        throw new Error(\"Invalid binning \" + binning + \" found. Valid values are: \" + this._binning.join(\", \"));\n      }\n\n      this.rows.push({\n        fieldName: field,\n        owner: f.owner,\n        type: f.type,\n        label: label,\n        period: binning\n      });\n      return this;\n    },\n\n    /**\n     * Add a column split on a string or number valued field, producing a column for\n     * each distinct value of the field.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addColumnSplit: function (fieldName) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Did not find field \" + fieldName);\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (!utils.contains([\"number\", \"string\"], f.type)) {\n        throw new Error(\"Field was of type \" + f.type + \", expected number or string.\");\n      }\n\n      var col = {\n        fieldName: fieldName,\n        owner: f.owner,\n        type: f.type\n      };\n\n      if (\"number\" === f.type) {\n        col.display = \"all\";\n      }\n\n      this.columns.push(col);\n      return this;\n    },\n\n    /**\n     * Add a column split on a numeric field, splitting the values into ranges.\n     *\n     * @param {String} fieldName The field to split on.\n     * @param {Object} options An optional dictionary of collection filtering and pagination options:\n     *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.\n     *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.\n     *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.\n     *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addRangeColumnSplit: function (fieldName, ranges) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Did not find field \" + fieldName);\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (\"number\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected number.\");\n      } // In Splunk 6.0.1.1, data models incorrectly expect strings for these fields\n      // instead of numbers. In 6.1, this is fixed and both are accepted.\n\n\n      var updatedRanges = {};\n\n      if (!utils.isUndefined(ranges.start) && ranges.start !== null) {\n        updatedRanges.start = ranges.start;\n      }\n\n      if (!utils.isUndefined(ranges.end) && ranges.end !== null) {\n        updatedRanges.end = ranges.end;\n      }\n\n      if (!utils.isUndefined(ranges.step) && ranges.step !== null) {\n        updatedRanges.size = ranges.step;\n      }\n\n      if (!utils.isUndefined(ranges.limit) && ranges.limit !== null) {\n        updatedRanges.maxNumberOf = ranges.limit;\n      }\n\n      this.columns.push({\n        fieldName: fieldName,\n        owner: f.owner,\n        type: f.type,\n        display: \"ranges\",\n        ranges: updatedRanges\n      });\n      return this;\n    },\n\n    /**\n     * Add a column split on a boolean valued field.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @param {String} trueDisplayValue A string to display in the true valued column label.\n     * @param {String} falseDisplayValue A string to display in the false valued column label.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addBooleanColumnSplit: function (fieldName, trueDisplayValue, falseDisplayValue) {\n      if (!this.dataModelObject.fieldByName(fieldName)) {\n        throw new Error(\"Did not find field \" + fieldName);\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (\"boolean\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected boolean.\");\n      }\n\n      this.columns.push({\n        fieldName: fieldName,\n        owner: f.owner,\n        type: f.type,\n        trueLabel: trueDisplayValue,\n        falseLabel: falseDisplayValue\n      });\n      return this;\n    },\n\n    /**\n     * Add a column split on a timestamp valued field, binned by the specified bucket size.\n     *\n     * @param {String} fieldName The name of field to split on.\n     * @param {String} binning The size of bins to use, see class docs for valid types.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addTimestampColumnSplit: function (field, binning) {\n      if (!this.dataModelObject.hasField(field)) {\n        throw new Error(\"Did not find field \" + field);\n      }\n\n      var f = this.dataModelObject.fieldByName(field);\n\n      if (\"timestamp\" !== f.type) {\n        throw new Error(\"Field was of type \" + f.type + \", expected timestamp.\");\n      }\n\n      if (!utils.contains(this._binning, binning)) {\n        throw new Error(\"Invalid binning \" + binning + \" found. Valid values are: \" + this._binning.join(\", \"));\n      }\n\n      this.columns.push({\n        fieldName: field,\n        owner: f.owner,\n        type: f.type,\n        period: binning\n      });\n      return this;\n    },\n\n    /**\n     * Add an aggregate to each cell of the pivot.\n     *\n     * @param {String} fieldName The name of field to aggregate.\n     * @param {String} label a human readable name for this aggregate.\n     * @param {String} statsFunction The function to use for aggregation, see class docs for valid stats functions.\n     * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    addCellValue: function (fieldName, label, statsFunction) {\n      if (!this.dataModelObject.hasField(fieldName)) {\n        throw new Error(\"Did not find field \" + fieldName);\n      }\n\n      var f = this.dataModelObject.fieldByName(fieldName);\n\n      if (utils.contains([\"string\", \"ipv4\"], f.type) && !utils.contains([\"list\", \"values\", \"first\", \"last\", \"count\", \"dc\"], statsFunction)) {\n        throw new Error(\"Stats function on string and IPv4 fields must be one of:\" + \" list, distinct_values, first, last, count, or distinct_count; found \" + statsFunction);\n      } else if (\"number\" === f.type && !utils.contains([\"sum\", \"count\", \"average\", \"min\", \"max\", \"stdev\", \"list\", \"values\"], statsFunction)) {\n        throw new Error(\"Stats function on number field must be must be one of:\" + \" sum, count, average, max, min, stdev, list, or distinct_values; found \" + statsFunction);\n      } else if (\"timestamp\" === f.type && !utils.contains([\"duration\", \"earliest\", \"latest\", \"list\", \"values\"], statsFunction)) {\n        throw new Error(\"Stats function on timestamp field must be one of:\" + \" duration, earliest, latest, list, or distinct values; found \" + statsFunction);\n      } else if (utils.contains([\"objectCount\", \"childCount\"], f.type) && \"count\" !== statsFunction) {\n        throw new Error(\"Stats function on childcount and objectcount fields must be count; \" + \"found \" + statsFunction);\n      } else if (\"boolean\" === f.type) {\n        throw new Error(\"Cannot use boolean valued fields as cell values.\");\n      }\n\n      this.cells.push({\n        fieldName: fieldName,\n        owner: f.lineage.join(\".\"),\n        type: f.type,\n        label: label,\n        sparkline: false,\n        // Not properly implemented in core yet.\n        value: statsFunction\n      });\n      return this;\n    },\n\n    /**\n     * Returns a JSON ready object representation of this pivot specification.\n     *\n     * @return {Object} The JSON ready object representation of this pivot specification.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    toJsonObject: function () {\n      return {\n        dataModel: this.dataModelObject.dataModel.name,\n        baseClass: this.dataModelObject.name,\n        rows: this.rows,\n        columns: this.columns,\n        cells: this.cells,\n        filters: this.filters\n      };\n    },\n\n    /**\n     * Query Splunk for SPL queries corresponding to a pivot report\n     * for this data model, defined by this `PivotSpecification`.\n     *\n     * @example\n     *\n     *      service.dataModels().fetch(function(err, dataModels) {\n     *          var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n     *          var pivotSpec = searches.createPivotSpecification();\n     *          // Use of the fluent API\n     *          pivotSpec.addRowSplit(\"user\", \"Executing user\")\n     *              .addRangeColumnSplit(\"exec_time\", {start: 0, end: 12, step: 5, limit: 4})\n     *              .addCellValue(\"search\", \"Search Query\", \"values\")\n     *              .pivot(function(pivotErr, pivot) {\n     *                  console.log(\"Pivot search is:\", pivot.search);\n     *              });\n     *      });\n     *\n     * @param {Function} callback A function to call when done getting the pivot: `(err, pivot)`.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    pivot: function (callback) {\n      var svc = this.dataModelObject.dataModel.service;\n      var args = {\n        pivot_json: JSON.stringify(this.toJsonObject())\n      };\n\n      if (!utils.isUndefined(this.accelerationNamespace)) {\n        args.namespace = this.accelerationNamespace;\n      }\n\n      return svc.get(Paths.pivot + \"/\" + encodeURIComponent(this.dataModelObject.dataModel.name), args, function (err, response) {\n        if (err) {\n          callback(new Error(err.data.messages[0].text), response);\n          return;\n        }\n\n        if (response.data.entry && response.data.entry[0]) {\n          callback(null, new root.Pivot(svc, response.data.entry[0].content));\n        } else {\n          callback(new Error(\"Didn't get a Pivot report back from Splunk\"), response);\n        }\n      });\n    },\n\n    /**\n     * Convenience method to wrap up the `PivotSpecification.pivot()` and\n     * `Pivot.run()` function calls.\n     *\n     * Query Splunk for SPL queries corresponding to a pivot report\n     * for this data model, defined by this `PivotSpecification`; then,\n     * starts a search job running this pivot, accelerated if possible.\n     *\n     *      service.dataModels().fetch(function(fetchErr, dataModels) {\n     *          var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n     *          var pivotSpec = searches.createPivotSpecification();\n     *          // Use of the fluent API\n     *          pivotSpec.addRowSplit(\"user\", \"Executing user\")\n     *              .addRangeColumnSplit(\"exec_time\", {start: 0, end: 12, step: 5, limit: 4})\n     *              .addCellValue(\"search\", \"Search Query\", \"values\")\n     *              .run(function(err, job, pivot) {\n     *                  console.log(\"Job SID is:\", job.sid);\n     *                  console.log(\"Pivot search is:\", pivot.search);\n     *              });\n     *      });\n     * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n     * @param {Function} callback A function to call when done getting the pivot: `(err, job, pivot)`.\n     *\n     * @method splunkjs.Service.PivotSpecification\n     */\n    run: function (args, callback) {\n      if (!callback) {\n        callback = args;\n        args = {};\n      }\n\n      args = args || {};\n      this.pivot(function (err, pivot) {\n        if (err) {\n          callback(err, null, null);\n        } else {\n          pivot.run(args, Async.augment(callback, pivot));\n        }\n      });\n    }\n  });\n  /**\n   * Represents one of the structured views in a `DataModel`.\n   *\n   * Has these properties:\n   *    - `dataModel` (_splunkjs.Service.DataModel_): The `DataModel` to which this `DataModelObject` belongs.\n   *    - `name` (_string_): The name of this `DataModelObject`.\n   *    - `displayName` (_string_): The human readable name of this `DataModelObject`.\n   *    - `parentName` (_string_): The name of the parent `DataModelObject` to this one.\n   *    - `lineage` (_array_): An array of strings of the lineage of the data model\n   *          on which this field is defined.\n   *    - `fields` (_object_): A dictionary of `DataModelField` objects, accessible by name.\n   *    - `constraints` (_array_): An array of `DataModelConstraint` objects.\n   *    - `calculations` (_object_): A dictionary of `DataModelCalculation` objects, accessible by ID.\n   *\n   * BaseSearch has an additional property:\n   *    - `baseSearch` (_string_): The search query wrapped by this data model object.\n   *\n   * BaseTransaction has additional properties:\n   *    - `groupByFields` (_string_): The fields that will be used to group events into transactions.\n   *    - `objectsToGroup` (_array_): Names of the data model objects that should be unioned\n   *        and split into transactions.\n   *    - `maxSpan` (_string_): The maximum time span of a transaction.\n   *    - `maxPause` (_string_): The maximum pause time of a transaction.\n   *\n   * @class splunkjs.Service.DataModelObject\n   */\n\n  root.DataModelObject = Class.extend({\n    /**\n     * Constructor for a data model object.\n     * SDK users are not expected to invoke this constructor directly.\n     *\n     * @constructor\n     * @param {Object} props A dictionary of properties to set:\n     *     - `objectName` (_string_): The name for this data model object.\n     *     - `displayName` (_string_): A human readable name for this data model object.\n     *     - `parentName` (_string_): The name of the data model that owns this data model object.\n     *     - `lineage` (_string_): The lineage of the data model that owns this data model object,\n     *          items are delimited by a dot. This is converted into an array of\n     *          strings upon construction.\n     *     - `fields` (_array_): An array of data model fields.\n     *     - `constraints` (_array_): An array of data model constraints.\n     *     - `calculations` (_array_): An array of data model calculations.\n     *     - `baseSearch` (_string_): The search query wrapped by this data model object; exclusive to BaseSearch (optional)\n     *     - `groupByFields` (_array_): The fields that will be used to group events into transactions; exclusive to BaseTransaction (optional)\n     *     - `objectsToGroup` (_array_): Names of the data model objects that should be unioned\n     *         and split into transactions; exclusive to BaseTransaction (optional)\n     *     - `maxSpan` (_string_): The maximum time span of a transaction; exclusive to BaseTransaction (optional)\n     *     - `maxPause` (_string_): The maximum pause time of a transaction; exclusive to BaseTransaction (optional)\n     *\n     * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    init: function (props, parentDataModel) {\n      props = props || {};\n      props.owner = props.owner || \"\";\n      this.dataModel = parentDataModel;\n      this.name = props.objectName;\n      this.displayName = props.displayName;\n      this.parentName = props.parentName;\n      this.lineage = props.lineage.split(\".\"); // Properties exclusive to BaseTransaction\n\n      if (props.hasOwnProperty(\"groupByFields\")) {\n        this.groupByFields = props.groupByFields;\n      }\n\n      if (props.hasOwnProperty(\"objectsToGroup\")) {\n        this.objectsToGroup = props.objectsToGroup;\n      }\n\n      if (props.hasOwnProperty(\"transactionMaxTimeSpan\")) {\n        this.maxSpan = props.transactionMaxTimeSpan;\n      }\n\n      if (props.hasOwnProperty(\"transactionMaxPause\")) {\n        this.maxPause = props.transactionMaxPause;\n      } // Property exclusive to BaseSearch\n\n\n      if (props.hasOwnProperty(\"baseSearch\")) {\n        this.baseSearch = props.baseSearch;\n      } // Parse fields\n\n\n      this.fields = {};\n\n      for (var i = 0; i < props.fields.length; i++) {\n        this.fields[props.fields[i].fieldName] = new root.DataModelField(props.fields[i]);\n      } // Parse constraints\n\n\n      this.constraints = [];\n\n      for (var j = 0; j < props.constraints.length; j++) {\n        this.constraints.push(new root.DataModelConstraint(props.constraints[j]));\n      } // Parse calculations\n\n\n      this.calculations = [];\n\n      for (var k = 0; k < props.calculations.length; k++) {\n        this.calculations[props.calculations[k].calculationID] = new root.DataModelCalculation(props.calculations[k]);\n      }\n    },\n\n    /**\n     * Is this data model object a BaseSearch?\n     *\n     * @return {Boolean} Whether this data model object is the root type, BaseSearch.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    isBaseSearch: function () {\n      return !utils.isUndefined(this.baseSearch);\n    },\n\n    /**\n     * Is this data model object is a BaseTransaction?\n     *\n     * @return {Boolean} Whether this data model object is the root type, BaseTransaction.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    isBaseTransaction: function () {\n      return !utils.isUndefined(this.maxSpan);\n    },\n\n    /**\n     * Returns a string array of the names of this data model object's fields.\n     *\n     * @return {Array} An array of strings with the field names of this \n     * data model object.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    fieldNames: function () {\n      return Object.keys(this.fields);\n    },\n\n    /**\n     * Returns a data model field instance, representing a field on this\n     * data model object. \n     *\n     * @return {splunkjs.Service.DataModelField|null} The data model field\n     * from this data model object with the specified name, null if it the \n     * field by that name doesn't exist.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    fieldByName: function (name) {\n      return this.calculatedFields()[name] || this.fields[name] || null;\n    },\n\n    /**\n     * Returns an array of data model fields from this data model object's\n     * calculations, and this data model object's fields.\n     *\n     * @return {Array} An array of `splunk.Service.DataModelField` objects\n     * which includes this data model object's fields, and the fields from\n     * this data model object's calculations.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    allFields: function () {\n      // merge fields and calculatedFields()\n      var combinedFields = [];\n\n      for (var f in this.fields) {\n        if (this.fields.hasOwnProperty(f)) {\n          combinedFields[f] = this.fields[f];\n        }\n      }\n\n      var calculatedFields = this.calculatedFields();\n\n      for (var cf in calculatedFields) {\n        if (calculatedFields.hasOwnProperty(cf)) {\n          combinedFields[cf] = calculatedFields[cf];\n        }\n      }\n\n      return combinedFields;\n    },\n\n    /**\n     * Returns a string array of the field names of this data model object's\n     * calculations, and the names of this data model object's fields.\n     *\n     * @return {Array} An array of strings with the field names of this \n     * data model object's calculations, and the names of fields on \n     * this data model object.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    allFieldNames: function () {\n      return Object.keys(this.allFields());\n    },\n\n    /**\n     * Returns an array of data model fields from this data model object's\n     * calculations.\n     *\n     * @return {Array} An array of `splunk.Service.DataModelField` objects\n     * of the fields from this data model object's calculations.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    calculatedFields: function () {\n      var fields = {}; // Iterate over the calculations, get their fields\n\n      var keys = this.calculationIDs();\n      var calculations = this.calculations;\n\n      for (var i = 0; i < keys.length; i++) {\n        var calculation = calculations[keys[i]];\n\n        for (var f = 0; f < calculation.outputFieldNames().length; f++) {\n          fields[calculation.outputFieldNames()[f]] = calculation.outputFields[calculation.outputFieldNames()[f]];\n        }\n      }\n\n      return fields;\n    },\n\n    /**\n     * Returns a string array of the field names of this data model object's\n     * calculations.\n     *\n     * @return {Array} An array of strings with the field names of this \n     * data model object's calculations.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    calculatedFieldNames: function () {\n      return Object.keys(this.calculatedFields());\n    },\n\n    /**\n     * Returns whether this data model object contains the field with the\n     * name passed in the `fieldName` parameter.\n     *\n     * @param {String} fieldName The name of the field to look for.\n     * @return {Boolean} True if this data model contains the field by name.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    hasField: function (fieldName) {\n      return utils.contains(this.allFieldNames(), fieldName);\n    },\n\n    /**\n     * Returns a string array of the IDs of this data model object's\n     * calculations.\n     *\n     * @return {Array} An array of strings with the IDs of this data model\n     * object's calculations.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    calculationIDs: function () {\n      return Object.keys(this.calculations);\n    },\n\n    /**\n     * Local acceleration is tsidx acceleration of a data model object that is handled\n     * manually by a user. You create a job which generates an index, and then use that\n     * index in your pivots on the data model object.\n     *\n     * The namespace created by the job is 'sid={sid}' where {sid} is the job's sid. You\n     * would use it in another job by starting your search query with `| tstats ... from sid={sid} | ...`\n     *\n     * The tsidx index created by this job is deleted when the job is garbage collected by Splunk.\n     *\n     * It is the user's responsibility to manage this job, including cancelling it.\n     *\n     * @example\n     *\n     *      service.dataModels().fetch(function(err, dataModels) {\n     *          var object = dataModels.item(\"some_data_model\").objectByName(\"some_object\");\n     *          object.createLocalAccelerationJob(\"-1d\", function(err, accelerationJob) {\n     *              console.log(\"The job has name:\", accelerationJob.name);\n     *          });\n     *      });\n     *\n     * @param {String} earliestTime A time modifier (e.g., \"-2w\") setting the earliest time to index.\n     * @param {Function} callback A function to call with the search job: `(err, accelerationJob)`.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    createLocalAccelerationJob: function (earliestTime, callback) {\n      // If earliestTime parameter is not specified, then set callback to its value\n      if (!callback && utils.isFunction(earliestTime)) {\n        callback = earliestTime;\n        earliestTime = undefined;\n      }\n\n      var query = \"| datamodel \\\"\" + this.dataModel.name + \"\\\" \" + this.name + \" search | tscollect\";\n      var args = earliestTime ? {\n        earliest_time: earliestTime\n      } : {};\n      this.dataModel.service.search(query, args, callback);\n    },\n\n    /**\n     * Start a search job that applies querySuffix to all the events in this data model object.\n     *\n     * @example\n     *\n     *      service.dataModels().fetch(function(err, dataModels) {\n     *          var object = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n     *          object.startSearch({}, \"| head 5\", function(err, job) {\n     *              console.log(\"The job has name:\", job.name);\n     *          });\n     *      });\n     *\n     * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n     *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n     * @param {String} querySuffix A search query, starting with a '|' that will be appended to the command to fetch the contents of this data model object (e.g., \"| head 3\").\n     * @param {Function} callback A function to call with the search job: `(err, job)`.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    startSearch: function (params, querySuffix, callback) {\n      var query = \"| datamodel \" + this.dataModel.name + \" \" + this.name + \" search\"; // Prepend a space to the querySuffix, or set it to an empty string if null or undefined\n\n      querySuffix = querySuffix ? \" \" + querySuffix : \"\";\n      this.dataModel.service.search(query + querySuffix, params, callback);\n    },\n\n    /**\n     * Returns the data model object this one inherits from if it is a user defined,\n     * otherwise return null.\n     *\n     * @return {splunkjs.Service.DataModelObject|null} This data model object's parent\n     *     or null if this is not a user defined data model object.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    parent: function () {\n      return this.dataModel.objectByName(this.parentName);\n    },\n\n    /**\n     * Returns a new Pivot Specification, accepts no parameters.\n     *\n     * @return {splunkjs.Service.PivotSpecification} A new pivot specification.\n     *\n     * @method splunkjs.Service.DataModelObject\n     */\n    createPivotSpecification: function () {\n      // Pass in this DataModelObject to create a PivotSpecification\n      return new root.PivotSpecification(this);\n    }\n  });\n  /**\n   * Represents a data model on the server. Data models\n   * contain `DataModelObject` instances, which specify structured\n   * views on Splunk data.\n   *\n   * @endpoint datamodel/model/{name}\n   * @class splunkjs.Service.DataModel\n   * @extends splunkjs.Service.Entity\n   */\n\n  root.DataModel = Service.Entity.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    path: function () {\n      return Paths.dataModels + \"/\" + encodeURIComponent(this.name);\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.DataModel`.\n     *\n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {String} name The name for the new data model.\n     * @param {Object} namespace (Optional) namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * @param {Object} props Properties of this data model:\n     *    - `acceleration` (_string_): A JSON object with an `enabled` key, representing if acceleration is enabled or not.\n     *    - `concise` (_string_): Indicates whether to list a concise JSON description of the data model, should always be \"0\".\n     *    - `description` (_string_): The JSON describing the data model.\n     *    - `displayName` (_string_): The name displayed for the data model in Splunk Web.\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    init: function (service, name, namespace, props) {\n      // If not given a 4th arg, assume the namespace was omitted\n      if (!props) {\n        props = namespace;\n        namespace = {};\n      }\n\n      this.name = name;\n\n      this._super(service, this.path(), namespace);\n\n      this.acceleration = JSON.parse(props.content.acceleration) || {};\n\n      if (this.acceleration.hasOwnProperty(\"enabled\")) {\n        // convert the enabled property to a boolean\n        this.acceleration.enabled = !!this.acceleration.enabled;\n      } // concise=0 (false) forces the server to return all details of the newly created data model.\n      // we do not want a summary of this data model\n\n\n      if (!props.hasOwnProperty(\"concise\") || utils.isUndefined(props.concise)) {\n        this.concise = \"0\";\n      }\n\n      var dataModelDefinition = JSON.parse(props.content.description);\n      this.objectNames = dataModelDefinition.objectNameList;\n      this.displayName = dataModelDefinition.displayName;\n      this.description = dataModelDefinition.description; // Parse the objects for this data model           \n\n      var objs = dataModelDefinition.objects;\n      this.objects = [];\n\n      for (var i = 0; i < objs.length; i++) {\n        this.objects.push(new root.DataModelObject(objs[i], this));\n      }\n\n      this.remove = utils.bind(this, this.remove);\n      this.update = utils.bind(this, this.update);\n    },\n\n    /**\n     * Returns a boolean indicating whether acceleration is enabled or not.\n     *\n     * @return {Boolean} true if acceleration is enabled, false otherwise.\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    isAccelerated: function () {\n      return !!this.acceleration.enabled;\n    },\n\n    /**\n     * Returns a data model object from this data model\n     * with the specified name if it exists, null otherwise.\n     *\n     * @return {Object|null} a data model object.\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    objectByName: function (name) {\n      for (var i = 0; i < this.objects.length; i++) {\n        if (this.objects[i].name === name) {\n          return this.objects[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns a boolean of whether this exists in this data model or not.\n     *\n     * @return {Boolean} Returns true if this data model has object with specified name, false otherwise.\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    hasObject: function (name) {\n      return utils.contains(this.objectNames, name);\n    },\n\n    /**\n     * Updates the data model on the server, used to update acceleration settings.\n     *\n     * @param {Object} props A dictionary of properties to update the object with:\n     *     - `acceleration` (_object_): The acceleration settings for the data model.\n     *         Valid keys are: `enabled`, `earliestTime`, `cronSchedule`.\n     *         Any keys not set will be pulled from the acceleration settings already\n     *         set on this data model.\n     * @param {Function} callback A function to call when the data model is updated: `(err, dataModel)`.\n     *\n     * @method splunkjs.Service.DataModel\n     */\n    update: function (props, callback) {\n      if (utils.isUndefined(callback)) {\n        callback = props;\n        props = {};\n      }\n\n      callback = callback || function () {};\n\n      if (!props) {\n        callback(new Error(\"Must specify a props argument to update a data model.\"));\n        return; // Exit if props isn't set, to avoid calling the callback twice.\n      }\n\n      if (props.hasOwnProperty(\"name\")) {\n        callback(new Error(\"Cannot set 'name' field in 'update'\"), this);\n        return; // Exit if the name is set, to avoid calling the callback twice.\n      }\n\n      var updatedProps = {\n        acceleration: JSON.stringify({\n          enabled: props.accceleration && props.acceleration.enabled || this.acceleration.enabled,\n          earliest_time: props.accceleration && props.acceleration.earliestTime || this.acceleration.earliestTime,\n          cron_schedule: props.accceleration && props.acceleration.cronSchedule || this.acceleration.cronSchedule\n        })\n      };\n      var that = this;\n      return this.post(\"\", updatedProps, function (err, response) {\n        if (err) {\n          callback(err, that);\n        } else {\n          var dataModelNamespace = utils.namespaceFromProperties(response.data.entry[0]);\n          callback(null, new root.DataModel(that.service, response.data.entry[0].name, dataModelNamespace, response.data.entry[0]));\n        }\n      });\n    }\n  });\n  /**\n   * Represents a collection of data models. You can create and\n   * list data models using this collection container, or\n   * get a specific data model.\n   *\n   * @endpoint datamodel/model\n   * @class splunkjs.Service.DataModels\n   * @extends splunkjs.Service.Collection\n   */\n\n  root.DataModels = Service.Collection.extend({\n    /**\n     * Retrieves the REST endpoint path for this resource (with no namespace).\n     *\n     * @method splunkjs.Service.DataModels\n     */\n    path: function () {\n      return Paths.dataModels;\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.DataModels`.\n     * \n     * @constructor\n     * @param {splunkjs.Service} service A `Service` instance.\n     * @param {Object} namespace (Optional) namespace information:\n     *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n     *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n     *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n     * \n     * @method splunkjs.Service.DataModels\n     */\n    init: function (service, namespace) {\n      namespace = namespace || {};\n\n      this._super(service, this.path(), namespace);\n\n      this.create = utils.bind(this, this.create);\n    },\n\n    /**\n     * Creates a new `DataModel` object with the given name and parameters.\n     * It is preferred that you create data models through the Splunk\n     * Enterprise with a browser.\n     *\n     * @param {String} name The name of the data model to create. If it contains spaces they will be replaced\n     *     with underscores.\n     * @param {Object} params A dictionary of properties.\n     * @param {Function} callback A function to call with the new `DataModel` object: `(err, createdDataModel)`.\n     *\n     * @method splunkjs.Service.DataModels\n     */\n    create: function (name, params, callback) {\n      // If we get (name, callback) instead of (name, params, callback)\n      // do the necessary variable swap\n      if (utils.isFunction(params) && !callback) {\n        callback = params;\n        params = {};\n      }\n\n      params = params || {};\n\n      callback = callback || function () {};\n\n      name = name.replace(/ /g, \"_\");\n      var that = this;\n      return this.post(\"\", {\n        name: name,\n        description: JSON.stringify(params)\n      }, function (err, response) {\n        if (err) {\n          callback(err);\n        } else {\n          var dataModel = new root.DataModel(that.service, response.data.entry[0].name, that.namespace, response.data.entry[0]);\n          callback(null, dataModel);\n        }\n      });\n    },\n\n    /**\n     * Constructor for `splunkjs.Service.DataModel`.\n     *\n     * @constructor\n     * @param {Object} props A dictionary of properties used to create a \n     * `DataModel` instance.\n     * @return {splunkjs.Service.DataModel} A new `DataModel` instance.\n     *\n     * @method splunkjs.Service.DataModels\n     */\n    instantiateEntity: function (props) {\n      var entityNamespace = utils.namespaceFromProperties(props);\n      return new root.DataModel(this.service, props.name, entityNamespace, props);\n    }\n  });\n  /*!*/\n  // Iterates over an endpoint's results.\n\n  root.PaginatedEndpointIterator = Class.extend({\n    init: function (endpoint, params) {\n      params = params || {};\n      this._endpoint = endpoint;\n      this._pagesize = params.pagesize || 0;\n      this._offset = 0;\n    },\n    // Fetches the next page from the endpoint.\n    next: function (callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var params = {\n        count: this._pagesize,\n        offset: this._offset\n      };\n      return this._endpoint(params, function (err, results) {\n        if (err) {\n          callback(err);\n        } else {\n          var numResults = results.rows ? results.rows.length : 0;\n          that._offset += numResults;\n          callback(null, results, numResults > 0);\n        }\n      });\n    }\n  });\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/service.js"],"names":["Context","require","Http","Async","Paths","Class","utils","root","exports","Service","BaseService","extend","init","_super","apply","arguments","module","specialize","bind","apps","configurations","indexes","savedSearches","jobs","users","currentUser","views","firedAlertGroups","dataModels","owner","app","http","scheme","host","port","username","password","sessionKey","version","Applications","namespace","Configurations","Indexes","SavedSearches","storagePasswords","StoragePasswords","FiredAlertGroupCollection","Jobs","DataModels","Users","Views","search","query","params","callback","isFunction","getJob","sid","job","Job","fetch","oneshotSearch","that","req","get","err","response","data","entry","content","user","User","wasAborted","serverInfo","ServerInfo","parse","q","parser","typeahead","prefix","count","results","log","event","isObject","JSON","stringify","path","paths","submitEvent","method","headers","body","post","request","Endpoint","service","qualifiedPath","Error","del","relpath","url","Resource","fullpath","_properties","_state","_load","properties","state","Entity","fetchOnUpdate","remove","update","fields","links","acl","author","updated","published","enable","disable","reload","_fields","_acl","_links","isArray","_author","_updated","_published","options","props","hasOwnProperty","Collection","fetchOnEntityCreation","create","list","item","instantiateEntity","_entities","_entitiesByName","_paging","entities","entitiesByName","entityPropertyList","i","length","entity","push","name","paging","id","isEmpty","fullPath","clone","SavedSearch","encodeURIComponent","acknowledge","dispatch","history","suppressInfo","alertCount","parseInt","triggered_alert_count","firedAlertGroup","FiredAlertGroup","jobData","namespaceFromProperties","call","entityNamespace","StoragePassword","FiredAlert","firedAlerts","actions","alertType","alert_type","isDigestMode","digest_mode","expirationTime","expiration_time_rendered","savedSearchName","savedsearch_name","severity","triggerTime","trigger_time","triggerTimeRendered","trigger_time_rendered","triggeredAlertCount","triggered_alerts","firedAlertData","firedAlert","Application","setupInfo","updateInfo","info","View","Index","result","versionCompare","ConfigurationStanza","file","ConfigurationFile","getDefaultStanza","stanzaName","values","filename","__conf","cancel","disablePreview","enablePreview","events","finalize","pause","preview","searchlog","setPriority","setTTL","summary","timeline","touch","unpause","action","output_mode","iterator","type","PaginatedEndpointIterator","value","priority","ttl","track","callbacks","period","done","noCallbacksAfterReady","progress","failed","error","ready","_preready","_stoppedAfterReady","emittedReady","doneLooping","whilst","nextIteration","dispatchState","notReady","isDone","isFailed","sleep","exec_mode","toLowerCase","outputMode","DataModelField","_types","fieldName","displayName","multivalued","multivalue","required","hidden","editable","comment","fieldSearch","lineage","split","isString","isNumber","isTimestamp","isObjectcount","isChildcount","isIPv4","isBoolean","DataModelConstraint","DataModelCalculation","calculationID","calculationType","outputFields","expression","inputField","lookupName","inputFieldMappings","lookupInputs","outputFieldNames","Object","keys","isEditable","isLookup","isEval","isRex","isGeoIP","Pivot","drilldownSearch","drilldown_search","prettyQuery","openInSearch","open_in_search","pivotSearch","pivot_search","tstatsSearch","tstats_search","run","args","isUndefined","PivotSpecification","_comparisons","boolean","string","number","ipv4","_binning","_sortDirection","_statsFunctions","dataModelObject","columns","rows","filters","cells","accelerationNamespace","dataModel","isAccelerated","pivot","setAccelerationJob","addFilter","comparisonType","comparisonOp","compareTo","hasField","fieldByName","contains","ret","join","rule","comparator","addLimitFilter","sortAttribute","sortDirection","limit","statsFunction","f","filter","attributeName","attributeOwner","limitAmount","statsFn","limitType","addRowSplit","label","row","display","addRangeRowSplit","field","ranges","updateRanges","start","end","step","size","maxNumberOf","addBooleanRowSplit","trueDisplayValue","falseDisplayValue","trueLabel","falseLabel","addTimestampRowSplit","binning","addColumnSplit","col","addRangeColumnSplit","updatedRanges","addBooleanColumnSplit","addTimestampColumnSplit","addCellValue","sparkline","toJsonObject","baseClass","svc","pivot_json","messages","text","augment","DataModelObject","parentDataModel","objectName","parentName","groupByFields","objectsToGroup","maxSpan","transactionMaxTimeSpan","maxPause","transactionMaxPause","baseSearch","constraints","j","calculations","k","isBaseSearch","isBaseTransaction","fieldNames","calculatedFields","allFields","combinedFields","cf","allFieldNames","calculationIDs","calculation","calculatedFieldNames","createLocalAccelerationJob","earliestTime","undefined","earliest_time","startSearch","querySuffix","parent","objectByName","createPivotSpecification","DataModel","acceleration","enabled","concise","dataModelDefinition","description","objectNames","objectNameList","objs","objects","hasObject","updatedProps","accceleration","cron_schedule","cronSchedule","dataModelNamespace","replace","endpoint","_endpoint","_pagesize","pagesize","_offset","next","offset","numResults"],"mappings":"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,CAACgC,YAAT,CAAsB,IAAtB,CAAP;AACH,KAtFgD;;AAwFjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQnB,IAAAA,cAAc,EAAE,UAASoB,SAAT,EAAoB;AAChC,aAAO,IAAIjC,IAAI,CAACkC,cAAT,CAAwB,IAAxB,EAA8BD,SAA9B,CAAP;AACH,KAlHgD;;AAoHjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQnB,IAAAA,OAAO,EAAE,UAASmB,SAAT,EAAoB;AACzB,aAAO,IAAIjC,IAAI,CAACmC,OAAT,CAAiB,IAAjB,EAAuBF,SAAvB,CAAP;AACH,KA9IgD;;AAgJjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQlB,IAAAA,aAAa,EAAE,UAASkB,SAAT,EAAoB;AAC/B,aAAO,IAAIjC,IAAI,CAACoC,aAAT,CAAuB,IAAvB,EAA6BH,SAA7B,CAAP;AACH,KAxKgD;;AA0KjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,gBAAgB,EAAE,UAASJ,SAAT,EAAoB;AAClC,aAAO,IAAIjC,IAAI,CAACsC,gBAAT,CAA0B,IAA1B,EAAgCL,SAAhC,CAAP;AACH,KAlMgD;;AAoMjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQb,IAAAA,gBAAgB,EAAE,UAASa,SAAT,EAAoB;AAClC,aAAO,IAAIjC,IAAI,CAACuC,yBAAT,CAAmC,IAAnC,EAAyCN,SAAzC,CAAP;AACH,KA7NgD;;AA+NjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQjB,IAAAA,IAAI,EAAE,UAASiB,SAAT,EAAoB;AACtB,aAAO,IAAIjC,IAAI,CAACwC,IAAT,CAAc,IAAd,EAAoBP,SAApB,CAAP;AACH,KA1PgD;;AA4PjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQZ,IAAAA,UAAU,EAAE,UAASY,SAAT,EAAoB;AAC5B,aAAO,IAAIjC,IAAI,CAACyC,UAAT,CAAoB,IAApB,EAA0BR,SAA1B,CAAP;AACH,KAtQgD;;AAwQjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQhB,IAAAA,KAAK,EAAE,YAAW;AACd,aAAO,IAAIjB,IAAI,CAAC0C,KAAT,CAAe,IAAf,CAAP;AACH,KA/RgD;;AAiSjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQvB,IAAAA,KAAK,EAAE,UAASc,SAAT,EAAoB;AACvB,aAAO,IAAIjC,IAAI,CAAC2C,KAAT,CAAe,IAAf,EAAqBV,SAArB,CAAP;AACH,KA5TgD;;AA8TjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQW,IAAAA,MAAM,EAAE,UAASC,KAAT,EAAgBC,MAAhB,EAAwBb,SAAxB,EAAmCc,QAAnC,EAA6C;AACjD,UAAI,CAACA,QAAD,IAAahD,KAAK,CAACiD,UAAN,CAAiBf,SAAjB,CAAjB,EAA8C;AAC1Cc,QAAAA,QAAQ,GAAGd,SAAX;AACAA,QAAAA,SAAS,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","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    \"use strict\";\n    \n    var Context     = require('./context');\n    var Http        = require('./http');\n    var Async       = require('./async');\n    var Paths       = require('./paths').Paths;\n    var Class       = require('./jquery.class').Class;\n    var utils       = require('./utils');\n    \n    var root = exports || this;\n    var Service = null;\n    \n    /**\n     * Contains functionality common to Splunk Enterprise and Splunk Storm.\n     * \n     * This class is an implementation detail and is therefore SDK-private.\n     * \n     * @class splunkjs.private.BaseService\n     * @extends splunkjs.Context\n     */\n    var BaseService = Context.extend({\n        init: function() {\n            this._super.apply(this, arguments);\n        }\n    });\n\n    /**\n     * Provides a root access point to Splunk functionality with typed access to \n     * Splunk resources such as searches, indexes, inputs, and more. Provides\n     * methods to authenticate and create specialized instances of the service.\n     *\n     * @class splunkjs.Service\n     * @extends splunkjs.private.BaseService\n     */\n    module.exports = root = Service = BaseService.extend({\n        /**\n         * Constructor for `splunkjs.Service`.\n         *\n         * @constructor\n         * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.\n         * @param {Object} params A dictionary of optional parameters: \n         *    - `scheme` (_string_): The scheme (\"http\" or \"https\") for accessing Splunk.\n         *    - `host` (_string_): The host name (the default is \"localhost\").\n         *    - `port` (_integer_): The port number (the default is 8089).\n         *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.\n         *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.\n         *    - `owner` (_string_): The owner (username) component of the namespace.\n         *    - `app` (_string_): The app component of the namespace.\n         *    - `sessionKey` (_string_): The current session token.\n         *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).\n         *    - `version` (_string_): The version string for Splunk, for example \"4.3.2\" (the default is \"5.0\").\n         * @return {splunkjs.Service} A new `splunkjs.Service` instance.\n         *\n         * @method splunkjs.Service\n         */\n        init: function() {\n            this._super.apply(this, arguments);\n\n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this.specialize         = utils.bind(this, this.specialize);\n            this.apps               = utils.bind(this, this.apps);\n            this.configurations     = utils.bind(this, this.configurations);\n            this.indexes            = utils.bind(this, this.indexes);\n            this.savedSearches      = utils.bind(this, this.savedSearches);\n            this.jobs               = utils.bind(this, this.jobs);\n            this.users              = utils.bind(this, this.users);\n            this.currentUser        = utils.bind(this, this.currentUser);\n            this.views              = utils.bind(this, this.views);\n            this.firedAlertGroups   = utils.bind(this, this.firedAlertGroups);\n            this.dataModels         = utils.bind(this, this.dataModels);\n        },\n        \n        /**\n         * Creates a specialized version of the current `Service` instance for\n         * a specific namespace context. \n         *\n         * @example\n         *\n         *      var svc = ...;\n         *      var newService = svc.specialize(\"myuser\", \"unix\");\n         *\n         * @param {String} owner The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         * @param {String} app The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         * @return {splunkjs.Service} The specialized `Service` instance.\n         *\n         * @method splunkjs.Service\n         */\n        specialize: function(owner, app) {\n            return new Service(this.http, {\n                scheme: this.scheme,\n                host: this.host,   \n                port: this.port,       \n                username: this.username,\n                password: this.password,\n                owner: owner,\n                app: app, \n                sessionKey: this.sessionKey,\n                version: this.version\n            });\n        },\n        \n        /**\n         * Gets the `Applications` collection, which allows you to \n         * list installed apps and retrieve information about them.\n         *\n         * @example\n         *\n         *      // List installed apps\n         *      var apps = svc.apps();\n         *      apps.fetch(function(err) { console.log(apps.list()); });\n         *\n         * @return {splunkjs.Service.Collection} The `Applications` collection.\n         *\n         * @endpoint apps/local\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Applications\n         */\n        apps: function() {\n            return new root.Applications(this);\n        },\n        \n        /**\n         * Gets the `Configurations` collection, which lets you \n         * create, list, and retrieve configuration (.conf) files.\n         *\n         * @example\n         *\n         *      // List all properties in the 'props.conf' file\n         *      var files = svc.configurations();\n         *      files.item(\"props\", function(err, propsFile) {\n         *          propsFile.fetch(function(err, props) {\n         *              console.log(props.properties()); \n         *          });\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Configurations} The `Configurations` collection.\n         *\n         * @endpoint configs\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Configurations\n         */\n        configurations: function(namespace) {\n            return new root.Configurations(this, namespace);\n        },\n        \n        /**\n         * Gets the `Indexes` collection, which lets you create, \n         * list, and update indexes. \n         *\n         * @example\n         *\n         *      // Check if we have an _internal index\n         *      var indexes = svc.indexes();\n         *      indexes.fetch(function(err, indexes) {\n         *          var index = indexes.item(\"_internal\");\n         *          console.log(\"Was index found: \" + !!index);\n         *          // `index` is an Index object.\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Indexes} The `Indexes` collection.\n         *\n         * @endpoint data/indexes\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Indexes\n         */        \n        indexes: function(namespace) { \n            return new root.Indexes(this, namespace);\n        },\n        \n        /**\n         * Gets the `SavedSearches` collection, which lets you\n         * create, list, and update saved searches. \n         *\n         * @example\n         *\n         *      // List all # of saved searches\n         *      var savedSearches = svc.savedSearches();\n         *      savedSearches.fetch(function(err, savedSearches) {\n         *          console.log(\"# Of Saved Searches: \" + savedSearches.list().length);\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.SavedSearches} The `SavedSearches` collection.\n         *\n         * @endpoint saved/searches\n         * @method splunkjs.Service\n         * @see splunkjs.Service.SavedSearches\n         */\n        savedSearches: function(namespace) {\n            return new root.SavedSearches(this, namespace);\n        },\n        \n        /**\n         * Gets the `StoragePasswords` collection, which lets you\n         * create, list, and update storage passwords. \n         *\n         * @example\n         *\n         *      // List all # of storage passwords\n         *      var storagePasswords = svc.storagePasswords();\n         *      storagePasswords.fetch(function(err, storagePasswords) {\n         *          console.log(\"# of Storage Passwords: \" + storagePasswords.list().length);\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.StoragePasswords} The `StoragePasswords` collection.\n         *\n         * @endpoint storage/passwords\n         * @method splunkjs.Service\n         * @see splunkjs.Service.StoragePasswords\n         */\n        storagePasswords: function(namespace) {\n            return new root.StoragePasswords(this, namespace);\n        },\n\n        /**\n         * Gets the `FiredAlertGroupCollection` collection, which lets you\n         * list alert groups.\n         * \n         * @example\n         *      \n         *      // List all # of fired alert groups\n         *      var firedAlertGroups = svc.firedAlertGroups();\n         *      firedAlertGroups.fetch(function(err, firedAlertGroups) {\n         *          console.log(\"# of alert groups: \" + firedAlertGroups.list().length);\n         *      });\n         *\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.FiredAlertGroupCollection} The `FiredAlertGroupCollection` collection.\n         *\n         * @endpoint saved/searches\n         * @method splunkjs.Service\n         * @see splunkjs.Service.FiredAlertGroupCollection\n         */\n        firedAlertGroups: function(namespace) {\n            return new root.FiredAlertGroupCollection(this, namespace);\n        },\n\n        /**\n         * Gets the `Jobs` collection, which lets you create, list,\n         * and retrieve search jobs. \n         *\n         * @example\n         *\n         *      // List all job IDs\n         *      var jobs = svc.jobs();\n         *      jobs.fetch(function(err, jobs) {\n         *          var list = jobs.list();\n         *          for(var i = 0; i < list.length; i++) {\n         *              console.log(\"Job \" + (i+1) + \": \" + list[i].sid);\n         *          }\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Jobs} The `Jobs` collection.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Jobs\n         */\n        jobs: function(namespace) {\n            return new root.Jobs(this, namespace);  \n        },\n        \n        /**\n         * Gets the `DataModels` collection, which lets you create, list,\n         * and retrieve data models.\n         *\n         * @endpoint datamodel/model\n         * @method splunkjs.Service\n         * @see splunkjs.Service.DataModels\n         */\n        dataModels: function(namespace) {\n            return new root.DataModels(this, namespace);\n        },\n\n        /**\n         * Gets the `Users` collection, which lets you create, \n         * list, and retrieve users. \n         *\n         * @example\n         *\n         *      // List all usernames\n         *      var users = svc.users();\n         *      users.fetch(function(err, users) {\n         *          var list = users.list();\n         *          for(var i = 0; i < list.length; i++) {\n         *              console.log(\"User \" + (i+1) + \": \" + list[i].properties().name);\n         *          }\n         *      });\n         *\n         * @return {splunkjs.Service.Users} The `Users` collection.\n         *\n         * @endpoint authorization/users\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Users\n         */\n        users: function() {\n            return new root.Users(this);  \n        },\n        \n        /**\n         * Gets the `Views` collection, which lets you create,\n         * list, and retrieve views (custom UIs built in Splunk's app framework). \n         *\n         * @example\n         *\n         *      // List all views\n         *      var views = svc.views();\n         *      views.fetch(function(err, views) {\n         *          var list = views.list();\n         *          for(var i = 0; i < list.length; i++) {\n         *              console.log(\"View \" + (i+1) + \": \" + list[i].properties().name);\n         *          }\n         *      });\n         *\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Views} The `Views` collection.\n         *\n         * @endpoint data/ui/views\n         * @method splunkjs.Service\n         * @see splunkjs.Service.Views\n         */\n        views: function(namespace) {\n            return new root.Views(this, namespace);  \n        },\n        \n        /**\n         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n         *\n         *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n         *      Poll for completion to find out when you can retrieve search results. \n         *\n         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n         * \n         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.oneshotSearch`.\n         *\n         * @example\n         *\n         *      service.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\n         *          console.log(\"CREATED\": newJob.sid);\n         *      });\n         *\n         * @param {String} query The search query.\n         * @param {Object} params A dictionary of properties for the job. For a list of available parameters, see <a href=\" http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service\n         */\n        search: function(query, params, namespace, callback) {\n            if (!callback && utils.isFunction(namespace)) {\n                callback = namespace;\n                namespace = null;\n            }\n            \n            var jobs = new root.Jobs(this, namespace);\n            return jobs.search(query, params, callback);\n        },\n\n        /**\n         * A convenience method to get a `Job` by its sid.\n         *\n         * @param {String} sid The search ID for a search job.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @param {Function} callback A function to call with the created job: `(err, job)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service\n         */\n        getJob: function(sid, namespace, callback) {\n            if (!callback && utils.isFunction(namespace)) {\n                callback = namespace;\n                namespace = null;\n            }\n            var job = new root.Job(this, sid, namespace);\n            return job.fetch({}, callback);\n        },\n        \n        /**\n         * Creates a oneshot search from a given search query and optional parameters.\n         *\n         * @example\n         *\n         *      service.oneshotSearch(\"search ERROR\", {id: \"myjob_123\"}, function(err, results) {\n         *          console.log(\"RESULT FIELDS\": results.fields);\n         *      });\n         *\n         * @param {String} query The search query.\n         * @param {Object} params A dictionary of properties for the search:\n         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).\n         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n         *    - `rf` (_string_): Specifies one or more fields to add to the search.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @param {Function} callback A function to call with the results of the search: `(err, results)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service\n         */\n        oneshotSearch: function(query, params, namespace, callback) {\n            if (!callback && utils.isFunction(namespace)) {\n                callback = namespace;\n                namespace = null;\n            }\n            \n            var jobs = new root.Jobs(this, namespace);\n            return jobs.oneshotSearch(query, params, callback);\n        },\n        \n        /**\n         * Gets the user that is currently logged in.\n         *\n         * @example\n         *\n         *      service.currentUser(function(err, user) {\n         *          console.log(\"Real name: \", user.properties().realname);\n         *      });\n         *\n         * @param {Function} callback A function to call with the user instance: `(err, user)`.\n         * @return {splunkjs.Service.currentUser} The `User`.\n         *\n         * @endpoint authorization/current-context\n         * @method splunkjs.Service\n         */\n        currentUser: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.get(Paths.currentUser, {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                } \n                else {\n                    var username = response.data.entry[0].content.username;\n                    var user = new root.User(that, username);\n                    user.fetch(function() {\n                        if (req.wasAborted) {\n                            return; // aborted, so ignore\n                        }\n                        else {\n                            callback.apply(null, arguments);\n                        }\n                    });\n                }\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Gets configuration information about the server.\n         *\n         * @example\n         *\n         *      service.serverInfo(function(err, info) {\n         *          console.log(\"Splunk Version: \", info.properties().version);\n         *      });\n         *\n         * @param {Function} callback A function to call with the server info: `(err, info)`.\n         *\n         * @endpoint server/info\n         * @method splunkjs.Service\n         */\n        serverInfo: function(callback) {\n            callback = callback || function() {};\n            \n            var serverInfo = new root.ServerInfo(this);\n            return serverInfo.fetch(callback);\n        },\n        \n        /**\n         * Parses a search query.\n         *\n         * @example\n         *\n         *      service.parse(\"search index=_internal | head 1\", function(err, parse) {\n         *          console.log(\"Commands: \", parse.commands);\n         *      });\n         *\n         * @param {String} query The search query to parse.\n         * @param {Object} params An object of options for the parser:\n         *    - `enable_lookups` (_boolean_): If `true`, performs reverse lookups to expand the search expression.\n         *    - `output_mode` (_string_): The output format (XML or JSON).\n         *    - `parse_only` (_boolean_): If `true`, disables the expansion of search due to evaluation of subsearches, time term expansion, lookups, tags, eventtypes, and sourcetype alias.\n         *    - `reload_macros` (_boolean_): If `true`, reloads macro definitions from macros.conf.\n         * @param {Function} callback A function to call with the parse info: `(err, parse)`.\n         *\n         * @endpoint search/parser\n         * @method splunkjs.Service\n         */\n        parse: function(query, params, callback) {\n            if (!callback && utils.isFunction(params)) {\n                callback = params;\n                params = {};\n            }\n            \n            callback = callback || function() {};\n            params = params || {};\n            \n            params.q = query;\n            \n            return this.get(Paths.parser, params, function(err, response) {\n                if (err) {\n                    callback(err);\n                } \n                else {                    \n                    callback(null, response.data);\n                }\n            });\n        },\n        \n        /**\n         * Provides auto-complete suggestions for search queries.\n         *\n         * @example\n         *\n         *      service.typeahead(\"index=\", 10, function(err, options) {\n         *          console.log(\"Autocompletion options: \", options);\n         *      });\n         *\n         * @param {String} prefix The query fragment to autocomplete.\n         * @param {Number} count The number of options to return (optional).\n         * @param {Function} callback A function to call with the autocompletion info: `(err, options)`.\n         *\n         * @endpoint search/typeahead\n         * @method splunkjs.Service\n         */\n        typeahead: function(prefix, count, callback) {\n            if (!callback && utils.isFunction(count)) {\n                callback = count;\n                count = 10;\n            }\n            \n            callback = callback || function() {};\n            var params = {\n                count: count || 10,\n                prefix: prefix\n            };\n            \n            return this.get(Paths.typeahead, params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    var results = (response.data || {}).results;\n                    callback(null, results || []);\n                }\n            });\n        },\n        \n        /**\n         * Logs an event to Splunk.\n         *\n         * @example\n         *\n         *      service.log(\"A new event\", {index: \"_internal\", sourcetype: \"mysourcetype\"}, function(err, result) {\n         *          console.log(\"Submitted event: \", result);\n         *      });\n         *\n         * @param {String|Object} event The text for this event, or a JSON object.\n         * @param {Object} params A dictionary of parameters for indexing: \n         *    - `index` (_string_): The index to send events from this input to.\n         *    - `host` (_string_): The value to populate in the Host field for events from this data input. \n         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. \n         *    - `source` (_string_): The value to populate in the Source field for events from this data input.\n         *    - `sourcetype` (_string_): The value to populate in the Sourcetype field for events from this data input.\n         * @param {Function} callback A function to call when the event is submitted: `(err, result)`.\n         *\n         * @endpoint receivers/simple\n         * @method splunkjs.Service\n         */\n        log: function(event, params, callback) {\n            if (!callback && utils.isFunction(params)) {\n                callback = params;\n                params = {};\n            }\n            \n            callback = callback || function() {};\n            params = params || {};\n            \n            // If the event is a JSON object, convert it to a string.\n            if (utils.isObject(event)) {\n                event = JSON.stringify(event);\n            }\n            \n            var path = this.paths.submitEvent;\n            var method = \"POST\";\n            var headers = {\"Content-Type\": \"text/plain\"};\n            var body = event;\n            var get = params;\n            var post = {};\n            \n            var req = this.request(\n                path, \n                method, \n                get, \n                post, \n                body, \n                headers, \n                function(err, response) {\n                    if (err) {\n                        callback(err);\n                    } \n                    else {\n                        callback(null, response.data);\n                    }\n                }\n            );\n            \n            return req;\n        }\n    });\n\n    /**\n     * Provides a base definition for a Splunk endpoint, which is a combination of\n     * a specific service and path. Provides convenience methods for GET, POST, and\n     * DELETE operations used in splunkjs, automatically preparing the path correctly\n     * and allowing for relative calls.\n     *\n     * @class splunkjs.Service.Endpoint\n     */\n    root.Endpoint = Class.extend({\n        /**\n         * Constructor for `splunkjs.Service.Endpoint`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} qualifiedPath A fully-qualified relative endpoint path (for example, \"/services/search/jobs\").\n         * @return {splunkjs.Service.Endpoint} A new `splunkjs.Service.Endpoint` instance.\n         *\n         * @method splunkjs.Service.Endpoint\n         */\n        init: function(service, qualifiedPath) {\n            if (!service) {\n                throw new Error(\"Passed in a null Service.\");\n            }\n\n            if (!qualifiedPath) {\n                throw new Error(\"Passed in an empty path.\");\n            }\n\n            this.service = service;\n            this.qualifiedPath = qualifiedPath;\n\n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this.get    = utils.bind(this, this.get);\n            this.post   = utils.bind(this, this.post);\n            this.del    = utils.bind(this, this.del);\n        },\n\n        /**\n         * Performs a relative GET request on an endpoint's path,\n         * combined with the parameters and a relative path if specified.\n         *\n         * @example\n         *\n         *      // Will make a request to {service.prefix}/search/jobs/123456/results?offset=1\n         *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n         *      endpoint.get(\"results\", {offset: 1}, function() { console.log(\"DONE\"))});\n         *\n         * @param {String} relpath A relative path to append to the endpoint path.\n         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.\n         * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Service.Endpoint\n         */\n        get: function(relpath, params, callback) {\n            var url = this.qualifiedPath;\n\n            // If we have a relative path, we will append it with a preceding\n            // slash.\n            if (relpath) {\n                url = url + \"/\" + relpath;    \n            }\n\n            return this.service.get(\n                url,\n                params,\n                callback\n            );\n        },\n\n        /**\n         * Performs a relative POST request on an endpoint's path,\n         * combined with the parameters and a relative path if specified.\n         *\n         * @example\n         *\n         *      // Will make a request to {service.prefix}/search/jobs/123456/control\n         *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n         *      endpoint.post(\"control\", {action: \"cancel\"}, function() { console.log(\"CANCELLED\"))});\n         *\n         * @param {String} relpath A relative path to append to the endpoint path.\n         * @param {Object} params A dictionary of entity-specific parameters to add to the body.\n         * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Service.Endpoint\n         */\n        post: function(relpath, params, callback) {\n            var url = this.qualifiedPath;\n\n            // If we have a relative path, we will append it with a preceding\n            // slash.\n            if (relpath) {\n                url = url + \"/\" + relpath;    \n            }\n\n            return this.service.post(\n                url,\n                params,\n                callback\n            );\n        },\n\n        /**\n         * Performs a relative DELETE request on an endpoint's path,\n         * combined with the parameters and a relative path if specified.\n         *\n         * @example\n         *\n         *      // Will make a request to {service.prefix}/search/jobs/123456\n         *      var endpoint = new splunkjs.Service.Endpoint(service, \"search/jobs/12345\");\n         *      endpoint.delete(\"\", {}, function() { console.log(\"DELETED\"))});\n         *\n         * @param {String} relpath A relative path to append to the endpoint path.\n         * @param {Object} params A dictionary of entity-specific parameters to add to the query string.\n         * @param {Function} callback A function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Service.Endpoint\n         */\n        del: function(relpath, params, callback) {\n            var url = this.qualifiedPath;\n\n            // If we have a relative path, we will append it with a preceding\n            // slash.\n            if (relpath) {\n                url = url + \"/\" + relpath;    \n            }\n\n            return this.service.del(\n                url,\n                params,\n                callback\n            );\n        }\n    });\n    \n    /**\n     * Provides a base definition for a Splunk resource (for example, an entity \n     * such as an index or search job, or a collection of entities). Provides \n     * basic methods for handling Splunk resources, such as validation and \n     * accessing properties. \n     *\n     * This class should not be used directly because most methods are meant to be overridden.\n     *\n     * @class splunkjs.Service.Resource\n     * @extends splunkjs.Service.Endpoint\n     */\n    root.Resource = root.Endpoint.extend({\n        /**\n         * Constructor for `splunkjs.Service.Resource`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Resource} A new `splunkjs.Service.Resource` instance.\n         *\n         * @method splunkjs.Service.Resource\n         */\n        init: function(service, path, namespace) {\n            var fullpath = service.fullpath(path, namespace);\n            \n            this._super(service, fullpath);\n            this.namespace = namespace;\n            this._properties = {};\n            this._state = {};\n            \n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this._load       = utils.bind(this, this._load);\n            this.fetch       = utils.bind(this, this.fetch);\n            this.properties  = utils.bind(this, this.properties);\n            this.state       = utils.bind(this, this.state);\n            this.path        = utils.bind(this, this.path);\n        },\n        \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Resource\n         */\n        path: function() {\n            throw new Error(\"MUST BE OVERRIDDEN\");\n        },\n        \n        /**\n         * Loads the resource and stores the properties.\n         *\n         * @param {Object} properties The properties for this resource.\n         *\n         * @method splunkjs.Service.Resource\n         * @protected\n         */\n        _load: function(properties) {\n            this._properties = properties || {};\n            this._state = properties || {};\n        },\n        \n        /**\n         * Refreshes the resource by fetching the object from the server\n         * and loading it.\n         *\n         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n         *\n         * @method splunkjs.Service.Resource\n         * @protected\n         */\n        fetch: function(callback) {\n            throw new Error(\"MUST BE OVERRIDDEN\");\n        },\n        \n        /**\n         * Retrieves the current properties for this resource.\n         *\n         * @return {Object} The properties.\n         *\n         * @method splunkjs.Service.Resource\n         */\n        properties: function() {\n            return this._properties;\n        },\n        \n        /**\n         * Retrieves the current full state (properties and metadata) of this resource.\n         *\n         * @return {Object} The current full state of this resource.\n         *\n         * @method splunkjs.Service.Resource\n         */\n        state: function() {\n            return this._state;\n        }\n    });\n    \n    /**\n     * Defines a base class for a Splunk entity, which is a well-defined construct\n     * with certain operations (such as \"properties\", \"update\", and \"delete\"). \n     * Entities include search jobs, indexes, inputs, apps, and more. \n     *\n     * Provides basic methods for working with Splunk entities, such as fetching and\n     * updating them.\n     *\n     * @class splunkjs.Service.Entity\n     * @extends splunkjs.Service.Resource\n     */\n    root.Entity = root.Resource.extend({\n        /**\n         * A static property that indicates whether to call `fetch` after an \n         * update to get the updated entity. By default, the entity is not \n         * fetched because the endpoint returns (echoes) the updated entity.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        fetchOnUpdate: false,\n        \n        /**\n         * Constructor for `splunkjs.Service.Entity`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        init: function(service, path, namespace) {\n            this._super(service, path, namespace);\n            \n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this._load     = utils.bind(this, this._load);\n            this.fetch     = utils.bind(this, this.fetch);\n            this.remove    = utils.bind(this, this.remove);\n            this.update    = utils.bind(this, this.update);\n            this.fields    = utils.bind(this, this.fields);\n            this.links     = utils.bind(this, this.links);\n            this.acl       = utils.bind(this, this.acl);\n            this.author    = utils.bind(this, this.author);\n            this.updated   = utils.bind(this, this.updated);\n            this.published = utils.bind(this, this.published);\n            this.enable    = utils.bind(this, this.enable);\n            this.disable   = utils.bind(this, this.disable);\n            this.reload    = utils.bind(this, this.reload);\n            \n            // Initial values\n            this._properties = {};\n            this._fields     = {};\n            this._acl        = {};\n            this._links      = {};\n        },\n        \n        /**\n         * Loads the entity and stores the properties.\n         *\n         * @param {Object} properties The properties for this entity.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        _load: function(properties) {\n            properties = utils.isArray(properties) ? properties[0] : properties;\n            \n            // Initialize the properties to\n            // empty values\n            properties = properties || {\n                content: {},\n                fields: {},\n                acl: {},\n                links: {}\n            };\n            \n            this._super(properties);\n            \n            // Take out the entity-specific content\n            this._properties = properties.content   || {};\n            this._fields     = properties.fields    || this._fields || {};\n            this._acl        = properties.acl       || {};\n            this._links      = properties.links     || {};\n            this._author     = properties.author    || null;\n            this._updated    = properties.updated   || null;\n            this._published  = properties.published || null;\n        },\n        \n        /**\n         * Retrieves the fields information for this entity, indicating which \n         * fields are wildcards, required, and optional.\n         *\n         * @return {Object} The fields information.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        fields: function() {\n            return this._fields;\n        },\n        \n        /**\n         * Retrieves the access control list (ACL) information for this entity,\n         * which contains the permissions for accessing the entity.\n         *\n         * @return {Object} The ACL.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        acl: function() {\n            return this._acl;\n        },\n        \n        /**\n         * Retrieves the links information for this entity, which is the URI of\n         * the entity relative to the management port of a Splunk instance.\n         *\n         * @return {Object} The links information.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        links: function() {\n            return this._links;\n        },\n        \n        /**\n         * Retrieves the author information for this entity.\n         *\n         * @return {String} The author.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        author: function() {\n            return this._author;\n        },\n        \n        /**\n         * Retrieves the updated time for this entity.\n         *\n         * @return {String} The updated time.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        updated: function() {\n            return this._updated;\n        },\n        \n        /**\n         * Retrieves the published time for this entity.\n         *\n         * @return {String} The published time.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        published: function() {\n            return this._published;\n        },\n        \n        /**\n         * Refreshes the entity by fetching the object from the server and \n         * loading it.\n         *\n         * @param {Object} options An optional dictionary of collection filtering and pagination options:\n         *    - `count` (_integer_): The maximum number of items to return.\n         *    - `offset` (_integer_): The offset of the first item to return.\n         *    - `search` (_string_): The search query to filter responses.\n         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.\n         *    - `sort_key` (_string_): The field to use for sorting (optional).\n         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.\n         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n         *\n         * @method splunkjs.Service.Entity\n         */\n        fetch: function(options, callback) {\n            if (!callback && utils.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n            callback = callback || function() {};\n            \n            options = options || {};\n            \n            var that = this;\n            return this.get(\"\", options, function(err, response) {\n                if (err) {\n                    callback(err);\n                } \n                else {\n                    that._load(response.data ? response.data.entry : null);\n                    callback(null, that);\n                }\n            });\n        },\n        \n        /**\n         * Deletes the entity from the server.\n         *\n         * @param {Function} callback A function to call when the object is deleted: `(err)`.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        remove: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.del(\"\", {}, function(err) {\n                callback(err);\n            });\n        },\n        \n        /**\n         * Updates the entity on the server.\n         *\n         * @param {Object} props The properties to update the object with.\n         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        update: function(props, callback) {\n            callback = callback || function() {};\n            \n            if (props.hasOwnProperty(\"name\")) {\n                throw new Error(\"Cannot set 'name' field in 'update'\");\n            }\n            \n            var that = this;\n            var req = this.post(\"\", props, function(err, response) {\n                if (!err && !that.fetchOnUpdate) {\n                    that._load(response.data.entry);\n                    callback(err, that);\n                }\n                else if (!err && that.fetchOnUpdate) {\n                    that.fetch(function() {\n                        if (req.wasAborted) {\n                            return; // aborted, so ignore\n                        }\n                        else {\n                            callback.apply(null, arguments);\n                        }\n                    });\n                }\n                else {\n                    callback(err, that);\n                }\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Disables the entity on the server.\n         *\n         * @param {Function} callback A function to call when the object is disabled: `(err, entity)`.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        disable: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            this.post(\"disable\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, that);\n                }\n            });\n        },\n        \n        /**\n         * Enables the entity on the server.\n         *\n         * @param {Function} callback A function to call when the object is enabled: `(err, entity)`.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        enable: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            this.post(\"enable\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, that);\n                }\n            });\n        },\n        \n        /**\n         * Reloads the entity on the server.\n         *\n         * @param {Function} callback A function to call when the object is reloaded: `(err, entity)`.\n         *\n         * @method splunkjs.Service.Entity\n         * @protected\n         */\n        reload: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            this.post(\"_reload\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, that);\n                }\n            });\n        }\n    });\n\n    /**\n     * Defines a base class for a Splunk collection, which is a well-defined construct\n     * that provides basic methods for working with collections of entities, such as \n     * creating and listing entities.\n     *\n     * @class splunkjs.Service.Collection\n     * @extends splunkjs.Service.Resource\n     */\n    root.Collection = root.Resource.extend({\n        /**\n         * A static property that indicates whether to call `fetch` after an \n         * entity has been created. By default, the entity is not fetched \n         * because the endpoint returns (echoes) the new entity.\n\n         * @method splunkjs.Service.Collection\n         */\n        fetchOnEntityCreation: false,\n        \n        /**\n         * Constructor for `splunkjs.Service.Collection`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} path A relative endpoint path (for example, \"search/jobs\").\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Collection} A new `splunkjs.Service.Collection` instance.\n         *\n         * @method splunkjs.Service.Collection\n         */     \n        init: function(service, path, namespace) {\n            this._super(service, path, namespace);\n            \n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this._load             = utils.bind(this, this._load);\n            this.fetch             = utils.bind(this, this.fetch);\n            this.create            = utils.bind(this, this.create);\n            this.list              = utils.bind(this, this.list);\n            this.item              = utils.bind(this, this.item);\n            this.instantiateEntity = utils.bind(this, this.instantiateEntity);\n            \n            // Initial values\n            this._entities       = [];\n            this._entitiesByName = {};    \n            this._properties     = {};\n            this._paging         = {};\n            this._links          = {}; \n        },\n        \n        /**\n         * Creates a local instance of an entity. \n         *\n         * @param {Object} props The properties for this entity.\n         * @return {splunkjs.Service.Entity} A new `splunkjs.Service.Entity` instance.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        instantiateEntity: function(props) {\n            throw new Error(\"MUST BE OVERRIDDEN\");\n        },\n        \n        /**\n         * Loads the collection and properties, and creates a map of entity\n         * names to entity IDs (for retrieval purposes).\n         *\n         * @param {Object} properties The properties for this collection.\n         *\n         * @method splunkjs.Service.Collection\n         * @private\n         */\n        _load: function(properties) {\n            this._super(properties);\n            \n            var entities = [];\n            var entitiesByName = {};\n            var entityPropertyList = properties.entry || [];\n            for(var i = 0; i < entityPropertyList.length; i++) {\n                var props = entityPropertyList[i];\n                var entity = this.instantiateEntity(props);\n                entity._load(props);\n                entities.push(entity);\n                \n                if (entitiesByName.hasOwnProperty(entity.name)) {\n                    entitiesByName[entity.name].push(entity);\n                }\n                else {\n                    entitiesByName[entity.name] = [entity];\n                }\n            }\n            this._entities       = entities;\n            this._entitiesByName = entitiesByName;\n            this._paging         = properties.paging    || {};\n            this._links          = properties.links     || {};\n            this._updated        = properties.updated   || null;\n        },\n        \n        /**\n         * Retrieves the links information for this collection, which is the URI of\n         * the resource relative to the management port of a Splunk instance.\n         *\n         * @return {Object} The links information.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        links: function() {\n            return this._links;\n        },\n        \n        /**\n         * Retrieves the author information for this collection.\n         *\n         * @return {String} The author.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        paging: function() {\n            return this._paging;\n        },\n        \n        /**\n         * Retrieves the updated time for this collection.\n         *\n         * @return {String} The updated time.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        updated: function() {\n            return this._updated;\n        },\n        \n        /**\n         * Refreshes the resource by fetching the object from the server and \n         * loading it.\n         *\n         * @param {Object} options A dictionary of collection filtering and pagination options:\n         *    - `count` (_integer_): The maximum number of items to return.\n         *    - `offset` (_integer_): The offset of the first item to return.\n         *    - `search` (_string_): The search query to filter responses.\n         *    - `sort_dir` (_string_): The direction to sort returned items: “asc” or “desc”.\n         *    - `sort_key` (_string_): The field to use for sorting (optional).\n         *    - `sort_mode` (_string_): The collating sequence for sorting returned items: “auto”, “alpha”, “alpha_case”, or “num”.\n         * @param {Function} callback A function to call when the object is retrieved: `(err, resource)`.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        fetch: function(options, callback) {\n            if (!callback && utils.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n            callback = callback || function() {};\n            \n            options = options || {};\n            if (!options.count) {\n                options.count = 0;\n            }\n            \n            var that = this;\n            var req = that.get(\"\", options, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    that._load(response.data);\n                    callback(null, that);\n                }\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Returns a specific entity from the collection.\n         *\n         * @example\n         *\n         *      var apps = service.apps();\n         *      apps.fetch(function(err, apps) {\n         *          var app = apps.item(\"search\");\n         *          console.log(\"Search App Found: \" + !!app);\n         *          // `app` is an Application object.\n         *      });\n         *\n         * @param {String} id The name of the entity to retrieve.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The wildcard value \"-\", is not acceptable when searching for an entity.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The wildcard value \"-\" is unacceptable when searching for an entity.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @returns {splunkjs.Service.Entity} The entity, or `null` if one is not found.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        item: function(id, namespace) {                \n            if (utils.isEmpty(namespace)) {\n                namespace = null;\n            }          \n            \n            if (!id) {\n                throw new Error(\"Must suply a non-empty name.\");\n            }\n\n            if (namespace && (namespace.app === '-' || namespace.owner === '-')) {\n                throw new Error(\"When searching for an entity, wildcards are not allowed in the namespace. Please refine your search.\");\n            }\n            \n            var fullPath = null;\n            if (this._entitiesByName.hasOwnProperty(id)) {\n                var entities = this._entitiesByName[id];                 \n                \n                if (entities.length === 1 && !namespace) {\n                    // If there is only one entity with the\n                    // specified name and the user did not\n                    // specify a namespace, then we just\n                    // return it\n                    return entities[0];\n                }\n                else if (entities.length === 1 && namespace) {\n                    // If we specified a namespace, then we \n                    // only return the entity if it matches\n                    // the full path\n                    fullPath = this.service.fullpath(entities[0].path(), namespace);\n                    if (entities[0].qualifiedPath === fullPath) {\n                        return entities[0];\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else if (entities.length > 1 && !namespace) {\n                    // If there is more than one entity and we didn't\n                    // specify a namespace, then we return an error\n                    // saying the match is ambiguous\n                    throw new Error(\"Ambiguous match for name '\" + id + \"'\");\n                }\n                else {\n                    // There is more than one entity, and we do have\n                    // a namespace, so we try and find it\n                    for(var i = 0; i < entities.length; i++) {\n                        var entity = entities[i];\n                        fullPath = this.service.fullpath(entities[i].path(), namespace);\n                        if (entity.qualifiedPath === fullPath) {\n                            return entity;\n                        }\n                    }                            \n                }\n            }\n            else {\n                return null;\n            }    \n        },\n        \n        /**\n         * Creates an entity on the server for this collection with the specified\n         * parameters.\n         *\n         * @example\n         *\n         *      var apps = service.apps();\n         *      apps.create({name: \"NewSearchApp\"}, function(err, newApp) {\n         *          console.log(\"CREATED\");\n         *      });\n         *\n         * @param {Object} params A dictionary of entity-specific properties.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         * @returns {Array} An array of `splunkjs.Service.Entity` objects.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        create: function(params, callback) {\n            callback = callback || function() {};\n            var that = this;\n            var req = this.post(\"\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    var props = response.data.entry;\n                    if (utils.isArray(props)) {\n                        props = props[0];\n                    }\n                    \n                    var entity = that.instantiateEntity(props);\n                    entity._load(props); \n                    \n                    if (that.fetchOnEntityCreation) {\n                        entity.fetch(function() {\n                            if (req.wasAborted) {\n                                return; // aborted, so ignore\n                            }\n                            else {\n                                callback.apply(null, arguments);\n                            }\n                        });\n                    }\n                    else {                   \n                        callback(null, entity);\n                    }\n                }\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Retrieves a list of all entities in the collection.\n         *\n         * @example\n         *\n         *      var apps = service.apps();\n         *      apps.fetch(function(err, apps) {\n         *          var appList = apps.list();\n         *          console.log(appList.length);\n         *      });\n         *\n         * @param {Function} callback A function to call with the list of entities: `(err, list)`.\n         *\n         * @method splunkjs.Service.Collection\n         */\n        list: function(callback) {\n            callback = callback || function() {};\n            \n            return utils.clone(this._entities);\n        }\n    });\n    \n    /**\n     * Represents a specific saved search, which you can then view, modify, and\n     * remove.\n     *\n     * @endpoint saved/searches/{name}\n     * @class splunkjs.Service.SavedSearch\n     * @extends splunkjs.Service.Entity\n     */\n    root.SavedSearch = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.SavedSearch\n         */\n        path: function() {\n            return Paths.savedSearches + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.SavedSearch`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name for the new saved search.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.\n         *\n         * @method splunkjs.Service.SavedSearch\n         */     \n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n            \n            this.acknowledge  = utils.bind(this, this.acknowledge);\n            this.dispatch     = utils.bind(this, this.dispatch);\n            this.history      = utils.bind(this, this.history);\n            this.suppressInfo = utils.bind(this, this.suppressInfo);\n        },\n\n        /**\n         * Gets the count of triggered alerts for this savedSearch,\n         * defaulting to 0 when undefined.\n         *\n         * @example\n         *\n         *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n         *      var alertCount = savedSearch.alertCount();\n         * \n         * @return {Number} The count of triggered alerts.\n         *\n         * @method splunkjs.Service.SavedSearch\n         */\n        alertCount: function() {\n            return parseInt(this.properties().triggered_alert_count, 10) || 0;\n        },\n\n        /**\n         * Acknowledges the suppression of the alerts from a saved search and\n         * resumes alerting.\n         *\n         * @example\n         *\n         *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n         *      savedSearch.acknowledge(function(err, search) {\n         *          console.log(\"ACKNOWLEDGED\");\n         *      });\n         *\n         * @param {Function} callback A function to call when the saved search is acknowledged: `(err, savedSearch)`.\n         *\n         * @endpoint saved/searches/{name}/acknowledge\n         * @method splunkjs.Service.SavedSearch\n         */\n        acknowledge: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"acknowledge\", {}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Dispatches a saved search, which creates a search job and returns a \n         * `splunkjs.Service.Job` instance in the callback function.\n         *\n         * @example\n         *\n         *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n         *      savedSearch.dispatch({force_dispatch: false}, function(err, job, savedSearch) {\n         *          console.log(\"Job SID: \", job.sid);\n         *      });\n         *\n         * @param {Object} options The options for dispatching this saved search:\n         *    - `dispatch.now` (_string_): The time that is used to dispatch the search as though the specified time were the current time.\n         *    - `dispatch.*` (_string_): Overwrites the value of the search field specified in *.\n         *    - `trigger_actions` (_boolean_): Indicates whether to trigger alert actions.\n         *    - `force_dispatch` (_boolean_): Indicates whether to start a new search if another instance of this search is already running.\n         * @param {Function} callback A function to call when the saved search is dispatched: `(err, job, savedSearch)`.\n         *\n         * @endpoint saved/searches/{name}/dispatch\n         * @method splunkjs.Service.SavedSearch\n         */\n        dispatch: function(options, callback) {\n            if (!callback && utils.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n            \n            callback = callback || function() {};\n            options = options || {};\n            \n            var that = this;\n            var req = this.post(\"dispatch\", options, function(err, response) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                \n                var sid = response.data.sid;\n                var job = new root.Job(that.service, sid, that.namespace);\n                \n                callback(null, job, that);\n            });\n            \n            return req;\n        },\n\n        /** \n         * Gets the `splunkjs.Service.FiredAlertGroup` for firedAlerts associated with this saved search.\n         *\n         * @example\n         *\n         *      var alerts = service.firedAlertGroups().item(\"MySavedSearch\");\n         *\n         * @return {splunkjs.Service.FiredAlertGroup} An AlertGroup object with the\n         * same name as this SavedSearch object.\n         *\n         * @method splunkjs.Service.SavedSearch\n         */\n        firedAlertGroup: function() {\n            return new root.FiredAlertGroup(this.service, this.name);\n        },\n\n        /**\n         * Retrieves the job history for a saved search, which is a list of \n         * `splunkjs.Service.Job` instances.\n         *\n         * @example\n         *\n         *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n         *      savedSearch.history(function(err, jobs, search) {\n         *          for(var i = 0; i < jobs.length; i++) {\n         *              console.log(\"Job\", i, \":\", jobs[i].sid);\n         *          }\n         *      });\n         *\n         * @param {Function} callback A function to call when the history is retrieved: `(err, job, savedSearch)`.\n         *\n         * @endpoint saved/searches/{name}/history\n         * @method splunkjs.Service.SavedSearch\n         */\n        history: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"history\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                \n                var jobs = [];\n                var data = response.data.entry || [];\n                for(var i = 0; i < data.length; i++) {\n                    var jobData = response.data.entry[i];\n                    var namespace = utils.namespaceFromProperties(jobData);\n                    var job = new root.Job(that.service, jobData.name, namespace);\n                    \n                    job._load(jobData);\n                    jobs.push(job);\n                }\n                \n                callback(null, jobs, that);\n            });\n        },\n        \n        /**\n         * Retrieves the suppression state of a saved search.\n         *\n         * @example\n         *\n         *      var savedSearch = service.savedSearches().item(\"MySavedSearch\");\n         *      savedSearch.history(function(err, suppressionState, search) {\n         *          console.log(\"STATE: \", suppressionState);\n         *      });\n         *\n         * @param {Function} callback A function to call when the suppression state is retrieved: `(err, suppressionState, savedSearch)`.\n         *\n         * @endpoint saved/searches/{name}/suppress\n         * @method splunkjs.Service.SavedSearch\n         */\n        suppressInfo: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"suppress\", {}, function(err, response) {\n                callback(err, response.data.entry.content, that);\n            });\n        },\n        \n        /**\n         * Updates the saved search on the server. \n         *\n         * **Note:** The search query is required, even when it isn't being modified.\n         * If you don't provide it, this method will fetch the search string from\n         * the server or from the local cache. \n         *\n         * @param {Object} props The properties to update the saved search with. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams\" target=\"_blank\">Saved search parameters</a> on Splunk Developer Portal.\n         * @param {Function} callback A function to call when the object is updated: `(err, entity)`.\n         *\n         * @method splunkjs.Service.SavedSearch\n         */\n        update: function(params, callback) {\n            params = params || {};\n            \n            if (!params.search) {\n                var update = this._super;\n                var req = this.fetch(function(err, search) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        params.search = search.properties().search;\n                        update.call(search, params, function() {\n                            if (req.wasAborted) {\n                                return; // aborted, so ignore\n                            }\n                            else {\n                                callback.apply(null, arguments);\n                            }\n                        });\n                    }\n                });\n                \n                return req;\n            }\n            else {\n                return this._super(params, callback);\n            }\n        }\n    });\n    \n    /**\n     * Represents a collection of saved searches. You can create and list saved \n     * searches using this collection container, or get a specific saved search.\n     *\n     *\n     * @endpoint saved/searches\n     * @class splunkjs.Service.SavedSearches\n     * @extends splunkjs.Service.Collection\n     */\n    root.SavedSearches = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.SavedSearches\n         */\n        path: function() {\n            return Paths.savedSearches;\n        },\n        \n        /**\n         * Creates a local instance of a saved search.\n         *\n         * @param {Object} props The properties for the new saved search. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#savedsearchparams\" target=\"_blank\">Saved search parameters</a> on Splunk Developer Portal.\n         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.SavedSearch` instance.\n         *\n         * @method splunkjs.Service.SavedSearches\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.SavedSearch(this.service, props.name, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.SavedSearches`. \n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.SavedSearches} A new `splunkjs.Service.SavedSearches` instance.\n         *\n         * @method splunkjs.Service.SavedSearches\n         */     \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n        }\n    });\n\n    /**\n     * Represents a specific storage password, which you can then view, modify, and\n     * remove.\n     *\n     * @endpoint storage/passwords/{name}\n     * @class splunkjs.Service.StoragePassword\n     * @extends splunkjs.Service.Entity\n     */\n    root.StoragePassword = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.StoragePassword\n         */\n        path: function () {\n            return Paths.storagePasswords + \"/\" + encodeURIComponent(this.name);\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.StoragePassword`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name for the new storage password.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.StoragePassword} A new `splunkjs.Service.StoragePassword` instance.\n         *\n         * @method splunkjs.Service.StoragePassword\n         */\n        init: function (service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n        }\n    });\n\n    /**\n     * Represents a collection of storage passwords. You can create and list storage \n     * passwords using this collection container, or get a specific storage password.\n     *\n     * @endpoint storage/passwords\n     * @class splunkjs.Service.StoragePasswords\n     * @extends splunkjs.Service.Collection\n     */\n    root.StoragePasswords = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.StoragePasswords\n         */\n        path: function() {\n            return Paths.storagePasswords;\n        },\n        \n        /**\n         * Creates a local instance of a storage password.\n         *\n         * @param {Object} props The properties for the new storage password. For a list of available parameters,\n         * see <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTaccess#POST_storage.2Fpasswords\" target=\"_blank\">\n         * POST storage/passwords</a> on Splunk Developer Portal.\n         * @return {splunkjs.Service.SavedSearch} A new `splunkjs.Service.StoragePassword` instance.\n         *\n         * @method splunkjs.Service.StoragePasswords\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.StoragePassword(this.service, props.name, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.StoragePasswords`. \n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.StoragePasswords} A new `splunkjs.Service.StoragePasswords` instance.\n         *\n         * @method splunkjs.Service.StoragePasswords\n         */     \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n        }\n    });\n\n    /**\n     * Represents a fired alert. \n     * You can retrieve several of the fired alert's properties by\n     * the corresponding function name.\n     *\n     * @endpoint alerts/fired_alerts/{name}\n     * @class splunkjs.Service.FiredAlert\n     * @extends splunkjs.Service.Entity\n     */\n    root.FiredAlert = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.FiredAlert\n         */\n        path: function() {\n            return Paths.firedAlerts + \"/\" + encodeURIComponent(this.name);\n        },\n\n        /**\n         * Returns this alert's actions (such as notifying by email, running a \n         * script, adding to RSS, tracking in Alert Manager, and enabling \n         * summary indexing). \n         *\n         * @return {Array} of actions, an empty {Array} if no actions\n         * @method splunkjs.Service.FiredAlert\n         */\n        actions: function() {\n            return this.properties().actions || [];\n        },\n\n        /**\n         * Returns this alert's type.\n         *\n         * @return {String} the alert's type.\n         * @method splunkjs.Service.FiredAlert\n         */\n        alertType: function() {\n            return this.properties().alert_type || null;\n        },\n\n        /**\n         * Indicates whether the result is a set of events (digest) or a single\n         * event (per result).\n         *\n         * This method is available in Splunk 4.3 and later.\n         *\n         * @return {Boolean} true if the result is a digest, false if per result\n         * @method splunkjs.Service.FiredAlert\n         */\n        isDigestMode: function() {\n            // Convert this property to a Boolean\n            return !!this.properties().digest_mode;\n        },\n\n        /**\n         * Returns the rendered expiration time for this alert.\n         *\n         * This method is available in Splunk 4.3 and later.\n         *\n         * @return {String}\n         * @method splunkjs.Service.FiredAlert\n         */\n        expirationTime: function() {\n            return this.properties().expiration_time_rendered || null;\n        },\n\n        /**\n         * Returns the saved search for this alert.\n         *\n         * @return {String} The saved search name, or {null} if not available.\n         * @method splunkjs.Service.FiredAlert\n         */\n        savedSearchName: function() {\n            return this.properties().savedsearch_name || null;\n        },\n\n        /**\n         * Returns this alert's severity on a scale of 1 to 10, with 1 being the\n         * highest severity.\n         *\n         * @return {Number} this alert's severity, -1 if not specified\n         * @method splunkjs.Service.FiredAlert\n         */\n        severity: function() {\n            return parseInt(this.properties().severity, 10) || -1;\n        },\n\n        /**\n         * Returns this alert's search ID (SID).\n         *\n         * @return {String} This alert's SID, or {null} if not available.\n         * @method splunkjs.Service.FiredAlert\n         */\n        sid: function() {\n            return this.properties().sid || null;\n        },\n\n        /**\n         * Returns the time this alert was triggered.\n         *\n         * @return {Number} This alert's trigger time, or {null} if not available.\n         * @method splunkjs.Service.FiredAlert\n         */\n        triggerTime: function() {\n            return this.properties().trigger_time || null;\n        },\n\n        /**\n         * Returns this alert's rendered trigger time.\n         *\n         * This method is available in Splunk 4.3 and later.\n         *\n         * @return {String} This alert's rendered trigger time, or {null} if not available.\n         * @method splunkjs.Service.FiredAlert\n         */\n        triggerTimeRendered: function() {\n            return this.properties().trigger_time_rendered || null;\n        },\n\n        /**\n         * Returns the count of triggered alerts.\n         *\n         * This method is available in Splunk 4.3 and later.\n         *\n         * @return {Number} The number of triggered alerts, or -1 if not specified.\n         * @method splunkjs.Service.FiredAlert\n         */\n        triggeredAlertCount: function() {\n            return parseInt(this.properties().triggered_alerts, 10) || -1;\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.FiredAlert`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name for the new alert group.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.FiredAlert} A new `splunkjs.Service.FiredAlert` instance.\n         *\n         * @method splunkjs.Service.FiredAlert\n         */     \n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n        }\n    });\n\n\n    /**\n     * Represents a specific alert group, which you can then view and\n     * remove.\n     *\n     * @endpoint alerts/fired_alerts/{name}\n     * @class splunkjs.Service.FiredAlertGroup\n     * @extends splunkjs.Service.Entity\n     */\n    root.FiredAlertGroup = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.FiredAlertGroup\n         */\n        path: function() {\n            return Paths.firedAlerts + \"/\" + encodeURIComponent(this.name);\n        },\n\n        /**\n         * Returns the `triggered_alert_count` property, the count\n         * of triggered alerts.\n         *\n         * @return {Number} the count of triggered alerts\n         *\n         * @method splunkjs.Service.FiredAlertGroup\n         */\n        count: function() {\n            return parseInt(this.properties().triggered_alert_count, 10) || 0;\n        },\n\n        /**\n         * Returns fired instances of this alert, which is\n         * a list of `splunkjs.Service.FiredAlert` instances.\n         *\n         * @example\n         *\n         *      var alertGroup = service.firedAlertGroups().item(\"MyAlert\");\n         *      alertGroup.list(function(err, firedAlerts, alert) {\n         *          for(var i = 0; i < firedAlerts.length; i++) {\n         *              console.log(\"Fired alert\", i, \":\", firedAlerts[i].sid);\n         *          }\n         *      });\n         *\n         * @param {Function} callback A function to call when the fired alerts are retrieved: `(err, firedAlerts, alertGroup)`.\n         *\n         * @method splunkjs.Service.FiredAlertGroup\n         */\n        list: function(options, callback) {\n            if (!callback && utils.isFunction(options)) {\n                callback = options;\n                options = {};\n            }\n\n            callback = callback || function() {};\n            options = options || {};\n\n            var that = this;\n            return this.get(\"\", options, function(err, response) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                \n                var firedAlerts = [];\n                var data = response.data.entry || [];\n                for (var i = 0; i < data.length; i++) {\n                    var firedAlertData = response.data.entry[i];\n                    var namespace = utils.namespaceFromProperties(firedAlertData);\n                    var firedAlert = new root.FiredAlert(that.service, firedAlertData.name, namespace);\n                    firedAlert._load(firedAlertData);\n                    firedAlerts.push(firedAlert);\n                }\n                \n                callback(null, firedAlerts, that);\n            });\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.FiredAlertGroup`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name for the new alert group.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.\n         *\n         * @method splunkjs.Service.FiredAlertGroup\n         */\n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n\n            this.list = utils.bind(this, this.list);\n        }\n    });\n\n    /**\n     * Represents a collection of fired alerts for a saved search. You can\n     * create and list saved searches using this collection container, or\n     * get a specific alert group. \n     *\n     *\n     * @endpoint alerts/fired_alerts\n     * @class splunkjs.Service.FiredAlertGroupCollection\n     * @extends splunkjs.Service.Collection\n     */\n    root.FiredAlertGroupCollection = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.FiredAlertGroupCollection\n         */\n        path: function() {\n            return Paths.firedAlerts;\n        },\n        \n        /**\n         * Creates a local instance of an alert group.\n         *\n         * @param {Object} props The properties for the alert group.\n         * @return {splunkjs.Service.FiredAlertGroup} A new `splunkjs.Service.FiredAlertGroup` instance.\n         *\n         * @method splunkjs.Service.FiredAlertGroupCollection\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.FiredAlertGroup(this.service, props.name, entityNamespace);\n        },\n\n        /**\n         * Suppress removing alerts via the fired alerts endpoint.\n         *\n         * @method splunkjs.Service.FiredAlertGroupCollection\n         */\n        remove: function() {\n            throw new Error(\"To remove an alert, remove the saved search with the same name.\");\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.FiredAlertGroupCollection`. \n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.FiredAlertGroupCollection} A new `splunkjs.Service.FiredAlertGroupCollection` instance.\n         *\n         * @method splunkjs.Service.FiredAlertGroupCollection\n         */     \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n\n            this.instantiateEntity = utils.bind(this, this.instantiateEntity);\n            this.remove = utils.bind(this, this.remove);\n        }\n    });\n    \n    /**\n     * Represents a specific Splunk app that you can view, modify, and\n     * remove.\n     *\n     * @endpoint apps/local/{name}\n     * @class splunkjs.Service.Application\n     * @extends splunkjs.Service.Entity\n     */\n    root.Application = root.Entity.extend({\n        /**\n         * Indicates whether to call `fetch` after an update to get the updated \n         * item.\n         *\n         * @method splunkjs.Service.Application\n         */\n        fetchOnUpdate: true,\n        \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Application\n         */\n        path: function() {\n            return Paths.apps + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Application`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name of the Splunk app.\n         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.\n         *\n         * @method splunkjs.Service.Application\n         */ \n        init: function(service, name) {\n            this.name = name;\n            this._super(service, this.path(), {});\n            \n            this.setupInfo  = utils.bind(this, this.setupInfo);\n            this.updateInfo = utils.bind(this, this.updateInfo);\n        },\n        \n        /**\n         * Retrieves the setup information for a Splunk app.\n         *\n         * @example\n         *\n         *      var app = service.apps().item(\"app\");\n         *      app.setup(function(err, info, search) {\n         *          console.log(\"SETUP INFO: \", info);\n         *      });\n         *\n         * @param {Function} callback A function to call when setup information is retrieved: `(err, info, app)`.\n         *\n         * @endpoint apps/local/{name}/setup\n         * @method splunkjs.Service.Application\n         */\n        setupInfo: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"setup\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                } \n                else {\n                    callback(null, response.data.entry.content, that);\n                }\n            });\n        },\n        \n        /**\n         * Retrieves any information for an update to a locally-installed Splunk app.\n         *\n         * @example\n         *\n         *      var app = service.apps().item(\"MyApp\");\n         *      app.updateInfo(function(err, info, app) {\n         *          console.log(\"UPDATE INFO: \", info);\n         *      });\n         *\n         * @param {Function} callback A function to call when update information is retrieved: `(err, info, app)`.\n         *\n         * @endpoint apps/local/{name}/update\n         * @method splunkjs.Service.Application\n         */\n        updateInfo: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"update\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                } \n                else {\n                    callback(null, response.data.entry.content, that);\n                }\n            });\n        }\n    });\n    \n    /**\n     * Represents a collection of Splunk apps. You can create and list applications \n     * using this collection container, or get a specific app.\n     *\n     * @endpoint apps/local\n     * @class splunkjs.Service.Applications\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Applications = root.Collection.extend({\n        /**\n         * Indicates whether to call `fetch` after an entity has been created. By \n         * default, the entity is not fetched because the endpoint returns\n         * (echoes) the new entity.\n         *\n         * @method splunkjs.Service.Applications\n         */\n        fetchOnEntityCreation: true,\n        \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Applications\n         */\n        path: function() {\n            return Paths.apps;\n        },\n        \n        /**\n         * Creates a local instance of an app.\n         *\n         * @param {Object} props The properties for the new app. For details, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTapps#POST_apps.2Flocal\" target=\"_blank\">POST apps/local</a> endpoint in the REST API documentation.\n         * @return {splunkjs.Service.Application} A new `splunkjs.Service.Application` instance.\n         *\n         * @method splunkjs.Service.Applications\n         */\n        instantiateEntity: function(props) {\n            return new root.Application(this.service, props.name, {});\n        },\n                \n        /**\n         * Constructor for `splunkjs.Service.Applications`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @return {splunkjs.Service.Applications} A new `splunkjs.Service.Applications` instance.\n         *\n         * @method splunkjs.Service.Applications\n         */  \n        init: function(service) {\n            this._super(service, this.path(), {});\n        }\n    });\n    \n    /**\n     * Provides access to configuration information about the server.\n     *\n     * @endpoint server/info\n     * @class splunkjs.Service.ServerInfo\n     * @extends splunkjs.Service.Entity\n     */\n    root.ServerInfo = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.ServerInfo\n         */\n        path: function() {\n            return Paths.info;\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.ServerInfo`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @return {splunkjs.Service.ServerInfo} A new `splunkjs.Service.ServerInfo` instance.\n         *\n         * @method splunkjs.Service.ServerInfo\n         */ \n        init: function(service) {\n            this.name = \"server-info\";\n            this._super(service, this.path(), {});\n        }\n    });\n    \n    /**\n     * Represents a specific Splunk user, which you can view, modify, and\n     * remove.\n     *\n     * @endpoint authentication/users/{name}\n     * @class splunkjs.Service.User\n     * @extends splunkjs.Service.Entity\n     */\n    root.User = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.User\n         */\n        path: function() {\n            return Paths.users + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.User`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The Splunk username.\n         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.\n         *\n         * @method splunkjs.Service.User\n         */ \n        init: function(service, name) {\n            this.name = name;\n            this._super(service, this.path(), {});\n        }\n    });\n    \n    /**\n     * Represents a collection of users. You can create and list users using \n     * this collection container, or get a specific user.\n     *\n     * @endpoint authentication/users\n     * @class splunkjs.Service.Users\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Users = root.Collection.extend({\n        /**\n         * Indicates whether to call `fetch` after an entity has been created. By \n         * default, the entity is not fetched because the endpoint returns\n         * (echoes) the new entity.\n         *\n         * @method splunkjs.Service.Users\n         */\n        fetchOnEntityCreation: true,\n        \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Users\n         */\n        path: function() {\n            return Paths.users;\n        },\n        \n        /**\n         * Creates a local instance of a user.\n         *\n         * @param {Object} props The properties for this new user. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams\" target=\"_blank\">User authentication parameters</a> on Splunk Developer Portal.\n         * @return {splunkjs.Service.User} A new `splunkjs.Service.User` instance.\n         *\n         * @method splunkjs.Service.Users\n         */\n        instantiateEntity: function(props) {\n            return new root.User(this.service, props.name, {});\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Users`. \n         * \n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @return {splunkjs.Service.Users} A new `splunkjs.Service.Users` instance.\n         *\n         * @method splunkjs.Service.Users\n         */  \n        init: function(service) {\n            this._super(service, this.path(), {});\n        },\n        \n        /**\n         * Creates a new user. \n         *\n         * **Note:** This endpoint requires a special implementation.\n         *\n         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ8#userauthparams\" target=\"_blank\">User authentication parameters</a> on Splunk Developer Portal.\n         * @param {Function} callback A function to call with the new entity: `(err, createdEntity)`.\n         *\n         * @method splunkjs.Service.Users\n         */\n        create: function(params, callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    // This endpoint requires us to use the passed-in name\n                    var props = {name: params.name};\n                    \n                    var entity = that.instantiateEntity(props);                    \n                    entity.fetch(function() {\n                        if (req.wasAborted) {\n                            return; // aborted, so ignore\n                        }\n                        else {\n                            callback.apply(null, arguments);\n                        }\n                    });\n                }\n            });\n            \n            return req;\n        }\n    });\n    \n    /**\n     * Represents a specific Splunk view, which you can view, modify, and\n     * remove.\n     *\n     * @endpoint data/ui/views/{name}\n     * @class splunkjs.Service.View\n     * @extends splunkjs.Service.Entity\n     */\n    root.View = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.View\n         */\n        path: function() {\n            return Paths.views + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.View`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name of the view.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.\n         *\n         * @method splunkjs.Service.View\n         */ \n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n        }\n    });\n    \n    /**\n     * Represents a collection of views. You can create and list views using \n     * this collection container, or get a specific view.\n     *\n     * @endpoint data/ui/views\n     * @class splunkjs.Service.Views\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Views = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Views\n         */\n        path: function() {\n            return Paths.views;\n        },\n        \n        /**\n         * Creates a local instance of a view.\n         *\n         * @param {Object} props The properties for the new view. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#POST_scheduled.2Fviews.2F.7Bname.7D\" target=\"_blank\">POST scheduled/views/{name}</a> endpoint in the REST API documentation.\n         * @return {splunkjs.Service.View} A new `splunkjs.Service.View` instance.\n         *\n         * @method splunkjs.Service.Views\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.View(this.service, props.name, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Views`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Views} A new `splunkjs.Service.Views` instance.\n         *\n         * @method splunkjs.Service.Views\n         */  \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n        }\n    });\n    \n    /**\n     * Represents an index, which you can update and submit events to.\n     *\n     * @endpoint data/indexes/name\n     * @class splunkjs.Service.Index\n     * @extends splunkjs.Service.Entity\n     */\n    root.Index = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Index\n         */\n        path: function() {\n            return Paths.indexes + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Index`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name of the index.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.\n         *\n         * @method splunkjs.Service.Index\n         */ \n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n            \n            this.submitEvent = utils.bind(this, this.submitEvent);\n        },\n        \n        /**\n         * Submits an event to this index.\n         *\n         * @example\n         *\n         *      var index = service.indexes().item(\"_internal\");\n         *      index.submitEvent(\"A new event\", {sourcetype: \"mysourcetype\"}, function(err, result, index) {\n         *          console.log(\"Submitted event: \", result);\n         *      });\n         *\n         * @param {String} event The text for this event.\n         * @param {Object} params A dictionary of parameters for indexing: \n         *    - `host` (_string_): The value to populate in the host field for events from this data input. \n         *    - `host_regex` (_string_): A regular expression used to extract the host value from each event. \n         *    - `source` (_string_): The source value to fill in the metadata for this input's events.\n         *    - `sourcetype` (_string_): The sourcetype to apply to events from this input.\n         * @param {Function} callback A function to call when the event is submitted: `(err, result, index)`.\n         *\n         * @endpoint receivers/simple?index={name}\n         * @method splunkjs.Service.Index\n         */\n        submitEvent: function(event, params, callback) {\n            if (!callback && utils.isFunction(params)) {\n                callback = params;\n                params = {};\n            }\n            \n            callback = callback || function() {};\n            params = params || {};\n            \n            // Add the index name\n            params[\"index\"] = this.name;\n            \n            var that = this;\n            return this.service.log(event, params, function(err, result) {\n                callback(err, result, that); \n            });\n        },\n        \n        remove: function(callback) {\n            if (this.service.versionCompare(\"5.0\") < 0) {\n                throw new Error(\"Indexes cannot be removed in Splunk 4.x\");\n            }\n            else {\n                return this._super(callback);\n            }\n        }\n    });\n        \n    /**\n     * Represents a collection of indexes. You can create and list indexes using \n     * this collection container, or get a specific index.\n     *\n     * @endpoint data/indexes\n     * @class splunkjs.Service.Indexes\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Indexes = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Indexes\n         */\n        path: function() {\n            return Paths.indexes;\n        },\n        \n        /**\n         * Creates a local instance of an index.\n         *\n         * @param {Object} props The properties for the new index. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ3#indexparams\" target=\"_blank\">Index parameters</a> on Splunk Developer Portal.\n         * @return {splunkjs.Service.Index} A new `splunkjs.Service.Index` instance.\n         *\n         * @method splunkjs.Service.Indexes\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.Index(this.service, props.name, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Indexes`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Indexes} A new `splunkjs.Service.Indexes` instance.\n         *\n         * @method splunkjs.Service.Indexes\n         */  \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n        },\n        \n        /**\n         * Creates an index with the given name and parameters.\n         *\n         * @example\n         *\n         *      var indexes = service.indexes();\n         *      indexes.create(\"NewIndex\", {assureUTF8: true}, function(err, newIndex) {\n         *          console.log(\"CREATED\");\n         *      });\n         *\n         * @param {String} name A name for this index.\n         * @param {Object} params A dictionary of properties. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEJ3#indexparams\" target=\"_blank\">Index parameters</a> on Splunk Developer Portal.\n         * @param {Function} callback A function to call with the new index: `(err, createdIndex)`.\n         *\n         * @endpoint data/indexes\n         * @method splunkjs.Service.Indexes\n         */\n        create: function(name, params, callback) {\n            // If someone called us with the default style of (params, callback),\n            // lets make it work\n            if (utils.isObject(name) && utils.isFunction(params) && !callback) {\n                callback = params;\n                params = name;\n                name = params.name;\n            }\n            \n            params = params || {};\n            params[\"name\"] = name;\n            \n            return this._super(params, callback);\n        }\n    });\n    \n    /**\n     * Represents a specific stanza, which you can update and remove, from a \n     * configuration file.\n     *\n     * @endpoint configs/conf-{file}/{name}`\n     * @class splunkjs.Service.ConfigurationStanza\n     * @extends splunkjs.Service.Entity\n     */\n    root.ConfigurationStanza = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.ConfigurationStanza\n         */\n        path: function() {\n            var name = this.name === \"default\" ? \"_new\" : this.name;\n            return Paths.configurations + \"/conf-\" + encodeURIComponent(this.file) + \"/\" + encodeURIComponent(name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.ConfigurationStanza`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} file The name of the configuration file.\n         * @param {String} name The name of the new stanza.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n         *\n         * @method splunkjs.Service.ConfigurationStanza\n         */ \n        init: function(service, file, name, namespace) {\n            this.name = name;\n            this.file = file;\n            this._super(service, this.path(), namespace);\n        }\n    });\n    \n    /**\n     * Represents a collection of stanzas for a specific property file. You can\n     * create and list stanzas using this collection container, or get a specific \n     * stanza.\n     *\n     * @endpoint configs/conf-{file}\n     * @class splunkjs.Service.ConfigurationFile\n     * @extends splunkjs.Service.Collection\n     */  \n    root.ConfigurationFile = root.Collection.extend({ \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.ConfigurationFile\n         */\n        path: function() {\n            return Paths.configurations + \"/conf-\" + encodeURIComponent(this.name);\n        },\n\n        /**\n         * Creates a local instance of the default stanza in a configuration file.\n         * You cannot directly update the `ConfigurationStanza` returned by this function.\n         *\n         * This is equivalent to viewing `configs/conf-{file}/_new`.\n         *\n         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n         *\n         * @method splunkjs.Service.ConfigurationFile\n         */\n        getDefaultStanza: function() {\n            return new root.ConfigurationStanza(this.service, this.name, \"default\", this.namespace);\n        },\n\n        /**\n         * Creates a local instance of a stanza in a configuration file.\n         *\n         * @param {Object} props The key-value properties for the new stanza. \n         * @return {splunkjs.Service.ConfigurationStanza} A new `splunkjs.Service.ConfigurationStanza` instance.\n         *\n         * @method splunkjs.Service.ConfigurationFile\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.ConfigurationStanza(this.service, this.name, props.name, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.ConfigurationFile`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name of the configuration file.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.\n         *\n         * @method splunkjs.Service.ConfigurationFile\n         */\n        init: function(service, name, namespace) {\n            this.name = name;\n            this._super(service, this.path(), namespace);\n        },\n        \n        /**\n         * Creates a stanza in this configuration file.\n         *\n         * @example\n         *\n         *      var file = service.configurations().item(\"props\");\n         *      file.create(\"my_stanza\", function(err, newStanza) {\n         *          console.log(\"CREATED\");\n         *      });\n         *\n         * @param {String} stanzaName A name for this stanza.\n         * @param {Object} values A dictionary of key-value pairs to put in this stanza.\n         * @param {Function} callback A function to call with the created stanza: `(err, createdStanza)`.\n         *\n         * @endpoint configs/conf-{file}\n         * @method splunkjs.Service.ConfigurationFile\n         */\n        create: function(stanzaName, values, callback) {\n            // If someone called us with the default style of (params, callback),\n            // lets make it work\n            if (utils.isObject(stanzaName) && utils.isFunction(values) && !callback) {\n                callback = values;\n                values = stanzaName;\n                stanzaName = values.name;\n            }\n            \n            if (utils.isFunction(values) && !callback) {\n                callback = values;\n                values = {};\n            }\n            \n            values = values || {};\n            values[\"name\"] = stanzaName;\n            \n            return this._super(values, callback);\n        }\n    });\n    \n    /**\n     * Represents a collection of configuration files. You can create and list \n     * configuration files using this collection container, or get a specific file.\n     *\n     * @endpoint properties\n     * @class splunkjs.Service.Configurations\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Configurations = root.Collection.extend({\n        /**\n         * Indicates whether to call `fetch` after an entity has been created. By \n         * default, the entity is not fetched because the endpoint returns\n         * (echoes) the new entity.\n         *\n         * @method splunkjs.Service.Configurations\n         */\n        fetchOnEntityCreation: true,\n        \n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Configurations\n         */\n        path: function() {\n            return Paths.properties;\n        },\n        \n        /**\n         * Creates a local instance of a configuration file.\n         *\n         * @param {Object} props The properties for this configuration file.\n         * @return {splunkjs.Service.ConfigurationFile} A new `splunkjs.Service.ConfigurationFile` instance.\n         *\n         * @method splunkjs.Service.Configurations\n         */\n        instantiateEntity: function(props) {\n            return new root.ConfigurationFile(this.service, props.name, this.namespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Configurations`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Configurations} A new `splunkjs.Service.Configurations` instance.\n         *\n         * @method splunkjs.Service.Configurations\n         */  \n        init: function(service, namespace) {\n            if (!namespace || namespace.owner === \"-\" || namespace.app === \"-\") {\n                throw new Error(\"Configurations requires a non-wildcard owner/app\");\n            }\n            \n            this._super(service, this.path(), namespace);\n        },\n\n        /**\n         * Creates a configuration file.\n         *\n         * @example\n         *\n         *      var configurations = service.configurations();\n         *      configurations.create(\"myprops\", function(err, newFile) {\n         *          console.log(\"CREATED\");\n         *      });\n         *\n         * @param {String} filename A name for this configuration file.\n         * @param {Function} callback A function to call with the new configuration file: `(err, createdFile)`.\n         *\n         * @endpoint properties\n         * @method splunkjs.Service.Configurations\n         */\n        create: function(filename, callback) {\n            // If someone called us with the default style of (params, callback),\n            // lets make it work\n            if (utils.isObject(filename)) {\n                filename = filename[\"__conf\"];\n            }\n            \n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"\", {__conf: filename}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    var entity = new root.ConfigurationFile(that.service, filename);\n                    entity.fetch(function() {\n                        if (req.wasAborted) {\n                            return; // aborted, so ignore\n                        }\n                        else {\n                            callback.apply(null, arguments);\n                        }\n                    });\n                }\n            });\n            \n            return req;\n        }\n    });\n\n    /**\n     * Represents a specific search job. You can perform different operations\n     * on this job, such as reading its status, canceling it, and getting results.\n     *\n     * @endpoint search/jobs/{search_id}\n     * @class splunkjs.Service.Job\n     * @extends splunkjs.Service.Entity\n     */\n    root.Job = root.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Job\n         */\n        path: function() {\n            return Paths.jobs + \"/\" + encodeURIComponent(this.name);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Job`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} sid The search ID for this search job.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.\n         *\n         * @method splunkjs.Service.Job\n         */ \n        init: function(service, sid, namespace) {\n            this.name = sid;\n            this._super(service, this.path(), namespace);\n            this.sid = sid;\n\n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this.cancel         = utils.bind(this, this.cancel);\n            this.disablePreview = utils.bind(this, this.disablePreview);\n            this.enablePreview  = utils.bind(this, this.enablePreview);\n            this.events         = utils.bind(this, this.events);\n            this.finalize       = utils.bind(this, this.finalize);\n            this.pause          = utils.bind(this, this.pause);\n            this.preview        = utils.bind(this, this.preview);\n            this.results        = utils.bind(this, this.results);\n            this.searchlog      = utils.bind(this, this.searchlog);\n            this.setPriority    = utils.bind(this, this.setPriority);\n            this.setTTL         = utils.bind(this, this.setTTL);\n            this.summary        = utils.bind(this, this.summary);\n            this.timeline       = utils.bind(this, this.timeline);\n            this.touch          = utils.bind(this, this.touch);\n            this.unpause        = utils.bind(this, this.unpause);\n        },\n\n        /**\n         * Cancels a search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.cancel(function(err) {\n         *          console.log(\"CANCELLED\");\n         *      });\n         *\n         * @param {Function} callback A function to call when the search is done: `(err)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        cancel: function(callback) {\n            var req = this.post(\"control\", {action: \"cancel\"}, callback);\n            \n            return req;\n        },\n\n        /**\n         * Disables preview generation for a search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.disablePreview(function(err, job) {\n         *          console.log(\"PREVIEW DISABLED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with this search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        disablePreview: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"disablepreview\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n\n        /**\n         * Enables preview generation for a search job. \n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.disablePreview(function(err, job) {\n         *          console.log(\"PREVIEW ENABLED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with this search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        enablePreview: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"enablepreview\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n\n        /**\n         * Returns the events of a search job with given parameters.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.events({count: 10}, function(err, events, job) {\n         *          console.log(\"Fields: \", events.fields);\n         *      });\n         *\n         * @param {Object} params The parameters for retrieving events. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fevents\" target=\"_blank\">GET search/jobs/{search_id}/events</a> endpoint in the REST API documentation.\n         * @param {Function} callback A function to call when the events are retrieved: `(err, events, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/events\n         * @method splunkjs.Service.Job\n         */\n        events: function(params, callback) {\n            callback = callback || function() {};\n            params = params || {};\n            params.output_mode = params.output_mode || \"json_rows\"; \n            \n            var that = this;\n            return this.get(\"events\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Finalizes a search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.finalize(function(err, job) {\n         *          console.log(\"JOB FINALIZED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with the job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        finalize: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"finalize\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Returns an iterator over this search job's events or results.\n         *\n         * @param {String} type One of {\"events\", \"preview\", \"results\"}.\n         * @param {Object} params A dictionary of optional parameters:\n         *    - `pagesize` (_integer_): The number of items to return on each request. Defaults to as many as possible.\n         * @return {Object} An iterator object with a `next(callback)` method, where `callback` is of the form `(err, results, hasMoreResults)`.\n         * \n         * @endpoint search/jobs/{search_id}/results\n         * @method splunkjs.Service.Job\n         */\n        iterator: function(type, params) {\n            return new root.PaginatedEndpointIterator(this[type], params);\n        },\n\n        /**\n         * Pauses a search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.pause(function(err, job) {\n         *          console.log(\"JOB PAUSED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with the job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        pause: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"pause\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n\n        /*\n         * Gets the preview results for a search job with given parameters.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.preview({count: 10}, function(err, results, job) {\n         *          console.log(\"Fields: \", results.fields);\n         *      });\n         *\n         * @param {Object} params The parameters for retrieving preview results. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults_preview\" target=\"_blank\">GET search/jobs/{search_id}/results_preview</a> endpoint in the REST API documentation.\n         * @param {Function} callback A function to call when the preview results are retrieved : `(err, results, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/results_preview\n         * @method splunkjs.Service.Job\n         */\n        preview: function(params, callback) {\n            callback = callback || function() {};\n            params = params || {};\n            params.output_mode = params.output_mode || \"json_rows\"; \n            \n            var that = this;\n            return this.get(\"results_preview\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Gets the results for a search job with given parameters.\n         * \n         * The callback can get `undefined` for its `results` parameter if the\n         * job is not yet done. To avoid this, use the `Job.track()` method to\n         * wait until the job is complete prior to fetching the results with\n         * this method.\n         * \n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.results({count: 10}, function(err, results, job) {\n         *          console.log(\"Fields: \", results.results);\n         *      });\n         *\n         * @param {Object} params The parameters for retrieving search results. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fresults\" target=\"_blank\">GET search/jobs/{search_id}/results</a> endpoint in the REST API documentation.\n         * @param {Function} callback A function to call when the results are retrieved: `(err, results, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/results\n         * @method splunkjs.Service.Job\n         */\n        results: function(params, callback) {\n            callback = callback || function() {};\n            params = params || {};\n            params.output_mode = params.output_mode || \"json_rows\";\n            \n            var that = this;\n            return this.get(\"results\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Gets the search log for this search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.searchlog(function(err, searchlog, job) {\n         *          console.log(searchlog);\n         *      });\n         *\n         * @param {Function} callback A function to call with the search log and job: `(err, searchlog, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/search.log\n         * @method splunkjs.Service.Job\n         */\n        searchlog: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"search.log\", {}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Sets the priority for this search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.setPriority(6, function(err, job) {\n         *          console.log(\"JOB PRIORITY SET\");\n         *      });\n         *\n         * @param {Number} value The priority (an integer between 1-10). A higher value means a higher priority.\n         * @param {Function} callback A function to call with the search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        setPriority: function(value, callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"setpriority\", priority: value}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n\n        /**\n         * Sets the time to live (TTL) for the search job, which is the time before\n         * the search job expires after it has been completed and is still available.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.setTTL(1000, function(err, job) {\n         *          console.log(\"JOB TTL SET\");\n         *      });\n         *\n         * @param {Number} value The time to live, in seconds. \n         * @param {Function} callback A function to call with the search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        setTTL: function(value, callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"setttl\", ttl: value}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n\n        /**\n         * Gets the summary for this search job with the given parameters.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.summary({top_count: 5}, function(err, summary, job) {\n         *          console.log(\"Summary: \", summary);\n         *      });\n         *\n         * @param {Object} params The parameters for retrieving the summary. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Fsummary\" target=\"_blank\">GET search/jobs/{search_id}/summary</a> endpoint in the REST API documentation.\n         * @param {Function} callback A function to call with the summary and search job: `(err, summary, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/summmary\n         * @method splunkjs.Service.Job\n         */\n        summary: function(params, callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"summary\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Gets the timeline for this search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.timeline({time_format: \"%c\"}, function(err, job, timeline) {\n         *          console.log(\"Timeline: \", timeline);\n         *      });\n         *\n         * @param {Object} params The parameters for retrieving the timeline. For a list of available parameters, see the <a href=\"http://docs.splunk.com/Documentation/Splunk/latest/RESTAPI/RESTsearch#GET_search.2Fjobs.2F.7Bsearch_id.7D.2Ftimeline\" target=\"_blank\">GET search/jobs/{search_id}/timeline </a> endpoint in the REST API documentation.\n         * @param {Function} callback A function to call with the timeline and search job: `(err, timeline, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/timeline\n         * @method splunkjs.Service.Job\n         */\n        timeline: function(params, callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            return this.get(\"timeline\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, response.data, that);\n                }\n            });\n        },\n\n        /**\n         * Touches a search job, which means extending the expiration time of \n         * the search to now plus the time to live (TTL).\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.touch(function(err) {\n         *          console.log(\"JOB TOUCHED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with the search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        touch: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"touch\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        },\n        \n        /**\n         * Starts polling the status of this search job, and fires callbacks\n         * upon each status change.\n         * \n         * @param {Object} options A dictionary of optional parameters:\n         *    - `period` (_integer_): The number of milliseconds to wait between each poll. Defaults to 500.\n         * @param {Object|Function} callbacks A dictionary of optional callbacks:\n         *    - `ready`: A function `(job)` invoked when the job's properties first become available.\n         *    - `progress`: A function `(job)` invoked whenever new job properties are available.\n         *    - `done`: A function `(job)` invoked if the job completes successfully. No further polling is done.\n         *    - `failed`: A function `(job)` invoked if the job fails executing on the server. No further polling is done.\n         *    - `error`: A function `(err)` invoked if an error occurs while polling. No further polling is done.\n         * Or, if a function `(job)`, equivalent to passing it as a `done` callback.\n         *\n         * @method splunkjs.Service.Job\n         */\n        track: function(options, callbacks) {\n            var period = options.period || 500; // ms\n            \n            if (utils.isFunction(callbacks)) {\n                callbacks = {\n                    done: callbacks\n                };\n            }\n            \n            var noCallbacksAfterReady = (\n                !callbacks.progress &&\n                !callbacks.done &&\n                !callbacks.failed &&\n                !callbacks.error\n            );\n            \n            callbacks.ready = callbacks.ready || function() {};\n            callbacks.progress = callbacks.progress || function() {};\n            callbacks.done = callbacks.done || function() {};\n            callbacks.failed = callbacks.failed || function() {};\n            callbacks.error = callbacks.error || function() {};\n            \n            // For use by tests only\n            callbacks._preready = callbacks._preready || function() {};\n            callbacks._stoppedAfterReady = callbacks._stoppedAfterReady || function() {};\n            \n            var that = this;\n            var emittedReady = false;\n            var doneLooping = false;\n            Async.whilst(\n                function() { return !doneLooping; },\n                function(nextIteration) {\n                    that.fetch(function(err, job) {\n                        if (err) {\n                            nextIteration(err);\n                            return;\n                        }\n                        \n                        var dispatchState = job.properties().dispatchState;\n                        var notReady = dispatchState === \"QUEUED\" || dispatchState === \"PARSING\";\n                        if (notReady) {\n                            callbacks._preready(job);\n                        }\n                        else {\n                            if (!emittedReady) {\n                                callbacks.ready(job);\n                                emittedReady = true;\n                                \n                                // Optimization: Don't keep polling the job if the\n                                // caller only cares about the `ready` event.\n                                if (noCallbacksAfterReady) {\n                                    callbacks._stoppedAfterReady(job);\n                                    \n                                    doneLooping = true;\n                                    nextIteration();\n                                    return;\n                                }\n                            }\n                            \n                            callbacks.progress(job);\n                            \n                            var props = job.properties();\n                            \n                            if (dispatchState === \"DONE\" && props.isDone) {\n                                callbacks.done(job);\n                                \n                                doneLooping = true;\n                                nextIteration();\n                                return;\n                            }\n                            else if (dispatchState === \"FAILED\" && props.isFailed) {\n                                callbacks.failed(job);\n                                \n                                doneLooping = true;\n                                nextIteration();\n                                return;\n                            }\n                        }\n                        \n                        Async.sleep(period, nextIteration);\n                    });\n                },\n                function(err) {\n                    if (err) {\n                        callbacks.error(err);\n                    }\n                }\n            );\n        },\n\n        /**\n         * Resumes a search job.\n         *\n         * @example\n         *\n         *      var job = service.jobs().item(\"mysid\");\n         *      job.unpause(function(err) {\n         *          console.log(\"JOB UNPAUSED\");\n         *      });\n         *\n         * @param {Function} callback A function to call with the search job: `(err, job)`.\n         *\n         * @endpoint search/jobs/{search_id}/control\n         * @method splunkjs.Service.Job\n         */\n        unpause: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var req = this.post(\"control\", {action: \"unpause\"}, function(err) {\n                callback(err, that);\n            });\n            \n            return req;\n        }\n    });\n\n    /**\n     * Represents a collection of search jobs. You can create and list search \n     * jobs using this collection container, or get a specific search job.\n     *\n     * @endpoint search/jobs\n     * @class splunkjs.Service.Jobs\n     * @extends splunkjs.Service.Collection\n     */  \n    root.Jobs = root.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.Jobs\n         */\n        path: function() {\n            return Paths.jobs;\n        },\n        \n        /**\n         * Creates a local instance of a job.\n         *\n         * @param {Object} props The properties for this new job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         * @return {splunkjs.Service.Job} A new `splunkjs.Service.Job` instance.\n         *\n         * @method splunkjs.Service.Jobs\n         */\n        instantiateEntity: function(props) {\n            var sid = props.content.sid;\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.Job(this.service, sid, entityNamespace);\n        },\n        \n        /**\n         * Constructor for `splunkjs.Service.Jobs`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace Namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @return {splunkjs.Service.Jobs} A new `splunkjs.Service.Jobs` instance.\n         *\n         * @method splunkjs.Service.Jobs\n         */  \n        init: function(service, namespace) {\n            this._super(service, this.path(), namespace);\n\n            // We perform the bindings so that every function works \n            // properly when it is passed as a callback.\n            this.create     = utils.bind(this, this.create);\n        },\n\n        /**\n         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n         *\n         *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n         *      Poll for completion to find out when you can retrieve search results. \n         *\n         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n         * \n         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.\n         *\n         * @param {String} query The search query.\n         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         * @param {Function} callback A function to call with the created job: `(err, createdJob)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service.Jobs\n         */\n        create: function(query, params, callback) {\n            // If someone called us with the default style of (params, callback),\n            // lets make it work\n            if (utils.isObject(query) && utils.isFunction(params) && !callback) {\n                callback = params;\n                params = query;\n                query = params.search;\n            }\n            \n            callback = callback || function() {};\n            params = params || {};\n            params.search = query; \n            \n            if ((params.exec_mode || \"\").toLowerCase() === \"oneshot\") {\n                throw new Error(\"Please use splunkjs.Service.Jobs.oneshotSearch for exec_mode=oneshot\");\n            }\n            \n            if (!params.search) {\n                callback(\"Must provide a query to create a search job\");\n                return;\n            } \n            var that = this;\n            return this.post(\"\", params, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    var job = new root.Job(that.service, response.data.sid, that.namespace);\n                    callback(null, job);\n                }\n            });\n        },\n                \n        /**\n         * Creates a search job with a given search query and optional parameters, including `exec_mode` to specify the type of search:\n         *\n         *    - Use `exec_mode=normal` to return a search job ID immediately (default).\n         *      Poll for completion to find out when you can retrieve search results. \n         *\n         *    - Use `exec_mode=blocking` to return the search job ID when the search has finished.\n         * \n         * To run a oneshot search, which does not create a job but rather returns the search results, use `Service.Jobs.oneshotSearch`.\n         *\n         * @example\n         *\n         *      var jobs = service.jobs();\n         *      jobs.search(\"search ERROR\", {id: \"myjob_123\"}, function(err, newJob) {\n         *          console.log(\"CREATED\": newJob.sid);\n         *      });\n         *\n         * @param {String} query The search query.\n         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n         * @param {Function} callback A function to call with the new search job: `(err, createdJob)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service.Jobs\n         */\n        search: function(query, params, callback) {\n            return this.create(query, params, callback);\n        },\n                \n        /**\n         * Creates a oneshot search from a given search query and parameters.\n         *\n         * @example\n         *\n         *      var jobs = service.jobs();\n         *      jobs.oneshotSearch(\"search ERROR\", {id: \"myjob_123\"}, function(err, results) {\n         *          console.log(\"RESULT FIELDS\": results.fields);\n         *      });\n         *\n         * @param {String} query The search query. \n         * @param {Object} params A dictionary of properties for the search:\n         *    - `output_mode` (_string_): Specifies the output format of the results (XML, JSON, or CSV).\n         *    - `earliest_time` (_string_): Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n         *    - `latest_time` (_string_): Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.\n         *    - `rf` (_string_): Specifies one or more fields to add to the search.\n         * @param {Function} callback A function to call with the results of the search: `(err, results)`.\n         *\n         * @endpoint search/jobs\n         * @method splunkjs.Service.Jobs\n         */\n        oneshotSearch: function(query, params, callback) {\n            // If someone called us with the default style of (params, callback),\n            // lets make it work\n            if (utils.isObject(query) && utils.isFunction(params) && !callback) {\n                callback = params;\n                params = query;\n                query = params.search;\n            }\n            \n            callback = callback || function() {};\n            params = params || {};\n            params.search = query; \n            params.exec_mode = \"oneshot\";\n            \n            if (!params.search) {\n                callback(\"Must provide a query to create a search job\");\n            }\n            \n            var outputMode = params.output_mode || \"json_rows\";\n            \n            var path = this.qualifiedPath;\n            var method = \"POST\";\n            var headers = {};\n            var post = params;\n            var get = {output_mode: outputMode};\n            var body = null;\n            \n            var req = this.service.request(\n                path, \n                method, \n                get, \n                post, \n                body, \n                headers, \n                function(err, response) {\n                    if (err) {\n                        callback(err);\n                    } \n                    else {\n                        callback(null, response.data);\n                    }\n                }\n            );\n            \n            return req;\n        }\n    });\n     \n    /**\n     * Represents a field of a data model object.\n     * This is a helper class for `DataModelCalculation`\n     * and `DataModelObject`.\n     *\n     * Has these properties:\n     *    - `fieldName` (_string_): The name of this field.\n     *    - `displayName` (_string_):  A human readable name for this field.\n     *    - `type` (_string_): The type of this field.\n     *    - `multivalued` (_boolean_): Whether this field is multivalued.\n     *    - `required` (_boolean_): Whether this field is required.\n     *    - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.\n     *    - `editable` (_boolean_): Whether this field can be edited.\n     *    - `comment` (_string_): A comment for this field, or `null` if there isn't one.\n     *    - `fieldSearch` (_string_): A search query fragment for this field.\n     *    - `lineage` (_array_): An array of strings of the lineage of the data model\n     *          on which this field is defined.\n     *    - `owner` (_string_): The name of the data model object on which this field is defined.\n     *\n     * Possible types for a data model field:\n     *    - `string`\n     *    - `boolean`\n     *    - `number`\n     *    - `timestamp`\n     *    - `objectCount`\n     *    - `childCount`\n     *    - `ipv4`\n     *\n     * @class splunkjs.Service.DataModelField\n     */\n    root.DataModelField = Class.extend({\n        _types: [ \"string\", \"number\", \"timestamp\", \"objectCount\", \"childCount\", \"ipv4\", \"boolean\"],\n\n        /**\n         * Constructor for a data model field.\n         * SDK users are not expected to invoke this constructor directly.\n         *\n         * @constructor\n         * @param {Object} props A dictionary of properties to set:\n         *     - `fieldName` (_string_): The name of this field.\n         *     - `displayName` (_string_): A human readable name for this field.\n         *     - `type` (_string_): The type of this field, see valid types in class docs.\n         *     - `multivalue` (_boolean_): Whether this field is multivalued.\n         *     - `required` (_boolean_): Whether this field is required on events in the object\n         *     - `hidden` (_boolean_): Whether this field should be displayed in a data model UI.\n         *     - `editable` (_boolean_): Whether this field can be edited.\n         *     - `comment` (_string_): A comment for this field, or `null` if there isn't one.\n         *     - `fieldSearch` (_string_): A search query fragment for this field.\n         *     - `lineage` (_string_): The lineage of the data model object on which this field\n         *          is defined, items are delimited by a dot. This is converted into an array of\n         *          strings upon construction.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        init: function(props) {\n            props = props || {};\n            props.owner = props.owner || \"\";\n\n            this.name           = props.fieldName;\n            this.displayName    = props.displayName;\n            this.type           = props.type;\n            this.multivalued    = props.multivalue;\n            this.required       = props.required;\n            this.hidden         = props.hidden;\n            this.editable       = props.editable;\n            this.comment        = props.comment || null;\n            this.fieldSearch    = props.fieldSearch;\n            this.lineage        = props.owner.split(\".\");\n            this.owner          = this.lineage[this.lineage.length - 1];\n        },\n\n        /**\n         * Is this data model field of type string?\n         *\n         * @return {Boolean} True if this data model field is of type string.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isString: function() {\n            return \"string\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type number?\n         *\n         * @return {Boolean} True if this data model field is of type number.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isNumber: function() {\n            return \"number\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type timestamp?\n         *\n         * @return {Boolean} True if this data model field is of type timestamp.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isTimestamp: function() {\n            return \"timestamp\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type object count?\n         *\n         * @return {Boolean} True if this data model field is of type object count.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isObjectcount: function() {\n            return \"objectCount\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type child count?\n         *\n         * @return {Boolean} True if this data model field is of type child count.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isChildcount: function() {\n            return \"childCount\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type ipv4?\n         *\n         * @return {Boolean} True if this data model field is of type ipv4.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isIPv4: function() {\n            return \"ipv4\" === this.type;\n        },\n\n        /**\n         * Is this data model field of type boolean?\n         *\n         * @return {Boolean} True if this data model field is of type boolean.\n         *\n         * @method splunkjs.Service.DataModelField\n         */\n        isBoolean: function() {\n            return \"boolean\" === this.type;\n        }\n    });\n    \n    /**\n     * Represents a constraint on a `DataModelObject` or a `DataModelField`.\n     *\n     * Has these properties:\n     *    - `query` (_string_): The search query defining this data model constraint.\n     *    - `lineage` (_array_): The lineage of this data model constraint.\n     *    - `owner` (_string_): The name of the data model object that owns\n     *          this data model constraint.\n     *\n     * @class splunkjs.Service.DataModelConstraint\n     */\n    root.DataModelConstraint = Class.extend({\n        /**\n         * Constructor for a data model constraint.\n         * SDK users are not expected to invoke this constructor directly.\n         *\n         * @constructor\n         * @param {Object} props A dictionary of properties to set:\n         *     - `search` (_string_): The Splunk search query this constraint specifies.\n         *     - `owner` (_string_): The lineage of the data model object that owns this\n         *          constraint, items are delimited by a dot. This is converted into\n         *          an array of strings upon construction.\n         *\n         * @method splunkjs.Service.DataModelConstraint\n         */\n        init: function(props) {\n            props = props || {};\n            props.owner = props.owner || \"\";\n\n            this.query   = props.search;\n            this.lineage = props.owner.split(\".\");\n            this.owner   = this.lineage[this.lineage.length - 1];\n        }\n    });\n    \n    /**\n     * Used for specifying a calculation on a `DataModelObject`.\n     *\n     * Has these properties:\n     *    - `id` (_string_): The ID for this data model calculation.\n     *    - `type` (_string_): The type of this data model calculation.\n     *    - `comment` (_string_|_null_): The comment for this data model calculation, or `null`.\n     *    - `editable` (_boolean_): True if this calculation can be edited, false otherwise.\n     *    - `lineage` (_array_): The lineage of the data model object on which this calculation\n     *          is defined in an array of strings.\n     *    - `owner` (_string_): The data model that this calculation belongs to.\n     *    - `outputFields` (_array_): The fields output by this calculation.\n     *\n     * The Rex and Eval types have an additional property:\n     *    - `expression` (_string_): The expression to use for this calculation.\n     *\n     * The Rex and GeoIP types have an additional property:\n     *    - `inputField` (_string_): The field to use for calculation.\n     *\n     * The Lookup type has additional properties:\n     *    - `lookupName` (_string_): The name of the lookup to perform.\n     *    - `inputFieldMappings` (_object_): The mappings from fields in the events to fields in the lookup.\n     *\n     * Valid types of calculations are:\n     *    - `Lookup`\n     *    - `Eval`\n     *    - `GeoIP`\n     *    - `Rex`\n     *\n     * @class splunkjs.Service.DataModelCalculation\n     */\n    root.DataModelCalculation = Class.extend({\n        _types: [\"Lookup\", \"Eval\", \"GeoIP\", \"Rex\"],\n\n        /**\n         * Constructor for a data model calculation.\n         * SDK users are not expected to invoke this constructor directly.\n         *\n         * @constructor\n         * @param {Object} props A dictionary of properties to set:\n         *     - `calculationID` (_string_): The ID of this calculation.\n         *     - `calculationType` (_string_): The type of this calculation, see class docs for valid types.\n         *     - `editable` (_boolean_): Whether this calculation can be edited.\n         *     - `comment` (_string_): A comment for this calculation, or `null` if there isn't one.\n         *     - `owner` (_string_): The lineage of the data model object on which this calculation\n         *          is defined, items are delimited by a dot. This is converted into an array of\n         *          strings upon construction.\n         *     - `outputFields` (_array_): An array of the fields this calculation generates.\n         *     - `expression` (_string_): The expression to use for this calculation; exclusive to `Eval` and `Rex` calculations (optional)\n         *     - `inputField` (_string_): The field to use for calculation; exclusive to `GeoIP` and `Rex` calculations (optional)\n         *     - `lookupName` (_string_): The name of the lookup to perform; exclusive to `Lookup` calculations (optional)\n         *     - `inputFieldMappings` (_array_): One element array containing an object with the mappings from fields in the events to fields\n         *         in the lookup; exclusive to `Lookup` calculations (optional)\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        init: function(props) {\n            props = props || {};\n            props.owner = props.owner || \"\";\n\n            this.id             = props.calculationID;\n            this.type           = props.calculationType;\n            this.comment        = props.comment || null;\n            this.editable       = props.editable;\n            this.lineage        = props.owner.split(\".\");\n            this.owner          = this.lineage[this.lineage.length - 1];\n\n            this.outputFields = [];\n            for (var i = 0; i < props.outputFields.length; i++) {\n                this.outputFields[props.outputFields[i].fieldName] = new root.DataModelField(props.outputFields[i]);\n            }\n\n            if (\"Eval\" === this.type || \"Rex\" === this.type) {\n                this.expression = props.expression;\n            }\n            if (\"GeoIP\" === this.type || \"Rex\" === this.type) {\n                this.inputField = props.inputField;\n            }\n            if (\"Lookup\" === this.type) {\n                this.lookupName = props.lookupName;\n                this.inputFieldMappings = props.lookupInputs[0];\n            }\n        },\n\n        /**\n         * Returns an array of strings of output field names.\n         *\n         * @return {Array} An array of strings of output field names.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        outputFieldNames: function() {\n            return Object.keys(this.outputFields);\n        },\n\n        /**\n         * Is this data model calculation editable?\n         *\n         * @return {Boolean} True if this data model calculation is editable.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        isEditable: function() {\n            return !!this.editable;\n        },\n\n        /**\n         * Is this data model calculation of type lookup?\n         *\n         * @return {Boolean} True if this data model calculation is of type lookup.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        isLookup: function() {\n            return \"Lookup\" === this.type;\n        },\n\n        /**\n         * Is this data model calculation of type eval?\n         *\n         * @return {Boolean} True if this data model calculation is of type eval.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        isEval: function() {\n            return \"Eval\" === this.type;\n        },\n        \n        /**\n         * Is this data model calculation of type Rex?\n         *\n         * @return {Boolean} True if this data model calculation is of type Rex.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        isRex: function() {\n            return \"Rex\" === this.type;\n        },\n\n        /**\n         * Is this data model calculation of type GeoIP?\n         *\n         * @return {Boolean} True if this data model calculation is of type GeoIP.\n         *\n         * @method splunkjs.Service.DataModelCalculation\n         */\n        isGeoIP: function() {\n            return \"GeoIP\" === this.type;\n        }\n    });\n    \n    /**\n     * Pivot represents data about a pivot report returned by the Splunk Server.\n     *\n     * Has these properties:\n     *    - `service` (_splunkjs.Service_): A `Service` instance.\n     *    - `search` (_string_): The search string for running the pivot report.\n     *    - `drilldownSearch` (_string_): The search for running this pivot report using drilldown.\n     *    - `openInSearch` (_string_): Equivalent to search parameter, but listed more simply.\n     *    - `prettyQuery` (_string_): Equivalent to `openInSearch`.\n     *    - `pivotSearch` (_string_): A pivot search command based on the named data model.\n     *    - `tstatsSearch` (_string_): The search for running this pivot report using tstats.\n     *\n     * @class splunkjs.Service.Pivot\n     */\n    root.Pivot = Class.extend({\n        /**\n         * Constructor for a pivot.\n         * SDK users are not expected to invoke this constructor directly.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} props A dictionary of properties to set:\n         *    - `search` (_string_): The search string for running the pivot report.\n         *    - `drilldown_search` (_string_): The search for running this pivot report using drilldown.\n         *    - `open_in_search` (_string_): Equivalent to search parameter, but listed more simply.\n         *    - `pivot_search` (_string_): A pivot search command based on the named data model.\n         *    - `tstats_search` (_string_|_null_): The search for running this pivot report using tstats, null if acceleration is disabled.\n         *\n         * @method splunkjs.Service.Pivot\n         */\n        init: function(service, props) {\n            this.service = service;\n            this.search = props.search;\n            this.drilldownSearch = props.drilldown_search;\n            this.prettyQuery = this.openInSearch = props.open_in_search;\n            this.pivotSearch = props.pivot_search;\n            this.tstatsSearch = props.tstats_search || null;\n\n            this.run = utils.bind(this, this.run);\n        },\n\n        /**\n         * Starts a search job running this pivot, accelerated if possible.\n         *\n         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n         * @param {Function} callback A function to call when done creating the search job: `(err, job)`.\n         * @method splunkjs.Service.Pivot\n         */\n        run: function(args, callback) {\n            if (utils.isUndefined(callback)) {\n                callback = args;\n                args = {};\n            }\n            if (!args || Object.keys(args).length === 0) {\n                args = {};\n            }\n\n            // If tstats is undefined, use pivotSearch (try to run an accelerated search if possible)\n            this.service.search(this.tstatsSearch || this.pivotSearch, args, callback);\n        }\n    });\n\n    /**\n     * PivotSpecification represents a pivot to be done on a particular data model object.\n     * The user creates a PivotSpecification on some data model object, adds filters, row splits,\n     * column splits, and cell values, then calls the pivot method to query splunkd and\n     * get a set of SPL queries corresponding to this specification.\n     *\n     * Call the `pivot` method to query Splunk for SPL queries corresponding to this pivot.\n     *\n     * This class supports a fluent API, each function except `init`, `toJsonObject` & `pivot`\n     * return the modified `splunkjs.Service.PivotSpecification` instance.\n     *\n     * @example\n     *     service.dataModels().fetch(function(err, dataModels) {\n     *         var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n     *         var pivotSpecification = searches.createPivotSpecification();\n     *         pivotSpecification\n     *             .addRowSplit(\"user\", \"Executing user\")\n     *             .addRangeColumnSplit(\"exec_time\", {limit: 4})\n     *             .addCellValue(\"search\", \"Search Query\", \"values\")\n     *             .pivot(function(err, pivot) {\n     *                 console.log(\"Got a Pivot object from the Splunk server!\");\n     *             });\n     *     });\n     *\n     * Has these properties:\n     *    - `dataModelObject` (_splunkjs.Service.DataModelObject_): The `DataModelObject` from which\n     *        this `PivotSpecification` was created.\n     *    - `columns` (_array_): The column splits on this `PivotSpecification`.\n     *    - `rows` (_array_): The row splits on this `PivotSpecification`.\n     *    - `filters` (_array_): The filters on this `PivotSpecification`.\n     *    - `cells` (_array_): The cell aggregations for this`PivotSpecification`.\n     *    - `accelerationNamespace` (_string_|_null_): The name of the `DataModel` that owns the `DataModelObject`\n     *        on which this `PivotSpecification` was created if the `DataModel` is accelerated. Alternatively,\n     *        you can set this property manually to the sid of an acceleration job in the format `sid=<sid>`.\n     *\n     * Valid comparison types are:\n     *    - `boolean`\n     *    - `string`\n     *    - `number`\n     *    - `ipv4`\n     *\n     * Valid boolean comparisons are:\n     *    - `=`\n     *    - `is`\n     *    - `isNull`\n     *    - `isNotNull`\n     *\n     * Valid string comparisons are:\n     *    - `=`\n     *    - `is`\n     *    - `isNull`\n     *    - `isNotNull`\n     *    - `contains`\n     *    - `doesNotContain`\n     *    - `startsWith`\n     *    - `endsWith`\n     *    - `regex`\n     *\n     * Valid number comparisons are:\n     *    - `=`\n     *    - `!=`\n     *    - `<`\n     *    - `>`\n     *    - `<=`\n     *    - `>=`\n     *    - `is`\n     *    - `isNull`\n     *    - `isNotNull`\n     *\n     * Valid ipv4 comparisons are:\n     *    - `is`\n     *    - `isNull`\n     *    - `isNotNull`\n     *    - `contains`\n     *    - `doesNotContain`\n     *    - `startsWith`\n     *\n     * Valid binning values are:\n     *    - `auto`\n     *    - `year`\n     *    - `month`\n     *    - `day`\n     *    - `hour`\n     *    - `minute`\n     *    - `second`\n     *\n     * Valid sort directions are:\n     *    - `ASCENDING`\n     *    - `DECENDING`\n     *    - `DEFAULT`\n     *\n     * Valid stats functions are:\n     *    - `list`\n     *    - `values`\n     *    - `first`\n     *    - `last`\n     *    - `count`\n     *    - `dc`\n     *    - `sum`\n     *    - `average`\n     *    - `max`\n     *    - `min`\n     *    - `stdev`\n     *    - `duration`\n     *    - `earliest`\n     *    - `latest`\n     *\n     * @class splunkjs.Service.PivotSpecification\n     */\n    root.PivotSpecification = Class.extend({\n        _comparisons: {\n            boolean: [\"=\", \"is\", \"isNull\", \"isNotNull\"],\n            string: [\"=\", \"is\", \"isNull\", \"isNotNull\", \"contains\", \"doesNotContain\", \"startsWith\", \"endsWith\", \"regex\"],\n            number: [\"=\", \"!=\", \"<\", \">\", \"<=\", \">=\", \"is\", \"isNull\", \"isNotNull\"],\n            ipv4: [\"is\", \"isNull\", \"isNotNull\", \"contains\", \"doesNotContain\", \"startsWith\"]\n        },\n        _binning: [\"auto\", \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\"],\n        _sortDirection: [\"ASCENDING\", \"DESCENDING\", \"DEFAULT\"],\n        _statsFunctions: [\"list\", \"values\", \"first\", \"last\", \"count\", \"dc\", \"sum\", \"average\", \"max\", \"min\", \"stdev\", \"duration\", \"earliest\", \"latest\"],\n\n        /**\n         * Constructor for a pivot specification.\n         *\n         * @constructor\n         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        init: function(dataModelObject) {\n            this.dataModelObject = dataModelObject;\n            this.columns = [];\n            this.rows = [];\n            this.filters = [];\n            this.cells = [];\n\n            this.accelerationNamespace = dataModelObject.dataModel.isAccelerated() ? \n                dataModelObject.dataModel.name : null;\n\n            this.run   = utils.bind(this, this.run);\n            this.pivot = utils.bind(this, this.pivot);\n        },\n        \n        /**\n         * Set the acceleration cache for this pivot specification to a job,\n         * usually generated by createLocalAccelerationJob on a DataModelObject\n         * instance, as the acceleration cache for this pivot specification.\n         *\n         * @param {String|splunkjs.Service.Job} sid The sid of an acceleration job,\n         *     or, a `splunkjs.Service.Job` instance.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        setAccelerationJob: function(sid) {\n            // If a search object is passed in, get its sid\n            if (sid && sid instanceof Service.Job) {\n                sid = sid.sid;\n            }\n            \n            if (!sid) {\n                throw new Error(\"Sid to use for acceleration must not be null.\");\n            }\n\n            this.accelerationNamespace = \"sid=\" + sid;\n            return this;\n        },\n\n        /**\n         * Add a filter on a boolean valued field. The filter will be a constraint of the form\n         * `field `comparison` compareTo`, for example: `is_remote = false`.\n         *\n         * @param {String} fieldName The name of field to filter on\n         * @param {String} comparisonType The type of comparison, see class docs for valid types.\n         * @param {String} comparisonOp The comparison, see class docs for valid comparisons, based on type.\n         * @param {String} compareTo The value to compare the field to.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addFilter: function(fieldName, comparisonType, comparisonOp, compareTo) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Cannot add filter on a nonexistent field.\");\n            }\n            if (comparisonType !== this.dataModelObject.fieldByName(fieldName).type) {\n                throw new Error(\n                    \"Cannot add \" + comparisonType +  \n                    \" filter on \" + fieldName + \n                    \" because it is of type \" +\n                    this.dataModelObject.fieldByName(fieldName).type);\n            }\n            if (!utils.contains(this._comparisons[comparisonType], comparisonOp)) {\n                throw new Error(\n                    \"Cannot add \" + comparisonType + \n                    \" filter because \" + comparisonOp +\n                    \" is not a valid comparison operator\");\n            }\n\n            var ret = {\n                fieldName: fieldName,\n                owner: this.dataModelObject.fieldByName(fieldName).lineage.join(\".\"),\n                type: comparisonType\n            };\n            // These fields are type dependent\n            if (utils.contains([\"boolean\", \"string\", \"ipv4\", \"number\"], ret.type)) {\n                ret.rule = {\n                    comparator: comparisonOp,\n                    compareTo: compareTo\n                };\n            }\n            this.filters.push(ret);\n    \n            return this;\n        },\n\n        /**\n         * Add a limit on the events shown in a pivot by sorting them according to some field, then taking\n         * the specified number from the beginning or end of the list.\n         *\n         * @param {String} fieldName The name of field to filter on.\n         * @param {String} sortAttribute The name of the field to use for sorting.\n         * @param {String} sortDirection The direction to sort events, see class docs for valid types.\n         * @param {String} limit The number of values from the sorted list to allow through this filter.\n         * @param {String} statsFunction The stats function to use for aggregation before sorting, see class docs for valid types.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addLimitFilter: function(fieldName, sortAttribute, sortDirection, limit, statsFunction) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Cannot add limit filter on a nonexistent field.\");\n            }\n\n            var f = this.dataModelObject.fieldByName(fieldName);\n\n            if (!utils.contains([\"string\", \"number\", \"objectCount\"], f.type)) {\n                throw new Error(\"Cannot add limit filter on \" + fieldName + \" because it is of type \" + f.type);\n            }\n\n            if (\"string\" === f.type && !utils.contains([\"count\", \"dc\"], statsFunction)) {\n                throw new Error(\"Stats function for fields of type string must be COUNT or DISTINCT_COUNT; found \" +\n                    statsFunction);\n            }\n\n            if (\"number\" === f.type && !utils.contains([\"count\", \"dc\", \"average\", \"sum\"], statsFunction)) {\n                throw new Error(\"Stats function for fields of type number must be one of COUNT, DISTINCT_COUNT, SUM, or AVERAGE; found \" +\n                    statsFunction);\n            }\n\n            if (\"objectCount\" === f.type && !utils.contains([\"count\"], statsFunction)) {\n                throw new Error(\"Stats function for fields of type object count must be COUNT; found \" + statsFunction);\n            }\n\n            var filter = {\n                fieldName: fieldName,\n                owner: f.lineage.join(\".\"),\n                type: f.type,\n                attributeName: sortAttribute,\n                attributeOwner: this.dataModelObject.fieldByName(sortAttribute).lineage.join(\".\"),\n                sortDirection: sortDirection,\n                limitAmount: limit,\n                statsFn: statsFunction\n            };\n            // Assumed \"highest\" is preferred for when sortDirection is \"DEFAULT\"\n            filter.limitType = \"ASCENDING\" === sortDirection ? \"lowest\" : \"highest\";\n            this.filters.push(filter);\n\n            return this;\n        },\n\n        /**\n         * Add a row split on a numeric or string valued field, splitting on each distinct value of the field.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @param {String} label A human readable name for this set of rows.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addRowSplit: function(fieldName, label) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (!utils.contains([\"number\", \"string\"], f.type)) {\n                throw new Error(\"Field was of type \" + f.type + \", expected number or string.\");\n            }\n\n            var row = {\n                fieldName: fieldName,\n                owner: f.owner,\n                type: f.type,\n                label: label\n            };\n\n            if (\"number\" === f.type) {\n                row.display = \"all\";\n            }\n\n            this.rows.push(row);\n\n            return this;\n        },\n\n        /**\n         * Add a row split on a numeric field, splitting into numeric ranges.\n         *\n         * This split generates bins with edges equivalent to the\n         * classic loop 'for i in <start> to <end> by <step>' but with a maximum\n         * number of bins <limit>. This dispatches to the stats and xyseries search commands.\n         * See their documentation for more details.\n         *\n         * @param {String} fieldName The field to split on.\n         * @param {String} label A human readable name for this set of rows.\n         * @param {Object} options An optional dictionary of collection filtering and pagination options:\n         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.\n         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.\n         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.\n         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addRangeRowSplit: function(field, label, ranges) {\n            if (!this.dataModelObject.hasField(field)) {\n                throw new Error(\"Did not find field \" + field);\n            }\n            var f = this.dataModelObject.fieldByName(field);\n            if (\"number\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected number.\");\n            }\n            var updateRanges = {};\n            if (!utils.isUndefined(ranges.start) && ranges.start !== null) {\n                updateRanges.start = ranges.start;\n            }\n            if (!utils.isUndefined(ranges.end) && ranges.end !== null) {\n                updateRanges.end = ranges.end;\n            }\n            if (!utils.isUndefined(ranges.step) && ranges.step !== null) {\n                updateRanges.size = ranges.step;\n            }\n            if (!utils.isUndefined(ranges.limit) && ranges.limit !== null) {\n                updateRanges.maxNumberOf = ranges.limit;\n            }\n\n            this.rows.push({\n                fieldName: field,\n                owner: f.owner,\n                type: f.type,\n                label: label,\n                display: \"ranges\",\n                ranges: updateRanges\n            });\n\n            return this;\n        },\n\n        /**\n         * Add a row split on a boolean valued field.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @param {String} label A human readable name for this set of rows.\n         * @param {String} trueDisplayValue A string to display in the true valued row label.\n         * @param {String} falseDisplayValue A string to display in the false valued row label.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addBooleanRowSplit: function(field, label, trueDisplayValue, falseDisplayValue) {\n            if (!this.dataModelObject.fieldByName(field)) {\n                throw new Error(\"Did not find field \" + field);\n            }\n            var f = this.dataModelObject.fieldByName(field);\n            if (\"boolean\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected boolean.\");\n            }\n\n            this.rows.push({\n                fieldName: field,\n                owner: f.owner,\n                type: f.type,\n                label: label,\n                trueLabel: trueDisplayValue,\n                falseLabel: falseDisplayValue\n            });\n\n            return this;\n        },\n\n        /**\n         * Add a row split on a timestamp valued field, binned by the specified bucket size.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @param {String} label A human readable name for this set of rows.\n         * @param {String} binning The size of bins to use, see class docs for valid types.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addTimestampRowSplit: function(field, label, binning) {\n            if (!this.dataModelObject.hasField(field)) {\n                throw new Error(\"Did not find field \" + field);\n            }\n            var f = this.dataModelObject.fieldByName(field);\n            if (\"timestamp\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected timestamp.\");\n            }\n            if (!utils.contains(this._binning, binning)) {\n                throw new Error(\"Invalid binning \" + binning + \" found. Valid values are: \" + this._binning.join(\", \"));\n            }\n\n            this.rows.push({\n                fieldName: field,\n                owner: f.owner,\n                type: f.type,\n                label: label,\n                period: binning\n            });\n\n            return this;            \n        },\n        \n        /**\n         * Add a column split on a string or number valued field, producing a column for\n         * each distinct value of the field.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addColumnSplit: function(fieldName) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (!utils.contains([\"number\", \"string\"], f.type)) {\n                throw new Error(\"Field was of type \" + f.type + \", expected number or string.\");\n            }\n\n            var col = {\n                fieldName: fieldName,\n                owner: f.owner,\n                type: f.type\n            };\n\n            if (\"number\" === f.type) {\n                col.display = \"all\";\n            }\n\n            this.columns.push(col);\n\n            return this;\n        },\n\n        /**\n         * Add a column split on a numeric field, splitting the values into ranges.\n         *\n         * @param {String} fieldName The field to split on.\n         * @param {Object} options An optional dictionary of collection filtering and pagination options:\n         *    - `start` (_integer_): The value of the start of the first range, or null to take the lowest value in the events.\n         *    - `end` (_integer_): The value for the end of the last range, or null to take the highest value in the events.\n         *    - `step` (_integer_): The the width of each range, or null to have Splunk calculate it.\n         *    - `limit` (_integer_): The maximum number of ranges to split into, or null for no limit.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addRangeColumnSplit: function(fieldName, ranges) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (\"number\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected number.\");\n            }\n\n            // In Splunk 6.0.1.1, data models incorrectly expect strings for these fields\n            // instead of numbers. In 6.1, this is fixed and both are accepted.\n            var updatedRanges = {};\n            if (!utils.isUndefined(ranges.start) && ranges.start !== null) {\n                updatedRanges.start = ranges.start;\n            }\n            if (!utils.isUndefined(ranges.end) && ranges.end !== null) {\n                updatedRanges.end = ranges.end;\n            }\n            if (!utils.isUndefined(ranges.step) && ranges.step !== null) {\n                updatedRanges.size = ranges.step;\n            }\n            if (!utils.isUndefined(ranges.limit) && ranges.limit !== null) {\n                updatedRanges.maxNumberOf = ranges.limit;\n            }\n\n            this.columns.push({\n                fieldName: fieldName,\n                owner: f.owner,\n                type: f.type,\n                display: \"ranges\",\n                ranges: updatedRanges\n            });\n\n            return this;\n        },\n        \n        /**\n         * Add a column split on a boolean valued field.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @param {String} trueDisplayValue A string to display in the true valued column label.\n         * @param {String} falseDisplayValue A string to display in the false valued column label.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addBooleanColumnSplit: function(fieldName, trueDisplayValue, falseDisplayValue) {\n            if (!this.dataModelObject.fieldByName(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (\"boolean\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected boolean.\");\n            }\n\n            this.columns.push({\n                fieldName: fieldName,\n                owner: f.owner,\n                type: f.type,\n                trueLabel: trueDisplayValue,\n                falseLabel: falseDisplayValue\n            });\n\n            return this;\n        },\n        \n        /**\n         * Add a column split on a timestamp valued field, binned by the specified bucket size.\n         *\n         * @param {String} fieldName The name of field to split on.\n         * @param {String} binning The size of bins to use, see class docs for valid types.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addTimestampColumnSplit: function(field, binning) {\n            if (!this.dataModelObject.hasField(field)) {\n                throw new Error(\"Did not find field \" + field);\n            }\n            var f = this.dataModelObject.fieldByName(field);\n            if (\"timestamp\" !== f.type) {\n                throw new Error(\"Field was of type \" + f.type + \", expected timestamp.\");\n            }\n            if (!utils.contains(this._binning, binning)) {\n                throw new Error(\"Invalid binning \" + binning + \" found. Valid values are: \" + this._binning.join(\", \"));\n            }\n\n            this.columns.push({\n                fieldName: field,\n                owner: f.owner,\n                type: f.type,\n                period: binning\n            });\n\n            return this;            \n        },\n        \n        /**\n         * Add an aggregate to each cell of the pivot.\n         *\n         * @param {String} fieldName The name of field to aggregate.\n         * @param {String} label a human readable name for this aggregate.\n         * @param {String} statsFunction The function to use for aggregation, see class docs for valid stats functions.\n         * @return {splunkjs.Service.PivotSpecification} The updated pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        addCellValue: function(fieldName, label, statsFunction) {\n            if (!this.dataModelObject.hasField(fieldName)) {\n                throw new Error(\"Did not find field \" + fieldName);\n            }\n\n            var f = this.dataModelObject.fieldByName(fieldName);\n            if (utils.contains([\"string\", \"ipv4\"], f.type) &&\n                !utils.contains([\n                    \"list\",\n                    \"values\",\n                    \"first\",\n                    \"last\",\n                    \"count\",\n                    \"dc\"], statsFunction)\n                ) {\n                throw new Error(\"Stats function on string and IPv4 fields must be one of:\" +\n                    \" list, distinct_values, first, last, count, or distinct_count; found \" +\n                    statsFunction);\n            }\n            else if (\"number\" === f.type && \n                !utils.contains([\n                    \"sum\",\n                    \"count\",\n                    \"average\",\n                    \"min\",\n                    \"max\",\n                    \"stdev\",\n                    \"list\",\n                    \"values\"\n                    ], statsFunction)\n                ) {\n                throw new Error(\"Stats function on number field must be must be one of:\" +\n                    \" sum, count, average, max, min, stdev, list, or distinct_values; found \" +\n                    statsFunction\n                    );\n            }\n            else if (\"timestamp\" === f.type &&\n                !utils.contains([\n                    \"duration\",\n                    \"earliest\",\n                    \"latest\",\n                    \"list\",\n                    \"values\"\n                    ], statsFunction)\n                ) {\n                throw new Error(\"Stats function on timestamp field must be one of:\" +\n                    \" duration, earliest, latest, list, or distinct values; found \" +\n                    statsFunction\n                    );\n            }\n            else if (utils.contains([\"objectCount\", \"childCount\"], f.type) &&\n                \"count\" !== statsFunction\n                ) {\n                throw new Error(\"Stats function on childcount and objectcount fields must be count; \" +\n                    \"found \" + statsFunction);\n            }\n            else if (\"boolean\" === f.type) {\n                throw new Error(\"Cannot use boolean valued fields as cell values.\");\n            }\n\n            this.cells.push({\n                fieldName: fieldName,\n                owner: f.lineage.join(\".\"),\n                type: f.type,\n                label: label,\n                sparkline: false, // Not properly implemented in core yet.\n                value: statsFunction\n            });\n\n            return this;\n        },\n        \n        /**\n         * Returns a JSON ready object representation of this pivot specification.\n         *\n         * @return {Object} The JSON ready object representation of this pivot specification.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        toJsonObject: function() {\n            return {\n                dataModel: this.dataModelObject.dataModel.name,\n                baseClass: this.dataModelObject.name,\n                rows: this.rows,\n                columns: this.columns,\n                cells: this.cells,\n                filters: this.filters\n            };\n        },\n\n        /**\n         * Query Splunk for SPL queries corresponding to a pivot report\n         * for this data model, defined by this `PivotSpecification`.\n         *\n         * @example\n         *\n         *      service.dataModels().fetch(function(err, dataModels) {\n         *          var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n         *          var pivotSpec = searches.createPivotSpecification();\n         *          // Use of the fluent API\n         *          pivotSpec.addRowSplit(\"user\", \"Executing user\")\n         *              .addRangeColumnSplit(\"exec_time\", {start: 0, end: 12, step: 5, limit: 4})\n         *              .addCellValue(\"search\", \"Search Query\", \"values\")\n         *              .pivot(function(pivotErr, pivot) {\n         *                  console.log(\"Pivot search is:\", pivot.search);\n         *              });\n         *      });\n         *\n         * @param {Function} callback A function to call when done getting the pivot: `(err, pivot)`.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        pivot: function(callback) {\n            var svc = this.dataModelObject.dataModel.service;\n\n            var args = {\n                pivot_json: JSON.stringify(this.toJsonObject())\n            };\n\n            if (!utils.isUndefined(this.accelerationNamespace)) {\n                args.namespace = this.accelerationNamespace;\n            }\n            \n            return svc.get(Paths.pivot + \"/\" + encodeURIComponent(this.dataModelObject.dataModel.name), args, function(err, response) {\n                if (err) {\n                    callback(new Error(err.data.messages[0].text), response);\n                    return;\n                }\n\n                if (response.data.entry && response.data.entry[0]) {\n                    callback(null, new root.Pivot(svc, response.data.entry[0].content));\n                }\n                else {\n                    callback(new Error(\"Didn't get a Pivot report back from Splunk\"), response);\n                }\n            });\n        },\n\n        /**\n         * Convenience method to wrap up the `PivotSpecification.pivot()` and\n         * `Pivot.run()` function calls.\n         *\n         * Query Splunk for SPL queries corresponding to a pivot report\n         * for this data model, defined by this `PivotSpecification`; then,\n         * starts a search job running this pivot, accelerated if possible.\n         *\n         *      service.dataModels().fetch(function(fetchErr, dataModels) {\n         *          var searches = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n         *          var pivotSpec = searches.createPivotSpecification();\n         *          // Use of the fluent API\n         *          pivotSpec.addRowSplit(\"user\", \"Executing user\")\n         *              .addRangeColumnSplit(\"exec_time\", {start: 0, end: 12, step: 5, limit: 4})\n         *              .addCellValue(\"search\", \"Search Query\", \"values\")\n         *              .run(function(err, job, pivot) {\n         *                  console.log(\"Job SID is:\", job.sid);\n         *                  console.log(\"Pivot search is:\", pivot.search);\n         *              });\n         *      });\n         * @param {Object} args A dictionary of properties for the search job (optional). For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n         * @param {Function} callback A function to call when done getting the pivot: `(err, job, pivot)`.\n         *\n         * @method splunkjs.Service.PivotSpecification\n         */\n        run: function(args, callback) {\n            if (!callback) {\n                callback = args;\n                args = {};\n            }\n            args = args || {};\n\n            this.pivot(function(err, pivot) {\n                if (err) {\n                    callback(err, null, null);\n                }\n                else {\n                    pivot.run(args, Async.augment(callback, pivot));\n                }\n            });\n        }\n    });\n\n    /**\n     * Represents one of the structured views in a `DataModel`.\n     *\n     * Has these properties:\n     *    - `dataModel` (_splunkjs.Service.DataModel_): The `DataModel` to which this `DataModelObject` belongs.\n     *    - `name` (_string_): The name of this `DataModelObject`.\n     *    - `displayName` (_string_): The human readable name of this `DataModelObject`.\n     *    - `parentName` (_string_): The name of the parent `DataModelObject` to this one.\n     *    - `lineage` (_array_): An array of strings of the lineage of the data model\n     *          on which this field is defined.\n     *    - `fields` (_object_): A dictionary of `DataModelField` objects, accessible by name.\n     *    - `constraints` (_array_): An array of `DataModelConstraint` objects.\n     *    - `calculations` (_object_): A dictionary of `DataModelCalculation` objects, accessible by ID.\n     *\n     * BaseSearch has an additional property:\n     *    - `baseSearch` (_string_): The search query wrapped by this data model object.\n     *\n     * BaseTransaction has additional properties:\n     *    - `groupByFields` (_string_): The fields that will be used to group events into transactions.\n     *    - `objectsToGroup` (_array_): Names of the data model objects that should be unioned\n     *        and split into transactions.\n     *    - `maxSpan` (_string_): The maximum time span of a transaction.\n     *    - `maxPause` (_string_): The maximum pause time of a transaction.\n     *\n     * @class splunkjs.Service.DataModelObject\n     */\n    root.DataModelObject = Class.extend({\n        /**\n         * Constructor for a data model object.\n         * SDK users are not expected to invoke this constructor directly.\n         *\n         * @constructor\n         * @param {Object} props A dictionary of properties to set:\n         *     - `objectName` (_string_): The name for this data model object.\n         *     - `displayName` (_string_): A human readable name for this data model object.\n         *     - `parentName` (_string_): The name of the data model that owns this data model object.\n         *     - `lineage` (_string_): The lineage of the data model that owns this data model object,\n         *          items are delimited by a dot. This is converted into an array of\n         *          strings upon construction.\n         *     - `fields` (_array_): An array of data model fields.\n         *     - `constraints` (_array_): An array of data model constraints.\n         *     - `calculations` (_array_): An array of data model calculations.\n         *     - `baseSearch` (_string_): The search query wrapped by this data model object; exclusive to BaseSearch (optional)\n         *     - `groupByFields` (_array_): The fields that will be used to group events into transactions; exclusive to BaseTransaction (optional)\n         *     - `objectsToGroup` (_array_): Names of the data model objects that should be unioned\n         *         and split into transactions; exclusive to BaseTransaction (optional)\n         *     - `maxSpan` (_string_): The maximum time span of a transaction; exclusive to BaseTransaction (optional)\n         *     - `maxPause` (_string_): The maximum pause time of a transaction; exclusive to BaseTransaction (optional)\n         *\n         * @param {splunkjs.Service.DataModel} parentDataModel The `DataModel` that owns this data model object.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        init: function(props, parentDataModel) {\n            props = props || {};\n            props.owner = props.owner || \"\";\n\n            this.dataModel              = parentDataModel;\n            this.name                   = props.objectName;\n            this.displayName            = props.displayName;\n            this.parentName             = props.parentName;\n            this.lineage                = props.lineage.split(\".\");\n\n            // Properties exclusive to BaseTransaction\n            if (props.hasOwnProperty(\"groupByFields\")) {\n                this.groupByFields = props.groupByFields;\n            }\n            if (props.hasOwnProperty(\"objectsToGroup\")) {\n                this.objectsToGroup = props.objectsToGroup;\n            }\n            if (props.hasOwnProperty(\"transactionMaxTimeSpan\")) {\n                this.maxSpan = props.transactionMaxTimeSpan;\n            }\n            if (props.hasOwnProperty(\"transactionMaxPause\")) {\n                this.maxPause = props.transactionMaxPause;\n            }\n\n            // Property exclusive to BaseSearch\n            if (props.hasOwnProperty(\"baseSearch\")) {\n                this.baseSearch = props.baseSearch;\n            }\n\n            // Parse fields\n            this.fields = {};\n            for (var i = 0; i < props.fields.length; i++) {\n                this.fields[props.fields[i].fieldName] = new root.DataModelField(props.fields[i]);\n            }\n\n            // Parse constraints\n            this.constraints = [];\n            for (var j = 0; j < props.constraints.length; j++) {\n                this.constraints.push(new root.DataModelConstraint(props.constraints[j]));\n            }\n\n            // Parse calculations\n            this.calculations = [];\n            for (var k = 0; k < props.calculations.length; k++) {\n                this.calculations[props.calculations[k].calculationID] = new root.DataModelCalculation(props.calculations[k]);\n            }\n        },\n\n        /**\n         * Is this data model object a BaseSearch?\n         *\n         * @return {Boolean} Whether this data model object is the root type, BaseSearch.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        isBaseSearch: function() {\n            return !utils.isUndefined(this.baseSearch);\n        },\n\n        /**\n         * Is this data model object is a BaseTransaction?\n         *\n         * @return {Boolean} Whether this data model object is the root type, BaseTransaction.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        isBaseTransaction: function() {\n            return !utils.isUndefined(this.maxSpan);\n        },\n\n        /**\n         * Returns a string array of the names of this data model object's fields.\n         *\n         * @return {Array} An array of strings with the field names of this \n         * data model object.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        fieldNames: function() {\n            return Object.keys(this.fields);\n        },\n\n        /**\n         * Returns a data model field instance, representing a field on this\n         * data model object. \n         *\n         * @return {splunkjs.Service.DataModelField|null} The data model field\n         * from this data model object with the specified name, null if it the \n         * field by that name doesn't exist.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        fieldByName: function(name) {\n            return this.calculatedFields()[name] || this.fields[name] || null;\n        },\n        \n        /**\n         * Returns an array of data model fields from this data model object's\n         * calculations, and this data model object's fields.\n         *\n         * @return {Array} An array of `splunk.Service.DataModelField` objects\n         * which includes this data model object's fields, and the fields from\n         * this data model object's calculations.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        allFields: function() {\n            // merge fields and calculatedFields()\n            var combinedFields = [];\n\n            for (var f in this.fields) {\n                if (this.fields.hasOwnProperty(f)) {\n                    combinedFields[f] = this.fields[f];\n                }\n            }\n\n            var calculatedFields = this.calculatedFields();\n            for (var cf in calculatedFields) {\n                if (calculatedFields.hasOwnProperty(cf)) {\n                    combinedFields[cf] = calculatedFields[cf];\n                }\n            }\n\n            return combinedFields;\n        },\n\n        /**\n         * Returns a string array of the field names of this data model object's\n         * calculations, and the names of this data model object's fields.\n         *\n         * @return {Array} An array of strings with the field names of this \n         * data model object's calculations, and the names of fields on \n         * this data model object.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        allFieldNames: function() {\n            return Object.keys(this.allFields());\n        },\n\n        /**\n         * Returns an array of data model fields from this data model object's\n         * calculations.\n         *\n         * @return {Array} An array of `splunk.Service.DataModelField` objects\n         * of the fields from this data model object's calculations.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        calculatedFields: function(){\n            var fields = {};\n            // Iterate over the calculations, get their fields\n            var keys = this.calculationIDs();\n            var calculations = this.calculations;\n            for (var i = 0; i < keys.length; i++) {\n                var calculation = calculations[keys[i]];\n                for (var f = 0; f < calculation.outputFieldNames().length; f++) {\n                    fields[calculation.outputFieldNames()[f]] = calculation.outputFields[calculation.outputFieldNames()[f]];\n                }\n            }\n            return fields;\n        },\n\n        /**\n         * Returns a string array of the field names of this data model object's\n         * calculations.\n         *\n         * @return {Array} An array of strings with the field names of this \n         * data model object's calculations.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        calculatedFieldNames: function() {\n            return Object.keys(this.calculatedFields());\n        },\n\n        /**\n         * Returns whether this data model object contains the field with the\n         * name passed in the `fieldName` parameter.\n         *\n         * @param {String} fieldName The name of the field to look for.\n         * @return {Boolean} True if this data model contains the field by name.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        hasField: function(fieldName) {\n            return utils.contains(this.allFieldNames(), fieldName);\n        },\n\n        /**\n         * Returns a string array of the IDs of this data model object's\n         * calculations.\n         *\n         * @return {Array} An array of strings with the IDs of this data model\n         * object's calculations.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        calculationIDs: function() {\n            return Object.keys(this.calculations);\n        },\n\n        /**\n         * Local acceleration is tsidx acceleration of a data model object that is handled\n         * manually by a user. You create a job which generates an index, and then use that\n         * index in your pivots on the data model object.\n         *\n         * The namespace created by the job is 'sid={sid}' where {sid} is the job's sid. You\n         * would use it in another job by starting your search query with `| tstats ... from sid={sid} | ...`\n         *\n         * The tsidx index created by this job is deleted when the job is garbage collected by Splunk.\n         *\n         * It is the user's responsibility to manage this job, including cancelling it.\n         *\n         * @example\n         *\n         *      service.dataModels().fetch(function(err, dataModels) {\n         *          var object = dataModels.item(\"some_data_model\").objectByName(\"some_object\");\n         *          object.createLocalAccelerationJob(\"-1d\", function(err, accelerationJob) {\n         *              console.log(\"The job has name:\", accelerationJob.name);\n         *          });\n         *      });\n         *\n         * @param {String} earliestTime A time modifier (e.g., \"-2w\") setting the earliest time to index.\n         * @param {Function} callback A function to call with the search job: `(err, accelerationJob)`.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        createLocalAccelerationJob: function(earliestTime, callback) {\n            // If earliestTime parameter is not specified, then set callback to its value\n            if (!callback && utils.isFunction(earliestTime)) {\n                callback = earliestTime;\n                earliestTime = undefined;\n            }\n\n            var query = \"| datamodel \\\"\" + this.dataModel.name + \"\\\" \" + this.name + \" search | tscollect\";\n            var args = earliestTime ? {earliest_time: earliestTime} : {};\n\n            this.dataModel.service.search(query, args, callback);\n        },\n\n        /**\n         * Start a search job that applies querySuffix to all the events in this data model object.\n         *\n         * @example\n         *\n         *      service.dataModels().fetch(function(err, dataModels) {\n         *          var object = dataModels.item(\"internal_audit_logs\").objectByName(\"searches\");\n         *          object.startSearch({}, \"| head 5\", function(err, job) {\n         *              console.log(\"The job has name:\", job.name);\n         *          });\n         *      });\n         *\n         * @param {Object} params A dictionary of properties for the search job. For a list of available parameters, see <a href=\"http://dev.splunk.com/view/SP-CAAAEFA#searchjobparams\" target=\"_blank\">Search job parameters</a> on Splunk Developer Portal.\n         *        **Note:** This method throws an error if the `exec_mode=oneshot` parameter is passed in with the properties dictionary.\n         * @param {String} querySuffix A search query, starting with a '|' that will be appended to the command to fetch the contents of this data model object (e.g., \"| head 3\").\n         * @param {Function} callback A function to call with the search job: `(err, job)`.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        startSearch: function(params, querySuffix, callback) {\n            var query = \"| datamodel \" + this.dataModel.name + \" \" + this.name + \" search\";\n            // Prepend a space to the querySuffix, or set it to an empty string if null or undefined\n            querySuffix = (querySuffix) ? (\" \" + querySuffix) : (\"\");\n            this.dataModel.service.search(query + querySuffix, params, callback);\n        },\n        \n        /**\n         * Returns the data model object this one inherits from if it is a user defined,\n         * otherwise return null.\n         *\n         * @return {splunkjs.Service.DataModelObject|null} This data model object's parent\n         *     or null if this is not a user defined data model object.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        parent: function() {\n            return this.dataModel.objectByName(this.parentName);\n        },\n        \n        /**\n         * Returns a new Pivot Specification, accepts no parameters.\n         *\n         * @return {splunkjs.Service.PivotSpecification} A new pivot specification.\n         *\n         * @method splunkjs.Service.DataModelObject\n         */\n        createPivotSpecification: function() {\n            // Pass in this DataModelObject to create a PivotSpecification\n            return new root.PivotSpecification(this);\n        }\n    });\n    \n    /**\n     * Represents a data model on the server. Data models\n     * contain `DataModelObject` instances, which specify structured\n     * views on Splunk data.\n     *\n     * @endpoint datamodel/model/{name}\n     * @class splunkjs.Service.DataModel\n     * @extends splunkjs.Service.Entity\n     */\n    root.DataModel = Service.Entity.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        path: function() {\n            return Paths.dataModels + \"/\" + encodeURIComponent(this.name);\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.DataModel`.\n         *\n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {String} name The name for the new data model.\n         * @param {Object} namespace (Optional) namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * @param {Object} props Properties of this data model:\n         *    - `acceleration` (_string_): A JSON object with an `enabled` key, representing if acceleration is enabled or not.\n         *    - `concise` (_string_): Indicates whether to list a concise JSON description of the data model, should always be \"0\".\n         *    - `description` (_string_): The JSON describing the data model.\n         *    - `displayName` (_string_): The name displayed for the data model in Splunk Web.\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        init: function(service, name, namespace, props) {\n            // If not given a 4th arg, assume the namespace was omitted\n            if (!props) {\n                props = namespace;\n                namespace = {};\n            }\n\n            this.name = name;\n            this._super(service, this.path(), namespace);\n\n            this.acceleration = JSON.parse(props.content.acceleration) || {};\n            if (this.acceleration.hasOwnProperty(\"enabled\")) {\n                // convert the enabled property to a boolean\n                this.acceleration.enabled = !!this.acceleration.enabled;\n            }\n\n            // concise=0 (false) forces the server to return all details of the newly created data model.\n            // we do not want a summary of this data model\n            if (!props.hasOwnProperty(\"concise\") || utils.isUndefined(props.concise)) {\n                this.concise = \"0\";\n            }\n\n            var dataModelDefinition = JSON.parse(props.content.description);\n\n            this.objectNames = dataModelDefinition.objectNameList;\n            this.displayName = dataModelDefinition.displayName;\n            this.description = dataModelDefinition.description;\n\n            // Parse the objects for this data model           \n            var objs = dataModelDefinition.objects;\n            this.objects = [];\n            for (var i = 0; i < objs.length; i++) {\n                this.objects.push(new root.DataModelObject(objs[i], this));\n            }\n\n            this.remove = utils.bind(this, this.remove);\n            this.update = utils.bind(this, this.update);\n        },\n\n        /**\n         * Returns a boolean indicating whether acceleration is enabled or not.\n         *\n         * @return {Boolean} true if acceleration is enabled, false otherwise.\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        isAccelerated: function() {\n            return !!this.acceleration.enabled;\n        },\n\n        /**\n         * Returns a data model object from this data model\n         * with the specified name if it exists, null otherwise.\n         *\n         * @return {Object|null} a data model object.\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        objectByName: function(name) {\n            for (var i = 0; i < this.objects.length; i++) {\n                if (this.objects[i].name === name) {\n                    return this.objects[i];\n                }\n            }\n            return null;\n        },\n\n        /**\n         * Returns a boolean of whether this exists in this data model or not.\n         *\n         * @return {Boolean} Returns true if this data model has object with specified name, false otherwise.\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        hasObject: function(name) {\n            return utils.contains(this.objectNames, name);\n        },\n\n        /**\n         * Updates the data model on the server, used to update acceleration settings.\n         *\n         * @param {Object} props A dictionary of properties to update the object with:\n         *     - `acceleration` (_object_): The acceleration settings for the data model.\n         *         Valid keys are: `enabled`, `earliestTime`, `cronSchedule`.\n         *         Any keys not set will be pulled from the acceleration settings already\n         *         set on this data model.\n         * @param {Function} callback A function to call when the data model is updated: `(err, dataModel)`.\n         *\n         * @method splunkjs.Service.DataModel\n         */\n        update: function(props, callback) {\n            if (utils.isUndefined(callback)) {\n                callback = props;\n                props = {};\n            }\n            callback = callback || function() {};\n\n            if (!props) {\n                callback(new Error(\"Must specify a props argument to update a data model.\"));\n                return; // Exit if props isn't set, to avoid calling the callback twice.\n            }\n            if (props.hasOwnProperty(\"name\")) {\n                callback(new Error(\"Cannot set 'name' field in 'update'\"), this);\n                return; // Exit if the name is set, to avoid calling the callback twice.\n            }\n\n            var updatedProps = {\n                acceleration: JSON.stringify({\n                    enabled: props.accceleration && props.acceleration.enabled || this.acceleration.enabled,\n                    earliest_time: props.accceleration && props.acceleration.earliestTime || this.acceleration.earliestTime,\n                    cron_schedule: props.accceleration && props.acceleration.cronSchedule || this.acceleration.cronSchedule\n                })\n            };\n\n            var that = this;\n            return this.post(\"\", updatedProps, function(err, response) {\n                if (err) {\n                    callback(err, that);\n                }\n                else {\n                    var dataModelNamespace = utils.namespaceFromProperties(response.data.entry[0]);\n                    callback(null, new root.DataModel(that.service, response.data.entry[0].name, dataModelNamespace, response.data.entry[0]));\n                }\n            });\n        }\n    });\n    \n    /**\n     * Represents a collection of data models. You can create and\n     * list data models using this collection container, or\n     * get a specific data model.\n     *\n     * @endpoint datamodel/model\n     * @class splunkjs.Service.DataModels\n     * @extends splunkjs.Service.Collection\n     */\n    root.DataModels = Service.Collection.extend({\n        /**\n         * Retrieves the REST endpoint path for this resource (with no namespace).\n         *\n         * @method splunkjs.Service.DataModels\n         */\n        path: function() {\n            return Paths.dataModels;\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.DataModels`.\n         * \n         * @constructor\n         * @param {splunkjs.Service} service A `Service` instance.\n         * @param {Object} namespace (Optional) namespace information:\n         *    - `owner` (_string_): The Splunk username, such as \"admin\". A value of \"nobody\" means no specific user. The \"-\" wildcard means all users.\n         *    - `app` (_string_): The app context for this resource (such as \"search\"). The \"-\" wildcard means all apps.\n         *    - `sharing` (_string_): A mode that indicates how the resource is shared. The sharing mode can be \"user\", \"app\", \"global\", or \"system\".\n         * \n         * @method splunkjs.Service.DataModels\n         */\n        init: function(service, namespace) {\n            namespace = namespace || {};\n            this._super(service, this.path(), namespace);\n            this.create = utils.bind(this, this.create);\n        },\n\n        /**\n         * Creates a new `DataModel` object with the given name and parameters.\n         * It is preferred that you create data models through the Splunk\n         * Enterprise with a browser.\n         *\n         * @param {String} name The name of the data model to create. If it contains spaces they will be replaced\n         *     with underscores.\n         * @param {Object} params A dictionary of properties.\n         * @param {Function} callback A function to call with the new `DataModel` object: `(err, createdDataModel)`.\n         *\n         * @method splunkjs.Service.DataModels\n         */\n        create: function(name, params, callback) {\n            // If we get (name, callback) instead of (name, params, callback)\n            // do the necessary variable swap\n            if (utils.isFunction(params) && !callback) {\n                callback = params;\n                params = {};\n            }\n\n            params = params || {};\n            callback = callback || function(){};\n            name = name.replace(/ /g, \"_\");\n\n            var that = this;\n            return this.post(\"\", {name: name, description: JSON.stringify(params)}, function(err, response) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    var dataModel = new root.DataModel(that.service, response.data.entry[0].name, that.namespace, response.data.entry[0]);\n                    callback(null, dataModel);\n                }\n            });\n        },\n\n        /**\n         * Constructor for `splunkjs.Service.DataModel`.\n         *\n         * @constructor\n         * @param {Object} props A dictionary of properties used to create a \n         * `DataModel` instance.\n         * @return {splunkjs.Service.DataModel} A new `DataModel` instance.\n         *\n         * @method splunkjs.Service.DataModels\n         */\n        instantiateEntity: function(props) {\n            var entityNamespace = utils.namespaceFromProperties(props);\n            return new root.DataModel(this.service, props.name, entityNamespace, props);\n        }\n    });\n\n    /*!*/\n    // Iterates over an endpoint's results.\n    root.PaginatedEndpointIterator = Class.extend({\n        init: function(endpoint, params) {\n            params = params || {};\n            \n            this._endpoint = endpoint;\n            this._pagesize = params.pagesize || 0;\n            this._offset = 0;\n        },\n        \n        // Fetches the next page from the endpoint.\n        next: function(callback) {\n            callback = callback || function() {};\n            \n            var that = this;\n            var params = {\n                count: this._pagesize,\n                offset: this._offset\n            };\n            return this._endpoint(params, function(err, results) {\n                if (err) {\n                    callback(err);\n                }\n                else {                    \n                    var numResults = (results.rows ? results.rows.length : 0);\n                    that._offset += numResults;\n                    \n                    callback(null, results, numResults > 0);\n                }\n            });\n        }\n    });\n})();\n"]},"metadata":{},"sourceType":"script"}