{"ast":null,"code":"/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var Paths = require('./paths').Paths;\n\n  var Class = require('./jquery.class').Class;\n\n  var Http = require('./http');\n\n  var utils = require('./utils');\n\n  var root = exports || this;\n  var prefixMap = {\n    \"5\": \"\",\n    \"4.3\": \"/services/json/v2\",\n    \"default\": \"\"\n  };\n  /**\n   * An abstraction over the Splunk HTTP-wire protocol that provides the basic\n   * functionality for communicating with a Splunk instance over HTTP, handles\n   * authentication and authorization, and formats HTTP requests (GET, POST,\n   * and DELETE) in the format that Splunk expects.\n   *\n   * @class splunkjs.Context\n   */\n\n  module.exports = root = Class.extend({\n    /**\n     * Constructor for `splunkjs.Context`.\n     *\n     * @constructor\n     * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.\n     * @param {Object} params A dictionary of optional parameters:\n     *    - `scheme` (_string_): The scheme (\"http\" or \"https\") for accessing Splunk.\n     *    - `host` (_string_): The host name (the default is \"localhost\").\n     *    - `port` (_integer_): The port number (the default is 8089).\n     *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.\n     *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.\n     *    - `owner` (_string_): The owner (username) component of the namespace.\n     *    - `app` (_string_): The app component of the namespace.\n     *    - `sessionKey` (_string_): The current session token.\n     *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).\n     *    - 'timeout' (_integer): The connection timeout in milliseconds. ('0' by default).\n     *    - `version` (_string_): The version string for Splunk, for example \"4.3.2\" (the default is \"5.0\").\n     * @return {splunkjs.Context} A new `splunkjs.Context` instance.\n     *\n     * @method splunkjs.Context\n     */\n    init: function (http, params) {\n      if (!(http instanceof Http) && !params) {\n        // Move over the params\n        params = http;\n        http = null;\n      }\n\n      params = params || {};\n      this.scheme = params.scheme || \"https\";\n      this.host = params.host || \"localhost\";\n      this.port = params.port || 8089;\n      this.username = params.username || null;\n      this.password = params.password || null;\n      this.owner = params.owner;\n      this.app = params.app;\n      this.sessionKey = params.sessionKey || \"\";\n      this.authorization = params.authorization || \"Splunk\";\n      this.paths = params.paths || Paths;\n      this.version = params.version || \"default\";\n      this.timeout = params.timeout || 0;\n      this.autologin = true; // Initialize autologin\n      // The reason we explicitly check to see if 'autologin'\n      // is actually set is because we need to distinguish the\n      // case of it being set to 'false', and it not being set.\n      // Unfortunately, in JavaScript, these are both false-y\n\n      if (params.hasOwnProperty(\"autologin\")) {\n        this.autologin = params.autologin;\n      }\n\n      if (!http) {\n        // If there is no HTTP implementation set, we check what platform\n        // we're running on. If we're running in the browser, then complain,\n        // else, we instantiate NodeHttp.\n        if (typeof window !== 'undefined') {\n          throw new Error(\"Http instance required when creating a Context within a browser.\");\n        } else {\n          var NodeHttp = require('./platform/node/node_http').NodeHttp;\n\n          http = new NodeHttp();\n        }\n      } // Store the HTTP implementation\n\n\n      this.http = http;\n\n      this.http._setSplunkVersion(this.version); // Store our full prefix, which is just combining together\n      // the scheme with the host\n\n\n      var versionPrefix = utils.getWithVersion(this.version, prefixMap);\n      this.prefix = this.scheme + \"://\" + this.host + \":\" + this.port + versionPrefix; // We perform the bindings so that every function works\n      // properly when it is passed as a callback.\n\n      this._headers = utils.bind(this, this._headers);\n      this.fullpath = utils.bind(this, this.fullpath);\n      this.urlify = utils.bind(this, this.urlify);\n      this.get = utils.bind(this, this.get);\n      this.del = utils.bind(this, this.del);\n      this.post = utils.bind(this, this.post);\n      this.login = utils.bind(this, this.login);\n      this._shouldAutoLogin = utils.bind(this, this._shouldAutoLogin);\n      this._requestWrapper = utils.bind(this, this._requestWrapper);\n    },\n\n    /**\n     * Appends Splunk-specific headers.\n     *\n     * @param {Object} headers A dictionary of headers (optional).\n     * @return {Object} An augmented dictionary of headers.\n     *\n     * @method splunkjs.Context\n     * @private\n     */\n    _headers: function (headers) {\n      headers = headers || {};\n\n      if (this.sessionKey) {\n        headers[\"Authorization\"] = this.authorization + \" \" + this.sessionKey;\n      }\n\n      return headers;\n    },\n\n    /*!*/\n    _shouldAutoLogin: function () {\n      return this.username && this.password && this.autologin;\n    },\n\n    /*!*/\n\n    /**\n     * This internal function aids with the autologin feature.\n     * It takes two parameters: `task`, which is a function describing an\n     * HTTP request, and `callback`, to be invoked when all is said\n     * and done.\n     *\n     * @param  {Function} task A function taking a single argument: `(callback)`.\n     * @param  {Function} callback The function to call when the request is complete: `(err, response)`.\n     */\n    _requestWrapper: function (task, callback) {\n      callback = callback || function () {};\n\n      var that = this;\n      var req = null; // This is the callback that will be invoked\n      // if we are currently logged in but our session key\n      // expired (i.e. we get a 401 response from the server).\n      // We will only retry once.\n\n      var reloginIfNecessary = function (err) {\n        // If we aborted, ignore it\n        if (req.wasAborted) {\n          return;\n        }\n\n        if (err && err.status === 401 && that._shouldAutoLogin()) {\n          // If we had an authorization error, we'll try and login\n          // again, but only once\n          that.sessionKey = null;\n          that.login(function (err, success) {\n            // If we've already aborted the request,\n            // just do nothing\n            if (req.wasAborted) {\n              return;\n            }\n\n            if (err) {\n              // If there was an error logging in, send it through\n              callback(err);\n            } else {\n              // Relogging in was successful, so we execute\n              // our task again.\n              task(callback);\n            }\n          });\n        } else {\n          callback.apply(null, arguments);\n        }\n      };\n\n      if (!this._shouldAutoLogin() || this.sessionKey) {\n        // Since we are not auto-logging in, just execute our task,\n        // but intercept any 401s so we can login then\n        req = task(reloginIfNecessary);\n        return req;\n      } // OK, so we know that we should try and autologin,\n      // so we try and login, and if we succeed, execute\n      // the original task\n\n\n      req = this.login(function (err, success) {\n        // If we've already aborted the request,\n        // just do nothing\n        if (req.wasAborted) {\n          return;\n        }\n\n        if (err) {\n          // If there was an error logging in, send it through\n          callback(err);\n        } else {\n          // Logging in was successful, so we execute\n          // our task.\n          task(callback);\n        }\n      });\n      return req;\n    },\n\n    /**\n     * Converts a partial path to a fully-qualified path to a REST endpoint,\n     * and if necessary includes the namespace owner and app.\n     *\n     * @param {String} path The partial path.\n     * @param {String} namespace The namespace, in the format \"_owner_/_app_\".\n     * @return {String} The fully-qualified path.\n     *\n     * @method splunkjs.Context\n     */\n    fullpath: function (path, namespace) {\n      namespace = namespace || {};\n\n      if (utils.startsWith(path, \"/\")) {\n        return path;\n      } // If we don't have an app name (explicitly or implicitly), we default to /services/\n\n\n      if (!namespace.app && !this.app && namespace.sharing !== root.Sharing.SYSTEM) {\n        return \"/services/\" + path;\n      } // Get the app and owner, first from the passed in namespace, then the service,\n      // finally defaulting to wild cards\n\n\n      var owner = namespace.owner || this.owner || \"-\";\n      var app = namespace.app || this.app || \"-\";\n      namespace.sharing = (namespace.sharing || \"\").toLowerCase(); // Modify the owner and app appropriately based on the sharing parameter\n\n      if (namespace.sharing === root.Sharing.APP || namespace.sharing === root.Sharing.GLOBAL) {\n        owner = \"nobody\";\n      } else if (namespace.sharing === root.Sharing.SYSTEM) {\n        owner = \"nobody\";\n        app = \"system\";\n      }\n\n      return utils.trim(\"/servicesNS/\" + encodeURIComponent(owner) + \"/\" + encodeURIComponent(app) + \"/\" + path);\n    },\n\n    /**\n     * Converts a partial path to a fully-qualified URL.\n     *\n     * @param {String} path The partial path.\n     * @return {String} The fully-qualified URL.\n     *\n     * @method splunkjs.Context\n     * @private\n     */\n    urlify: function (path) {\n      return this.prefix + this.fullpath(path);\n    },\n\n    /**\n     * Authenticates and logs in to a Splunk instance, then stores the\n     * resulting session key.\n     *\n     * @param {Function} callback The function to call when login has finished: `(err, wasSuccessful)`.\n     *\n     * @method splunkjs.Context\n     * @private\n     */\n    login: function (callback) {\n      var that = this;\n      var url = this.paths.login;\n      var params = {\n        username: this.username,\n        password: this.password,\n        cookie: '1'\n      };\n\n      callback = callback || function () {};\n\n      var wrappedCallback = function (err, response) {\n        // Let's make sure that not only did the request succeed, but\n        // we actually got a non-empty session key back.\n        var hasSessionKey = !!(!err && response.data && response.data.sessionKey);\n\n        if (err || !hasSessionKey) {\n          callback(err || \"No session key available\", false);\n        } else {\n          that.sessionKey = response.data.sessionKey;\n          callback(null, true);\n        }\n      };\n\n      return this.http.post(this.urlify(url), this._headers(), params, this.timeout, wrappedCallback);\n    },\n\n    /**\n     * Logs the session out resulting in the removal of all cookies and the\n     * session key.\n     *\n     * @param {Function} callback The function to call when logout has finished: `()`.\n     *\n     * @method splunkjs.Context\n     * @private\n     */\n    logout: function (callback) {\n      callback = callback || function () {};\n\n      this.sessionKey = null;\n      this.http._cookieStore = {};\n      callback();\n    },\n\n    /**\n     * Performs a GET request.\n     *\n     * @param {String} path The REST endpoint path of the GET request.\n     * @param {Object} params The entity-specific parameters for this request.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Context\n     */\n    get: function (path, params, callback) {\n      var that = this;\n\n      var request = function (callback) {\n        return that.http.get(that.urlify(path), that._headers(), params, that.timeout, callback);\n      };\n\n      return this._requestWrapper(request, callback);\n    },\n\n    /**\n     * Performs a DELETE request.\n     *\n     * @param {String} path The REST endpoint path of the DELETE request.\n     * @param {Object} params The entity-specific parameters for this request.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Context\n     */\n    del: function (path, params, callback) {\n      var that = this;\n\n      var request = function (callback) {\n        return that.http.del(that.urlify(path), that._headers(), params, that.timeout, callback);\n      };\n\n      return this._requestWrapper(request, callback);\n    },\n\n    /**\n     * Performs a POST request.\n     *\n     * @param {String} path The REST endpoint path of the POST request.\n     * @param {Object} params The entity-specific parameters for this request.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Context\n     */\n    post: function (path, params, callback) {\n      var that = this;\n\n      var request = function (callback) {\n        return that.http.post(that.urlify(path), that._headers(), params, that.timeout, callback);\n      };\n\n      return this._requestWrapper(request, callback);\n    },\n\n    /**\n     * Issues an arbitrary HTTP request to the REST endpoint path segment.\n     *\n     * @param {String} path The REST endpoint path segment (with any query parameters already appended and encoded).\n     * @param {String} method The HTTP method (can be `GET`, `POST`, or `DELETE`).\n     * @param {Object} query The entity-specific parameters for this request.\n     * @param {Object} post A dictionary of POST argument that will get form encoded.\n     * @param {Object} body The body of the request, mutually exclusive with `post`.\n     * @param {Object} headers Headers for this request.\n     * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n     *\n     * @method splunkjs.Context\n     */\n    request: function (path, method, query, post, body, headers, callback) {\n      var that = this;\n\n      var request = function (callback) {\n        return that.http.request(that.urlify(path), {\n          method: method,\n          headers: that._headers(headers),\n          query: query,\n          post: post,\n          body: body,\n          timeout: that.timeout\n        }, callback);\n      };\n\n      return this._requestWrapper(request, callback);\n    },\n\n    /**\n     * Compares the Splunk server's version to the specified version string.\n     * Returns -1 if (this.version <  otherVersion),\n     *          0 if (this.version == otherVersion),\n     *          1 if (this.version >  otherVersion).\n     *\n     * @param {String} otherVersion The other version string, for example \"5.0\".\n     *\n     * @method splunkjs.Context\n     */\n    versionCompare: function (otherVersion) {\n      var thisVersion = this.version;\n\n      if (thisVersion === \"default\") {\n        thisVersion = \"5.0\";\n      }\n\n      var components1 = thisVersion.split(\".\");\n      var components2 = otherVersion.split(\".\");\n      var numComponents = Math.max(components1.length, components2.length);\n\n      for (var i = 0; i < numComponents; i++) {\n        var c1 = i < components1.length ? parseInt(components1[i], 10) : 0;\n        var c2 = i < components2.length ? parseInt(components2[i], 10) : 0;\n\n        if (c1 < c2) {\n          return -1;\n        } else if (c1 > c2) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n  });\n  /*!*/\n\n  root.Sharing = {\n    USER: \"user\",\n    APP: \"app\",\n    GLOBAL: \"global\",\n    SYSTEM: \"system\"\n  };\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/context.js"],"names":["Paths","require","Class","Http","utils","root","exports","prefixMap","module","extend","init","http","params","scheme","host","port","username","password","owner","app","sessionKey","authorization","paths","version","timeout","autologin","hasOwnProperty","window","Error","NodeHttp","_setSplunkVersion","versionPrefix","getWithVersion","prefix","_headers","bind","fullpath","urlify","get","del","post","login","_shouldAutoLogin","_requestWrapper","headers","task","callback","that","req","reloginIfNecessary","err","wasAborted","status","success","apply","arguments","path","namespace","startsWith","sharing","Sharing","SYSTEM","toLowerCase","APP","GLOBAL","trim","encodeURIComponent","url","cookie","wrappedCallback","response","hasSessionKey","data","logout","_cookieStore","request","method","query","body","versionCompare","otherVersion","thisVersion","components1","split","components2","numComponents","Math","max","length","i","c1","parseInt","c2","USER"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    \"use strict\";\n\n    var Paths    = require('./paths').Paths;\n    var Class    = require('./jquery.class').Class;\n    var Http     = require('./http');\n    var utils    = require('./utils');\n\n    var root = exports || this;\n\n    var prefixMap = {\n        \"5\": \"\",\n        \"4.3\": \"/services/json/v2\",\n        \"default\": \"\"\n    };\n\n    /**\n     * An abstraction over the Splunk HTTP-wire protocol that provides the basic\n     * functionality for communicating with a Splunk instance over HTTP, handles\n     * authentication and authorization, and formats HTTP requests (GET, POST,\n     * and DELETE) in the format that Splunk expects.\n     *\n     * @class splunkjs.Context\n     */\n    module.exports = root = Class.extend({\n\n        /**\n         * Constructor for `splunkjs.Context`.\n         *\n         * @constructor\n         * @param {splunkjs.Http} http An instance of a `splunkjs.Http` class.\n         * @param {Object} params A dictionary of optional parameters:\n         *    - `scheme` (_string_): The scheme (\"http\" or \"https\") for accessing Splunk.\n         *    - `host` (_string_): The host name (the default is \"localhost\").\n         *    - `port` (_integer_): The port number (the default is 8089).\n         *    - `username` (_string_): The Splunk account username, which is used to authenticate the Splunk instance.\n         *    - `password` (_string_): The password, which is used to authenticate the Splunk instance.\n         *    - `owner` (_string_): The owner (username) component of the namespace.\n         *    - `app` (_string_): The app component of the namespace.\n         *    - `sessionKey` (_string_): The current session token.\n         *    - `autologin` (_boolean_): `true` to automatically try to log in again if the session terminates, `false` if not (`true` by default).\n         *    - 'timeout' (_integer): The connection timeout in milliseconds. ('0' by default).\n         *    - `version` (_string_): The version string for Splunk, for example \"4.3.2\" (the default is \"5.0\").\n         * @return {splunkjs.Context} A new `splunkjs.Context` instance.\n         *\n         * @method splunkjs.Context\n         */\n        init: function(http, params) {\n            if (!(http instanceof Http) && !params) {\n                // Move over the params\n                params = http;\n                http = null;\n            }\n\n            params = params || {};\n\n            this.scheme        = params.scheme || \"https\";\n            this.host          = params.host || \"localhost\";\n            this.port          = params.port || 8089;\n            this.username      = params.username || null;\n            this.password      = params.password || null;\n            this.owner         = params.owner;\n            this.app           = params.app;\n            this.sessionKey    = params.sessionKey || \"\";\n            this.authorization = params.authorization || \"Splunk\";\n            this.paths         = params.paths || Paths;\n            this.version       = params.version || \"default\";\n            this.timeout       = params.timeout || 0;\n            this.autologin     = true;\n\n            // Initialize autologin\n            // The reason we explicitly check to see if 'autologin'\n            // is actually set is because we need to distinguish the\n            // case of it being set to 'false', and it not being set.\n            // Unfortunately, in JavaScript, these are both false-y\n            if (params.hasOwnProperty(\"autologin\")) {\n                this.autologin = params.autologin;\n            }\n\n            if (!http) {\n                // If there is no HTTP implementation set, we check what platform\n                // we're running on. If we're running in the browser, then complain,\n                // else, we instantiate NodeHttp.\n                if (typeof(window) !== 'undefined') {\n                    throw new Error(\"Http instance required when creating a Context within a browser.\");\n                }\n                else {\n                    var NodeHttp = require('./platform/node/node_http').NodeHttp;\n                    http = new NodeHttp();\n                }\n            }\n\n            // Store the HTTP implementation\n            this.http = http;\n            this.http._setSplunkVersion(this.version);\n\n            // Store our full prefix, which is just combining together\n            // the scheme with the host\n            var versionPrefix = utils.getWithVersion(this.version, prefixMap);\n            this.prefix = this.scheme + \"://\" + this.host + \":\" + this.port + versionPrefix;\n\n            // We perform the bindings so that every function works\n            // properly when it is passed as a callback.\n            this._headers         = utils.bind(this, this._headers);\n            this.fullpath         = utils.bind(this, this.fullpath);\n            this.urlify           = utils.bind(this, this.urlify);\n            this.get              = utils.bind(this, this.get);\n            this.del              = utils.bind(this, this.del);\n            this.post             = utils.bind(this, this.post);\n            this.login            = utils.bind(this, this.login);\n            this._shouldAutoLogin = utils.bind(this, this._shouldAutoLogin);\n            this._requestWrapper  = utils.bind(this, this._requestWrapper);\n        },\n\n        /**\n         * Appends Splunk-specific headers.\n         *\n         * @param {Object} headers A dictionary of headers (optional).\n         * @return {Object} An augmented dictionary of headers.\n         *\n         * @method splunkjs.Context\n         * @private\n         */\n        _headers: function (headers) {\n            headers = headers || {};\n            if (this.sessionKey) {\n                headers[\"Authorization\"] = this.authorization + \" \" + this.sessionKey;\n            }\n            return headers;\n        },\n\n        /*!*/\n        _shouldAutoLogin: function() {\n            return this.username && this.password && this.autologin;\n        },\n\n        /*!*/\n        /**\n         * This internal function aids with the autologin feature.\n         * It takes two parameters: `task`, which is a function describing an\n         * HTTP request, and `callback`, to be invoked when all is said\n         * and done.\n         *\n         * @param  {Function} task A function taking a single argument: `(callback)`.\n         * @param  {Function} callback The function to call when the request is complete: `(err, response)`.\n         */\n        _requestWrapper: function(task, callback) {\n            callback = callback || function() {};\n\n            var that = this;\n            var req = null;\n\n            // This is the callback that will be invoked\n            // if we are currently logged in but our session key\n            // expired (i.e. we get a 401 response from the server).\n            // We will only retry once.\n            var reloginIfNecessary = function(err) {\n                // If we aborted, ignore it\n                if (req.wasAborted) {\n                    return;\n                }\n\n                if (err && err.status === 401 && that._shouldAutoLogin()) {\n                    // If we had an authorization error, we'll try and login\n                    // again, but only once\n                    that.sessionKey = null;\n                    that.login(function(err, success) {\n                        // If we've already aborted the request,\n                        // just do nothing\n                        if (req.wasAborted) {\n                            return;\n                        }\n\n                        if (err) {\n                            // If there was an error logging in, send it through\n                            callback(err);\n                        }\n                        else {\n                            // Relogging in was successful, so we execute\n                            // our task again.\n                            task(callback);\n                        }\n                    });\n                }\n                else {\n                    callback.apply(null, arguments);\n                }\n            };\n\n            if (!this._shouldAutoLogin() || this.sessionKey) {\n                // Since we are not auto-logging in, just execute our task,\n                // but intercept any 401s so we can login then\n                req = task(reloginIfNecessary);\n                return req;\n            }\n\n            // OK, so we know that we should try and autologin,\n            // so we try and login, and if we succeed, execute\n            // the original task\n            req = this.login(function(err, success) {\n                // If we've already aborted the request,\n                // just do nothing\n                if (req.wasAborted) {\n                    return;\n                }\n\n                if (err) {\n                    // If there was an error logging in, send it through\n                    callback(err);\n                }\n                else {\n                    // Logging in was successful, so we execute\n                    // our task.\n                    task(callback);\n                }\n            });\n\n            return req;\n        },\n\n        /**\n         * Converts a partial path to a fully-qualified path to a REST endpoint,\n         * and if necessary includes the namespace owner and app.\n         *\n         * @param {String} path The partial path.\n         * @param {String} namespace The namespace, in the format \"_owner_/_app_\".\n         * @return {String} The fully-qualified path.\n         *\n         * @method splunkjs.Context\n         */\n        fullpath: function(path, namespace) {\n            namespace = namespace || {};\n\n            if (utils.startsWith(path, \"/\")) {\n                return path;\n            }\n\n            // If we don't have an app name (explicitly or implicitly), we default to /services/\n            if (!namespace.app && !this.app && namespace.sharing !== root.Sharing.SYSTEM) {\n                return \"/services/\" + path;\n            }\n\n            // Get the app and owner, first from the passed in namespace, then the service,\n            // finally defaulting to wild cards\n            var owner = namespace.owner || this.owner || \"-\";\n            var app   = namespace.app || this.app || \"-\";\n\n            namespace.sharing = (namespace.sharing || \"\").toLowerCase();\n\n            // Modify the owner and app appropriately based on the sharing parameter\n            if (namespace.sharing === root.Sharing.APP || namespace.sharing === root.Sharing.GLOBAL) {\n                owner = \"nobody\";\n            }\n            else if (namespace.sharing === root.Sharing.SYSTEM) {\n                owner = \"nobody\";\n                app = \"system\";\n            }\n\n            return utils.trim(\"/servicesNS/\" + encodeURIComponent(owner) + \"/\" + encodeURIComponent(app) + \"/\" + path);\n        },\n\n        /**\n         * Converts a partial path to a fully-qualified URL.\n         *\n         * @param {String} path The partial path.\n         * @return {String} The fully-qualified URL.\n         *\n         * @method splunkjs.Context\n         * @private\n         */\n        urlify: function(path) {\n            return this.prefix + this.fullpath(path);\n        },\n\n        /**\n         * Authenticates and logs in to a Splunk instance, then stores the\n         * resulting session key.\n         *\n         * @param {Function} callback The function to call when login has finished: `(err, wasSuccessful)`.\n         *\n         * @method splunkjs.Context\n         * @private\n         */\n        login: function(callback) {\n            var that = this;\n            var url = this.paths.login;\n            var params = {\n                username: this.username,\n                password: this.password,\n                cookie  : '1'\n            };\n\n            callback = callback || function() {};\n            var wrappedCallback = function(err, response) {\n                // Let's make sure that not only did the request succeed, but\n                // we actually got a non-empty session key back.\n                var hasSessionKey = !!(!err && response.data && response.data.sessionKey);\n\n                if (err || !hasSessionKey) {\n                    callback(err || \"No session key available\", false);\n                }\n                else {\n                    that.sessionKey = response.data.sessionKey;\n                    callback(null, true);\n                }\n            };\n\n            return this.http.post(\n                this.urlify(url),\n                this._headers(),\n                params,\n                this.timeout,\n                wrappedCallback\n            );\n        },\n\n\n        /**\n         * Logs the session out resulting in the removal of all cookies and the\n         * session key.\n         *\n         * @param {Function} callback The function to call when logout has finished: `()`.\n         *\n         * @method splunkjs.Context\n         * @private\n         */\n        logout: function(callback) {\n            callback = callback || function() {};\n\n            this.sessionKey = null;\n            this.http._cookieStore = {};\n            callback();\n        },\n\n        /**\n         * Performs a GET request.\n         *\n         * @param {String} path The REST endpoint path of the GET request.\n         * @param {Object} params The entity-specific parameters for this request.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Context\n         */\n        get: function(path, params, callback) {\n            var that = this;\n            var request = function(callback) {\n                return that.http.get(\n                    that.urlify(path),\n                    that._headers(),\n                    params,\n                    that.timeout,\n                    callback\n                );\n            };\n\n            return this._requestWrapper(request, callback);\n        },\n\n        /**\n         * Performs a DELETE request.\n         *\n         * @param {String} path The REST endpoint path of the DELETE request.\n         * @param {Object} params The entity-specific parameters for this request.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Context\n         */\n        del: function(path, params, callback) {\n            var that = this;\n            var request = function(callback) {\n                return that.http.del(\n                    that.urlify(path),\n                    that._headers(),\n                    params,\n                    that.timeout,\n                    callback\n                );\n            };\n\n            return this._requestWrapper(request, callback);\n        },\n\n        /**\n         * Performs a POST request.\n         *\n         * @param {String} path The REST endpoint path of the POST request.\n         * @param {Object} params The entity-specific parameters for this request.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Context\n         */\n        post: function(path, params, callback) {\n            var that = this;\n            var request = function(callback) {\n                return that.http.post(\n                    that.urlify(path),\n                    that._headers(),\n                    params,\n                    that.timeout,\n                    callback\n                );\n            };\n\n            return this._requestWrapper(request, callback);\n        },\n\n        /**\n         * Issues an arbitrary HTTP request to the REST endpoint path segment.\n         *\n         * @param {String} path The REST endpoint path segment (with any query parameters already appended and encoded).\n         * @param {String} method The HTTP method (can be `GET`, `POST`, or `DELETE`).\n         * @param {Object} query The entity-specific parameters for this request.\n         * @param {Object} post A dictionary of POST argument that will get form encoded.\n         * @param {Object} body The body of the request, mutually exclusive with `post`.\n         * @param {Object} headers Headers for this request.\n         * @param {Function} callback The function to call when the request is complete: `(err, response)`.\n         *\n         * @method splunkjs.Context\n         */\n        request: function(path, method, query, post, body, headers, callback) {\n            var that = this;\n            var request = function(callback) {\n                return that.http.request(\n                    that.urlify(path),\n                    {\n                        method: method,\n                        headers: that._headers(headers),\n                        query: query,\n                        post: post,\n                        body: body,\n                        timeout: that.timeout\n                    },\n                    callback\n                );\n            };\n\n            return this._requestWrapper(request, callback);\n        },\n\n        /**\n         * Compares the Splunk server's version to the specified version string.\n         * Returns -1 if (this.version <  otherVersion),\n         *          0 if (this.version == otherVersion),\n         *          1 if (this.version >  otherVersion).\n         *\n         * @param {String} otherVersion The other version string, for example \"5.0\".\n         *\n         * @method splunkjs.Context\n         */\n        versionCompare: function(otherVersion) {\n            var thisVersion = this.version;\n            if (thisVersion === \"default\") {\n                thisVersion = \"5.0\";\n            }\n\n            var components1 = thisVersion.split(\".\");\n            var components2 = otherVersion.split(\".\");\n            var numComponents = Math.max(components1.length, components2.length);\n\n            for (var i = 0; i < numComponents; i++) {\n                var c1 = (i < components1.length) ? parseInt(components1[i], 10) : 0;\n                var c2 = (i < components2.length) ? parseInt(components2[i], 10) : 0;\n                if (c1 < c2) {\n                    return -1;\n                } else if (c1 > c2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n    });\n\n    /*!*/\n    root.Sharing = {\n        USER: \"user\",\n        APP: \"app\",\n        GLOBAL: \"global\",\n        SYSTEM: \"system\"\n    };\n})();\n"]},"metadata":{},"sourceType":"script"}