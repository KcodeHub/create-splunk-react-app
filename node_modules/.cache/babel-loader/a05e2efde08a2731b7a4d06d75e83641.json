{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\nvar utils = require('../utils'); // Get all of the existing utils\n\n/**\n * Parse the parameters from an `InputDefinition` or `ValidationDefinition`.\n *\n * This is a helper function for `parseXMLData`.\n *\n * The XML typically will look like this:\n * \n *   `<configuration>`\n *     `<stanza name=\"foobar://aaa\">`\n *       `<param name=\"param1\">value1</param>`\n *       `<param name=\"param2\">value2</param>`\n *       `<param name=\"disabled\">0</param>`\n *       `<param name=\"index\">default</param>`\n *     `</stanza>`\n *     `<stanza name=\"foobar://bbb\">`\n *       `<param name=\"param1\">value11</param>`\n *       `<param name=\"param2\">value22</param>`\n *       `<param name=\"disabled\">0</param>`\n *       `<param name=\"index\">default</param>`\n *       `<param_list name=\"multiValue\">`\n *         `<value>value1</value>`\n *         `<value>value2</value>`\n *       `</param_list>`\n *       `<param_list name=\"multiValue2\">`\n *         `<value>value3</value>`\n *         `<value>value4</value>`\n *       `</param_list>`\n *     `</stanza>`\n *   `</configuration>`\n *\n * @param {Object} an `Elementree` object representing the `<configuration>` XML node.\n * @return {Object} an `Elementree` object representing the parameters of node passed in.\n */\n\n\nutils.parseParameters = function (paramNode) {\n  switch (paramNode.tag) {\n    case \"param\":\n      return paramNode.text;\n\n    case \"param_list\":\n      var parameters = [];\n      var paramChildren = paramNode.getchildren();\n\n      for (var i = 0; i < paramChildren.length; i++) {\n        var mvp = paramChildren[i];\n        parameters.push(mvp.text);\n      }\n\n      return parameters;\n\n    default:\n      throw new Error(\"Invalid configuration scheme, <\" + paramNode.tag + \"> tag unexpected.\");\n  }\n};\n/**\n * Parses the parameters from `Elementtree` representations of XML for\n * `InputDefinition` and `ValidationDefinition` objects.\n *\n * @param {Object} a parent `Elementtree` element object.\n * @param {String} the name of the child element to parse parameters from.\n * @return {Object} an object of the parameters parsed.\n */\n\n\nutils.parseXMLData = function (parentNode, childNodeTag) {\n  var data = {};\n  var children = parentNode.getchildren();\n\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    if (child.tag === childNodeTag) {\n      if (childNodeTag === \"stanza\") {\n        data[child.get(\"name\")] = {};\n        var stanzaChildren = child.getchildren();\n\n        for (var p = 0; p < stanzaChildren.length; p++) {\n          var param = stanzaChildren[p];\n          data[child.get(\"name\")][param.get(\"name\")] = utils.parseParameters(param);\n        }\n      }\n    } else if (\"item\" === parentNode.tag) {\n      data[child.get(\"name\")] = utils.parseParameters(child);\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = utils;","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/utils.js"],"names":["utils","require","parseParameters","paramNode","tag","text","parameters","paramChildren","getchildren","i","length","mvp","push","Error","parseXMLData","parentNode","childNodeTag","data","children","child","get","stanzaChildren","p","param","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,KAAK,GAAKC,OAAO,CAAC,UAAD,CAArB,C,CAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,KAAK,CAACE,eAAN,GAAwB,UAASC,SAAT,EAAoB;AACxC,UAAQA,SAAS,CAACC,GAAlB;AACI,SAAK,OAAL;AACI,aAAOD,SAAS,CAACE,IAAjB;;AACJ,SAAK,YAAL;AACI,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,aAAa,GAAGJ,SAAS,CAACK,WAAV,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACG,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,YAAIE,GAAG,GAAGJ,aAAa,CAACE,CAAD,CAAvB;AACAH,QAAAA,UAAU,CAACM,IAAX,CAAgBD,GAAG,CAACN,IAApB;AACH;;AACD,aAAOC,UAAP;;AACJ;AACI,YAAM,IAAIO,KAAJ,CAAU,oCAAoCV,SAAS,CAACC,GAA9C,GAAoD,mBAA9D,CAAN;AAZR;AAcH,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,KAAK,CAACc,YAAN,GAAqB,UAASC,UAAT,EAAqBC,YAArB,EAAmC;AACpD,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAGH,UAAU,CAACP,WAAX,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,QAAQ,CAACR,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAIU,KAAK,GAAGD,QAAQ,CAACT,CAAD,CAApB;;AACA,QAAIU,KAAK,CAACf,GAAN,KAAcY,YAAlB,EAAgC;AAC5B,UAAIA,YAAY,KAAK,QAArB,EAA+B;AAC3BC,QAAAA,IAAI,CAACE,KAAK,CAACC,GAAN,CAAU,MAAV,CAAD,CAAJ,GAA0B,EAA1B;AACA,YAAIC,cAAc,GAAGF,KAAK,CAACX,WAAN,EAArB;;AACA,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAAc,CAACX,MAAnC,EAA2CY,CAAC,EAA5C,EAAgD;AAC5C,cAAIC,KAAK,GAAGF,cAAc,CAACC,CAAD,CAA1B;AACAL,UAAAA,IAAI,CAACE,KAAK,CAACC,GAAN,CAAU,MAAV,CAAD,CAAJ,CAAwBG,KAAK,CAACH,GAAN,CAAU,MAAV,CAAxB,IAA6CpB,KAAK,CAACE,eAAN,CAAsBqB,KAAtB,CAA7C;AACH;AACJ;AACJ,KATD,MAUK,IAAI,WAAWR,UAAU,CAACX,GAA1B,EAA+B;AAChCa,MAAAA,IAAI,CAACE,KAAK,CAACC,GAAN,CAAU,MAAV,CAAD,CAAJ,GAA0BpB,KAAK,CAACE,eAAN,CAAsBiB,KAAtB,CAA1B;AACH;AACJ;;AACD,SAAOF,IAAP;AACH,CApBD;;AAsBAO,MAAM,CAACC,OAAP,GAAiBzB,KAAjB","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\nvar utils   = require('../utils'); // Get all of the existing utils\n\n/**\n * Parse the parameters from an `InputDefinition` or `ValidationDefinition`.\n *\n * This is a helper function for `parseXMLData`.\n *\n * The XML typically will look like this:\n * \n *   `<configuration>`\n *     `<stanza name=\"foobar://aaa\">`\n *       `<param name=\"param1\">value1</param>`\n *       `<param name=\"param2\">value2</param>`\n *       `<param name=\"disabled\">0</param>`\n *       `<param name=\"index\">default</param>`\n *     `</stanza>`\n *     `<stanza name=\"foobar://bbb\">`\n *       `<param name=\"param1\">value11</param>`\n *       `<param name=\"param2\">value22</param>`\n *       `<param name=\"disabled\">0</param>`\n *       `<param name=\"index\">default</param>`\n *       `<param_list name=\"multiValue\">`\n *         `<value>value1</value>`\n *         `<value>value2</value>`\n *       `</param_list>`\n *       `<param_list name=\"multiValue2\">`\n *         `<value>value3</value>`\n *         `<value>value4</value>`\n *       `</param_list>`\n *     `</stanza>`\n *   `</configuration>`\n *\n * @param {Object} an `Elementree` object representing the `<configuration>` XML node.\n * @return {Object} an `Elementree` object representing the parameters of node passed in.\n */\nutils.parseParameters = function(paramNode) {\n    switch (paramNode.tag) {\n        case \"param\":\n            return paramNode.text;\n        case \"param_list\":\n            var parameters = [];\n            var paramChildren = paramNode.getchildren();\n            for (var i = 0; i < paramChildren.length; i++) {\n                var mvp = paramChildren[i];\n                parameters.push(mvp.text);\n            }\n            return parameters;\n        default:\n            throw new Error(\"Invalid configuration scheme, <\" + paramNode.tag + \"> tag unexpected.\");\n    }\n};\n\n/**\n * Parses the parameters from `Elementtree` representations of XML for\n * `InputDefinition` and `ValidationDefinition` objects.\n *\n * @param {Object} a parent `Elementtree` element object.\n * @param {String} the name of the child element to parse parameters from.\n * @return {Object} an object of the parameters parsed.\n */\nutils.parseXMLData = function(parentNode, childNodeTag) {\n    var data = {};\n    var children = parentNode.getchildren();\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child.tag === childNodeTag) {\n            if (childNodeTag === \"stanza\") {\n                data[child.get(\"name\")] = {};\n                var stanzaChildren = child.getchildren();\n                for (var p = 0; p < stanzaChildren.length; p++) {\n                    var param = stanzaChildren[p];\n                    data[child.get(\"name\")][param.get(\"name\")] = utils.parseParameters(param);\n                }\n            }\n        }\n        else if (\"item\" === parentNode.tag) {\n            data[child.get(\"name\")] = utils.parseParameters(child);\n        }\n    }\n    return data;\n};\n\nmodule.exports = utils;\n"]},"metadata":{},"sourceType":"script"}