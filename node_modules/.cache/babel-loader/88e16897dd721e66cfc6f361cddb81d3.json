{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var utils = require(\"./utils\");\n\n  var root = exports || this;\n  /**\n   * `Logger` logs messages to Splunk's internal logs.\n   *\n   * @class splunkjs.ModularInputs.Logger\n   */\n  // Severities that Splunk understands for log messages from modular inputs.\n  // DO NOT CHANGE THESE\n\n  root.DEBUG = \"DEBUG\";\n  root.INFO = \"INFO\";\n  root.WARN = \"WARN\";\n  root.ERROR = \"ERROR\";\n  root.FATAL = \"FATAL\";\n\n  root._log = function (severity, name, message, logStream) {\n    logStream = logStream || process.stderr; // Prevent a double space if name isn't passed.\n\n    if (name && name.length > 0) {\n      name = name + \" \";\n    }\n\n    var msg = severity + \" Modular input \" + name + message + \"\\n\";\n    logStream.write(msg);\n  };\n  /**\n   * Logs messages about the state of this modular input to Splunk.\n   * These messages will show up in Splunk's internal logs.\n   *\n   * @param {String} name The name of this modular input.\n   * @param {String} message The message to log.\n   * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n   * @function splunkjs.ModularInputs.Logger\n   */\n\n\n  root.debug = function (name, message, stream) {\n    try {\n      root._log(root.DEBUG, name, message, stream);\n    } catch (e) {\n      throw e;\n    }\n  };\n  /**\n   * Logs messages about the state of this modular input to Splunk.\n   * These messages will show up in Splunk's internal logs.\n   *\n   * @param {String} name The name of this modular input.\n   * @param {String} message The message to log.\n   * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n   * @function splunkjs.ModularInputs.Logger\n   */\n\n\n  root.info = function (name, message, stream) {\n    try {\n      root._log(root.INFO, name, message, stream);\n    } catch (e) {\n      throw e;\n    }\n  };\n  /**\n   * Logs messages about the state of this modular input to Splunk.\n   * These messages will show up in Splunk's internal logs.\n   *\n   * @param {String} name The name of this modular input.\n   * @param {String} message The message to log.\n   * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n   * @function splunkjs.ModularInputs.Logger\n   */\n\n\n  root.warn = function (name, message, stream) {\n    try {\n      root._log(root.WARN, name, message, stream);\n    } catch (e) {\n      throw e;\n    }\n  };\n  /**\n   * Logs messages about the state of this modular input to Splunk.\n   * These messages will show up in Splunk's internal logs.\n   *\n   * @param {String} name The name of this modular input.\n   * @param {String} message The message to log.\n   * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n   * @function splunkjs.ModularInputs.Logger\n   */\n\n\n  root.error = function (name, message, stream) {\n    try {\n      root._log(root.ERROR, name, message, stream);\n    } catch (e) {\n      throw e;\n    }\n  };\n  /**\n   * Logs messages about the state of this modular input to Splunk.\n   * These messages will show up in Splunk's internal logs.\n   *\n   * @param {String} name The name of this modular input.\n   * @param {String} message The message to log.\n   * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n   * @function splunkjs.ModularInputs.Logger\n   */\n\n\n  root.fatal = function (name, message, stream) {\n    try {\n      root._log(root.FATAL, name, message, stream);\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  module.exports = root;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/logger.js"],"names":["utils","require","root","exports","DEBUG","INFO","WARN","ERROR","FATAL","_log","severity","name","message","logStream","process","stderr","length","msg","write","debug","stream","e","info","warn","error","fatal","module"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function () {\n    \"use strict\";\n    var utils   = require(\"./utils\");\n    var root = exports || this;\n\n    /**\n     * `Logger` logs messages to Splunk's internal logs.\n     *\n     * @class splunkjs.ModularInputs.Logger\n     */\n\n    // Severities that Splunk understands for log messages from modular inputs.\n    // DO NOT CHANGE THESE\n    root.DEBUG = \"DEBUG\";\n    root.INFO  = \"INFO\";\n    root.WARN  = \"WARN\";\n    root.ERROR = \"ERROR\";\n    root.FATAL = \"FATAL\";\n\n    root._log = function(severity, name, message, logStream) {\n        logStream = logStream || process.stderr;\n\n        // Prevent a double space if name isn't passed.\n        if (name && name.length > 0) {\n            name = name + \" \";\n        }\n\n        var msg = severity + \" Modular input \" + name + message + \"\\n\";\n        logStream.write(msg);\n    };\n\n    /**\n     * Logs messages about the state of this modular input to Splunk.\n     * These messages will show up in Splunk's internal logs.\n     *\n     * @param {String} name The name of this modular input.\n     * @param {String} message The message to log.\n     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n     * @function splunkjs.ModularInputs.Logger\n     */\n    root.debug = function (name, message, stream) {\n        try {\n            root._log(root.DEBUG, name, message, stream);\n        }\n        catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * Logs messages about the state of this modular input to Splunk.\n     * These messages will show up in Splunk's internal logs.\n     *\n     * @param {String} name The name of this modular input.\n     * @param {String} message The message to log.\n     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n     * @function splunkjs.ModularInputs.Logger\n     */\n    root.info = function (name, message, stream) {\n        try {\n            root._log(root.INFO, name, message, stream);\n        }\n        catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * Logs messages about the state of this modular input to Splunk.\n     * These messages will show up in Splunk's internal logs.\n     *\n     * @param {String} name The name of this modular input.\n     * @param {String} message The message to log.\n     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n     * @function splunkjs.ModularInputs.Logger\n     */\n    root.warn = function (name, message, stream) {\n        try {\n            root._log(root.WARN, name, message, stream);\n        }\n        catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * Logs messages about the state of this modular input to Splunk.\n     * These messages will show up in Splunk's internal logs.\n     *\n     * @param {String} name The name of this modular input.\n     * @param {String} message The message to log.\n     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n     * @function splunkjs.ModularInputs.Logger\n     */\n    root.error = function (name, message, stream) {\n        try {\n            root._log(root.ERROR, name, message, stream);\n        }\n        catch (e) {\n            throw e;\n        }\n    };\n\n    /**\n     * Logs messages about the state of this modular input to Splunk.\n     * These messages will show up in Splunk's internal logs.\n     *\n     * @param {String} name The name of this modular input.\n     * @param {String} message The message to log.\n     * @param {Object} stream (Optional) A stream to write log messages to, defaults to process.stderr.\n     * @function splunkjs.ModularInputs.Logger\n     */\n    root.fatal = function (name, message, stream) {\n        try {\n            root._log(root.FATAL, name, message, stream);\n        }\n        catch (e) {\n            throw e;\n        }\n    };\n\n    module.exports = root;\n}());\n"]},"metadata":{},"sourceType":"script"}