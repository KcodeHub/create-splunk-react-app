{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n\n  var Argument = require(\"./argument\");\n  /**\n   * Class representing the metadata for a modular input kind.\n   *\n   * A `Scheme` specifies a title, description, several options of how Splunk \n   * should run modular inputs of this kind, and a set of arguments that define\n   * a particular modular input's properties.\n   * The primary use of `Scheme` is to abstract away the construction of XML\n   * to feed to Splunk.\n   *\n   * @example\n   *\n   *      var s =  new Scheme();\n   *\n   *      var myFullScheme = new Scheme(\"fullScheme\");\n   *      myFullScheme.description = \"This is how you set the other properties\";\n   *      myFullScheme.useExternalValidation = true;\n   *      myFullScheme.useSingleInstance = false;\n   *      myFullScheme.streamingMode = Scheme.streamingModeSimple;\n   *\n   * @param {String} The identifier for this Scheme in Splunk.\n   * @class splunkjs.ModularInputs.Scheme\n   */\n\n\n  function Scheme(title) {\n    this.title = utils.isUndefined(title) ? \"\" : title; // Set the defaults.\n\n    this.description = null;\n    this.useExternalValidation = true;\n    this.useSingleInstance = false;\n    this.streamingMode = Scheme.streamingModeXML; // List of Argument objects, each to be represented by an <arg> tag.\n\n    this.args = [];\n  } // Constant values, do not change.\n  // These should be used for setting the value of a Scheme object's streamingMode field.\n\n\n  Scheme.streamingModeSimple = \"SIMPLE\";\n  Scheme.streamingModeXML = \"XML\";\n  /**\n   * Add the provided argument, `arg`, to the `this.arguments` Array.\n   *\n   * @param {Object} arg An Argument object to add to this Scheme's argument list.\n   * @function splunkjs.ModularInputs.Scheme\n   */\n\n  Scheme.prototype.addArgument = function (arg) {\n    if (arg) {\n      this.args.push(arg);\n    }\n  };\n  /**\n   * Creates an elementtree Element representing this Scheme, then returns it.\n   *\n   * @return {Object} An elementtree Element object representing this Scheme.\n   * @function splunkjs.ModularInputs.Scheme\n   */\n\n\n  Scheme.prototype.toXML = function () {\n    var root = ET.Element(\"scheme\");\n    ET.SubElement(root, \"title\").text = this.title;\n\n    if (this.description) {\n      ET.SubElement(root, \"description\").text = this.description;\n    } // Add all subelements to this <scheme>, represented by (tag, text).\n\n\n    var subElements = [{\n      tag: \"use_external_validation\",\n      value: this.useExternalValidation\n    }, {\n      tag: \"use_single_instance\",\n      value: this.useSingleInstance\n    }, {\n      tag: \"streaming_mode\",\n      value: this.streamingMode\n    }];\n\n    for (var i = 0; i < subElements.length; i++) {\n      ET.SubElement(root, subElements[i].tag).text = subElements[i].value.toString().toLowerCase();\n    } // Create an <endpoint> subelement in root, then an <args> subelement in endpoint.\n\n\n    var argsElement = ET.SubElement(ET.SubElement(root, \"endpoint\"), \"args\"); // Add arguments as subelements to <args>.\n\n    for (var j = 0; j < this.args.length; j++) {\n      this.args[j].addToDocument(argsElement);\n    }\n\n    return root;\n  };\n\n  module.exports = Scheme;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/scheme.js"],"names":["ET","require","utils","Argument","Scheme","title","isUndefined","description","useExternalValidation","useSingleInstance","streamingMode","streamingModeXML","args","streamingModeSimple","prototype","addArgument","arg","push","toXML","root","Element","SubElement","text","subElements","tag","value","i","length","toString","toLowerCase","argsElement","j","addToDocument","module","exports"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET = require(\"elementtree\");\n    var utils = require(\"./utils\");\n    var Argument = require(\"./argument\");\n\n    /**\n     * Class representing the metadata for a modular input kind.\n     *\n     * A `Scheme` specifies a title, description, several options of how Splunk \n     * should run modular inputs of this kind, and a set of arguments that define\n     * a particular modular input's properties.\n     * The primary use of `Scheme` is to abstract away the construction of XML\n     * to feed to Splunk.\n     *\n     * @example\n     *\n     *      var s =  new Scheme();\n     *\n     *      var myFullScheme = new Scheme(\"fullScheme\");\n     *      myFullScheme.description = \"This is how you set the other properties\";\n     *      myFullScheme.useExternalValidation = true;\n     *      myFullScheme.useSingleInstance = false;\n     *      myFullScheme.streamingMode = Scheme.streamingModeSimple;\n     *\n     * @param {String} The identifier for this Scheme in Splunk.\n     * @class splunkjs.ModularInputs.Scheme\n     */\n    function Scheme(title) {\n        this.title = utils.isUndefined(title) ? \"\" : title;\n\n        // Set the defaults.\n        this.description = null;\n        this.useExternalValidation = true;\n        this.useSingleInstance = false;\n        this.streamingMode = Scheme.streamingModeXML;\n\n        // List of Argument objects, each to be represented by an <arg> tag.\n        this.args = [];\n    }\n\n    // Constant values, do not change.\n    // These should be used for setting the value of a Scheme object's streamingMode field.\n    Scheme.streamingModeSimple = \"SIMPLE\";\n    Scheme.streamingModeXML = \"XML\";\n\n    /**\n     * Add the provided argument, `arg`, to the `this.arguments` Array.\n     *\n     * @param {Object} arg An Argument object to add to this Scheme's argument list.\n     * @function splunkjs.ModularInputs.Scheme\n     */\n    Scheme.prototype.addArgument = function (arg) {\n        if (arg) {\n            this.args.push(arg);\n        }\n    };\n\n    /**\n     * Creates an elementtree Element representing this Scheme, then returns it.\n     *\n     * @return {Object} An elementtree Element object representing this Scheme.\n     * @function splunkjs.ModularInputs.Scheme\n     */\n    Scheme.prototype.toXML = function () {\n        var root = ET.Element(\"scheme\");\n\n        ET.SubElement(root, \"title\").text = this.title;\n\n        if (this.description) {\n            ET.SubElement(root, \"description\").text = this.description;\n        }\n\n        // Add all subelements to this <scheme>, represented by (tag, text).\n        var subElements = [\n            {tag: \"use_external_validation\", value: this.useExternalValidation},\n            {tag: \"use_single_instance\", value: this.useSingleInstance},\n            {tag: \"streaming_mode\", value: this.streamingMode}\n        ];\n        \n        for (var i = 0; i < subElements.length; i++) {\n            ET.SubElement(root, subElements[i].tag).text = subElements[i].value.toString().toLowerCase();\n        }\n\n        // Create an <endpoint> subelement in root, then an <args> subelement in endpoint.\n        var argsElement = ET.SubElement(ET.SubElement(root, \"endpoint\"), \"args\");\n\n        // Add arguments as subelements to <args>.\n        for (var j = 0; j < this.args.length; j++) {\n            this.args[j].addToDocument(argsElement);\n        }\n\n        return root;\n    };\n    \n    module.exports = Scheme;\n})();\n"]},"metadata":{},"sourceType":"script"}