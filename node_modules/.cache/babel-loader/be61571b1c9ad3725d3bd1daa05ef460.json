{"ast":null,"code":"/*! Simple JavaScript Inheritance\n * By John Resig http://ejohn.org/\n * MIT Licensed.\n * Inspired by base2 and Prototype\n */\n(function () {\n  var root = exports || this;\n  var initializing = false;\n  var fnTest = /xyz/.test(function () {\n    return xyz;\n  }) ? /\\b_super\\b/ : /.*/; // The base Class implementation (does nothing)\n\n  root.Class = function () {}; // Create a new Class that inherits from this class\n\n\n  root.Class.extend = function (prop) {\n    var _super = this.prototype; // Instantiate a base class (but only create the instance,\n    // don't run the init constructor)\n\n    initializing = true;\n    var prototype = new this();\n    initializing = false; // Copy the properties over onto the new prototype\n\n    for (var name in prop) {\n      // Check if we're overwriting an existing function\n      prototype[name] = typeof prop[name] == \"function\" && typeof _super[name] == \"function\" && fnTest.test(prop[name]) ? function (name, fn) {\n        return function () {\n          var tmp = this._super; // Add a new ._super() method that is the same method\n          // but on the super-class\n\n          this._super = _super[name]; // The method only need to be bound temporarily, so we\n          // remove it when we're done executing\n\n          var ret = fn.apply(this, arguments);\n          this._super = tmp;\n          return ret;\n        };\n      }(name, prop[name]) : prop[name];\n    } // The dummy class constructor\n\n\n    function Class() {\n      // All construction is actually done in the init method\n      if (!initializing && this.init) this.init.apply(this, arguments);\n    } // Populate our constructed prototype object\n\n\n    Class.prototype = prototype; // Enforce the constructor to be what we expect\n\n    Class.constructor = Class; // And make this class extendable\n\n    Class.extend = arguments.callee;\n    return Class;\n  };\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/jquery.class.js"],"names":["root","exports","initializing","fnTest","test","xyz","Class","extend","prop","_super","prototype","name","fn","tmp","ret","apply","arguments","init","constructor","callee"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,YAAU;AACP,MAAIA,IAAI,GAAGC,OAAO,IAAI,IAAtB;AAEA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,MAAM,GAAI,MAAMC,IAAN,CAAW,YAAW;AAAE,WAAOC,GAAP;AAAa,GAArC,IAAyC,YAAzC,GAAwD,IAAtE,CAJO,CAKP;;AACAL,EAAAA,IAAI,CAACM,KAAL,GAAa,YAAU,CAAE,CAAzB,CANO,CAQP;;;AACAN,EAAAA,IAAI,CAACM,KAAL,CAAWC,MAAX,GAAoB,UAASC,IAAT,EAAe;AACjC,QAAIC,MAAM,GAAG,KAAKC,SAAlB,CADiC,CAGjC;AACA;;AACAR,IAAAA,YAAY,GAAG,IAAf;AACA,QAAIQ,SAAS,GAAG,IAAI,IAAJ,EAAhB;AACAR,IAAAA,YAAY,GAAG,KAAf,CAPiC,CASjC;;AACA,SAAK,IAAIS,IAAT,IAAiBH,IAAjB,EAAuB;AACrB;AACAE,MAAAA,SAAS,CAACC,IAAD,CAAT,GAAkB,OAAOH,IAAI,CAACG,IAAD,CAAX,IAAqB,UAArB,IAChB,OAAOF,MAAM,CAACE,IAAD,CAAb,IAAuB,UADP,IACqBR,MAAM,CAACC,IAAP,CAAYI,IAAI,CAACG,IAAD,CAAhB,CADrB,GAEf,UAASA,IAAT,EAAeC,EAAf,EAAkB;AACjB,eAAO,YAAW;AAChB,cAAIC,GAAG,GAAG,KAAKJ,MAAf,CADgB,CAGhB;AACA;;AACA,eAAKA,MAAL,GAAcA,MAAM,CAACE,IAAD,CAApB,CALgB,CAOhB;AACA;;AACA,cAAIG,GAAG,GAAGF,EAAE,CAACG,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAV;AACA,eAAKP,MAAL,GAAcI,GAAd;AAEA,iBAAOC,GAAP;AACD,SAbD;AAcD,OAfD,CAeGH,IAfH,EAeSH,IAAI,CAACG,IAAD,CAfb,CAFgB,GAkBhBH,IAAI,CAACG,IAAD,CAlBN;AAmBD,KA/BgC,CAiCjC;;;AACA,aAASL,KAAT,GAAiB;AACf;AACA,UAAK,CAACJ,YAAD,IAAiB,KAAKe,IAA3B,EACE,KAAKA,IAAL,CAAUF,KAAV,CAAgB,IAAhB,EAAsBC,SAAtB;AACH,KAtCgC,CAwCjC;;;AACAV,IAAAA,KAAK,CAACI,SAAN,GAAkBA,SAAlB,CAzCiC,CA2CjC;;AACAJ,IAAAA,KAAK,CAACY,WAAN,GAAoBZ,KAApB,CA5CiC,CA8CjC;;AACAA,IAAAA,KAAK,CAACC,MAAN,GAAeS,SAAS,CAACG,MAAzB;AAEA,WAAOb,KAAP;AACD,GAlDD;AAmDH,CA5DD","sourcesContent":["/*! Simple JavaScript Inheritance\n * By John Resig http://ejohn.org/\n * MIT Licensed.\n * Inspired by base2 and Prototype\n */\n(function(){\n    var root = exports || this;\n\n    var initializing = false;\n    var fnTest = (/xyz/.test(function() { return xyz; }) ? /\\b_super\\b/ : /.*/);\n    // The base Class implementation (does nothing)\n    root.Class = function(){};\n    \n    // Create a new Class that inherits from this class\n    root.Class.extend = function(prop) {\n      var _super = this.prototype;\n      \n      // Instantiate a base class (but only create the instance,\n      // don't run the init constructor)\n      initializing = true;\n      var prototype = new this();\n      initializing = false;\n      \n      // Copy the properties over onto the new prototype\n      for (var name in prop) {\n        // Check if we're overwriting an existing function\n        prototype[name] = typeof prop[name] == \"function\" && \n          typeof _super[name] == \"function\" && fnTest.test(prop[name]) ?\n          (function(name, fn){\n            return function() {\n              var tmp = this._super;\n              \n              // Add a new ._super() method that is the same method\n              // but on the super-class\n              this._super = _super[name];\n              \n              // The method only need to be bound temporarily, so we\n              // remove it when we're done executing\n              var ret = fn.apply(this, arguments);        \n              this._super = tmp;\n              \n              return ret;\n            };\n          })(name, prop[name]) :\n          prop[name];\n      }\n      \n      // The dummy class constructor\n      function Class() {\n        // All construction is actually done in the init method\n        if ( !initializing && this.init )\n          this.init.apply(this, arguments);\n      }\n      \n      // Populate our constructed prototype object\n      Class.prototype = prototype;\n      \n      // Enforce the constructor to be what we expect\n      Class.constructor = Class;\n\n      // And make this class extendable\n      Class.extend = arguments.callee;\n       \n      return Class;\n    };\n})();"]},"metadata":{},"sourceType":"script"}