{"ast":null,"code":"/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * MIT Licensed\r\n */\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nexports.parse = parse;\nexports.serialize = serialize;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n  pairs.forEach(function (pair) {\n    var eq_idx = pair.indexOf('='); // skip things that don't look like key=value\n\n    if (eq_idx < 0) {\n      return;\n    }\n\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim(); // quoted values\n\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    } // only assign once\n\n\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  });\n  return obj;\n}\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n  var pairs = [name + '=' + enc(val)];\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\n    pairs.push('Max-Age=' + maxAge);\n  }\n\n  if (opt.domain) pairs.push('Domain=' + opt.domain);\n  if (opt.path) pairs.push('Path=' + opt.path);\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\n  if (opt.httpOnly) pairs.push('HttpOnly');\n  if (opt.secure) pairs.push('Secure');\n  if (opt.firstPartyOnly) pairs.push('First-Party-Only');\n  return pairs.join('; ');\n}\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/node_modules/cookie/index.js"],"names":["exports","parse","serialize","decode","decodeURIComponent","encode","encodeURIComponent","pairSplitRegExp","str","options","TypeError","obj","opt","pairs","split","dec","forEach","pair","eq_idx","indexOf","key","substr","trim","val","length","slice","undefined","tryDecode","name","enc","maxAge","isNaN","Error","push","domain","path","expires","toUTCString","httpOnly","secure","firstPartyOnly","join","e"],"mappings":"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","sourcesContent":["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\nvar pairSplitRegExp = /; */;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(pairSplitRegExp);\r\n  var dec = opt.decode || decode;\r\n\r\n  pairs.forEach(function(pair) {\r\n    var eq_idx = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (eq_idx < 0) {\r\n      return;\r\n    }\r\n\r\n    var key = pair.substr(0, eq_idx).trim()\r\n    var val = pair.substr(++eq_idx, pair.length).trim();\r\n\r\n    // quoted values\r\n    if ('\"' == val[0]) {\r\n      val = val.slice(1, -1);\r\n    }\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  });\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n  var pairs = [name + '=' + enc(val)];\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\r\n    pairs.push('Max-Age=' + maxAge);\r\n  }\r\n\r\n  if (opt.domain) pairs.push('Domain=' + opt.domain);\r\n  if (opt.path) pairs.push('Path=' + opt.path);\r\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\r\n  if (opt.httpOnly) pairs.push('HttpOnly');\r\n  if (opt.secure) pairs.push('Secure');\r\n  if (opt.firstPartyOnly) pairs.push('First-Party-Only');\r\n\r\n  return pairs.join('; ');\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}