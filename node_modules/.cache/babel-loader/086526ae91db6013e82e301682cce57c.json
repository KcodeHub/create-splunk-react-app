{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n  /**\n   * `Event` represents an event or fragment of an event to be written by this\n   * modular input to Splunk.\n   *\n   * @example\n   *      \n   *      // Minimal configuration\n   *      var myEvent =  new Event({\n   *          data: \"This is a test of my new event.\",\n   *          stanza: \"myStanzaName\",\n   *          time: parseFloat(\"1372187084.000\")\n   *      });\n   *\n   *      // Full configuration\n   *      var myBetterEvent =  new Event({\n   *          data: \"This is a test of my better event.\",\n   *          stanza: \"myStanzaName\",\n   *          time: parseFloat(\"1372187084.000\"),\n   *          host: \"localhost\",\n   *          index: \"main\",\n   *          source: \"Splunk\",\n   *          sourcetype: \"misc\",\n   *          done: true,\n   *          unbroken: true\n   *      });\n   *\n   * @param {Object} eventConfig An object containing the configuration for an `Event`.\n   * @class splunkjs.ModularInputs.Event\n   */\n\n\n  function Event(eventConfig) {\n    eventConfig = utils.isUndefined(eventConfig) ? {} : eventConfig;\n    this.data = utils.isUndefined(eventConfig.data) ? null : eventConfig.data;\n    this.done = utils.isUndefined(eventConfig.done) ? true : eventConfig.done;\n    this.host = utils.isUndefined(eventConfig.host) ? null : eventConfig.host;\n    this.index = utils.isUndefined(eventConfig.index) ? null : eventConfig.index;\n    this.source = utils.isUndefined(eventConfig.source) ? null : eventConfig.source;\n    this.sourcetype = utils.isUndefined(eventConfig.sourcetype) ? null : eventConfig.sourcetype;\n    this.stanza = utils.isUndefined(eventConfig.stanza) ? null : eventConfig.stanza;\n    this.unbroken = utils.isUndefined(eventConfig.unbroken) ? true : eventConfig.unbroken; // eventConfig.time can be of type Date, Number, or String.\n\n    this.time = utils.isUndefined(eventConfig.time) ? null : eventConfig.time;\n  }\n  /** \n  * Formats a time for Splunk, should be something like `1372187084.000`.\n  *\n  * @example\n  *\n  *   // When the time parameter is a string.\n  *   var stringTime = \"1372187084\";\n  *   var stringTimeFormatted = Event.formatTime(stringTime);\n  *\n  *   // When the time parameter is a number, no decimals.\n  *   var numericalTime = 1372187084;\n  *   var numericalTimeFormatted = Event.formatTime(numericalTime);\n  *\n  *   // When the time parameter is a number, with decimals.\n  *   var decimalTime = 1372187084.424;\n  *   var decimalTimeFormatted = Event.formatTime(decimalTime);\n  *\n  *   // When the time parameter is a Date object.\n  *   var dateObjectTime = Date.now();\n  *   var dateObjectTimeFormatted = Event.formatTime(dateObjectTime);\n  *\n  * @param {Anything} time The unformatted time in seconds or milliseconds, typically a String, Number, or `Date` Object.\n  * @return {Number} The formatted time in seconds.\n  * @function splunkjs.ModularInputs.Event\n  */\n\n\n  Event.formatTime = function (time) {\n    var cleanTime; // If time is a Date object, return its value.\n\n    if (time instanceof Date) {\n      time = time.valueOf();\n    }\n\n    if (!time || time === null) {\n      return null;\n    } // Values with decimals\n\n\n    if (time.toString().indexOf(\".\") !== -1) {\n      time = parseFloat(time).toFixed(3); // Clean up the extra decimals right away.\n      // A perfect time in milliseconds, with the decimal in the right spot.\n\n      if (time.toString().indexOf(\".\") >= 10) {\n        cleanTime = parseFloat(time.toString().substring(0, 14)).toFixed(3);\n      } // A time with fewer than expected digits, or with a decimal too far to the left.\n      else if (time.toString().length <= 13 || time.toString().indexOf(\".\") < 10) {\n          cleanTime = parseFloat(time).toFixed(3);\n        } // Any other value has more digits than the expected time format, get the first 15.\n        else {\n            cleanTime = (parseFloat(time.toString().substring(0, 14)) / 1000).toFixed(3);\n          }\n    } // Values without decimals\n    else {\n        // A time in milliseconds, no decimal (ex: Date.now()).\n        if (time.toString().length === 13) {\n          cleanTime = (parseFloat(time) / 1000).toFixed(3);\n        } // A time with fewer than expected digits.\n        else if (time.toString().length <= 12) {\n            cleanTime = parseFloat(time).toFixed(3);\n          } // Any other value has more digits than the expected time format, get the first 14.\n          else {\n              cleanTime = parseFloat(time.toString().substring(0, 13) / 1000).toFixed(3);\n            }\n      }\n\n    return cleanTime;\n  };\n  /** \n  * Writes an XML representation of this, and Event object to the provided `Stream`,\n  * starting at the provided offset.\n  *\n  * If this.data is undefined, or if there is an error writing to the provided `Stream`,\n  * an error will be thrown.\n  *\n  * @param {Object} stream A `Stream` object to write this `Event` to.\n  * @function splunkjs.ModularInputs.Event\n  */\n\n\n  Event.prototype._writeTo = function (stream) {\n    if (!this.data) {\n      throw new Error(\"Events must have at least the data field set to be written to XML.\");\n    }\n\n    var xmlEvent = ET.Element(\"event\");\n\n    if (this.stanza) {\n      xmlEvent.set(\"stanza\", this.stanza);\n    } // Convert this.unbroken (a boolean) to a number (0 or 1), then to a string\n\n\n    xmlEvent.set(\"unbroken\", (+this.unbroken).toString());\n\n    if (!utils.isUndefined(this.time) && this.time !== null) {\n      ET.SubElement(xmlEvent, \"time\").text = Event.formatTime(this.time).toString();\n    } // If this.data is a JS object, stringify it\n\n\n    if (typeof this.data === \"object\") {\n      this.data = JSON.stringify(this.data);\n    }\n\n    var subElements = [{\n      tag: \"source\",\n      text: this.source\n    }, {\n      tag: \"sourcetype\",\n      text: this.sourcetype\n    }, {\n      tag: \"index\",\n      text: this.index\n    }, {\n      tag: \"host\",\n      text: this.host\n    }, {\n      tag: \"data\",\n      text: this.data\n    }];\n\n    for (var i = 0; i < subElements.length; i++) {\n      var node = subElements[i];\n\n      if (node.text) {\n        ET.SubElement(xmlEvent, node.tag).text = node.text;\n      }\n    }\n\n    if (this.done || !utils.isUndefined(this.done)) {\n      ET.SubElement(xmlEvent, \"done\");\n    }\n\n    var eventString = ET.tostring(xmlEvent, {\n      \"xml_declaration\": false\n    }); // Throws an exception if there's an error writing to the stream.\n\n    stream.write(eventString);\n  };\n\n  module.exports = Event;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/event.js"],"names":["ET","require","utils","Event","eventConfig","isUndefined","data","done","host","index","source","sourcetype","stanza","unbroken","time","formatTime","cleanTime","Date","valueOf","toString","indexOf","parseFloat","toFixed","substring","length","prototype","_writeTo","stream","Error","xmlEvent","Element","set","SubElement","text","JSON","stringify","subElements","tag","i","node","eventString","tostring","write","module","exports"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET      = require(\"elementtree\");\n    var utils   = require(\"./utils\");\n\n    /**\n     * `Event` represents an event or fragment of an event to be written by this\n     * modular input to Splunk.\n     *\n     * @example\n     *      \n     *      // Minimal configuration\n     *      var myEvent =  new Event({\n     *          data: \"This is a test of my new event.\",\n     *          stanza: \"myStanzaName\",\n     *          time: parseFloat(\"1372187084.000\")\n     *      });\n     *\n     *      // Full configuration\n     *      var myBetterEvent =  new Event({\n     *          data: \"This is a test of my better event.\",\n     *          stanza: \"myStanzaName\",\n     *          time: parseFloat(\"1372187084.000\"),\n     *          host: \"localhost\",\n     *          index: \"main\",\n     *          source: \"Splunk\",\n     *          sourcetype: \"misc\",\n     *          done: true,\n     *          unbroken: true\n     *      });\n     *\n     * @param {Object} eventConfig An object containing the configuration for an `Event`.\n     * @class splunkjs.ModularInputs.Event\n     */\n    function Event(eventConfig) {\n        eventConfig = utils.isUndefined(eventConfig) ? {} : eventConfig;\n\n        this.data = utils.isUndefined(eventConfig.data) ? null : eventConfig.data;\n        this.done = utils.isUndefined(eventConfig.done) ? true : eventConfig.done;\n        this.host = utils.isUndefined(eventConfig.host) ? null : eventConfig.host;\n        this.index = utils.isUndefined(eventConfig.index) ? null : eventConfig.index;\n        this.source = utils.isUndefined(eventConfig.source) ? null : eventConfig.source;\n        this.sourcetype = utils.isUndefined(eventConfig.sourcetype) ? null : eventConfig.sourcetype;\n        this.stanza = utils.isUndefined(eventConfig.stanza) ? null : eventConfig.stanza;\n        this.unbroken = utils.isUndefined(eventConfig.unbroken) ? true : eventConfig.unbroken;\n\n        // eventConfig.time can be of type Date, Number, or String.\n        this.time = utils.isUndefined(eventConfig.time) ? null : eventConfig.time;\n    }\n\n    /** \n    * Formats a time for Splunk, should be something like `1372187084.000`.\n    *\n    * @example\n    *\n    *   // When the time parameter is a string.\n    *   var stringTime = \"1372187084\";\n    *   var stringTimeFormatted = Event.formatTime(stringTime);\n    *\n    *   // When the time parameter is a number, no decimals.\n    *   var numericalTime = 1372187084;\n    *   var numericalTimeFormatted = Event.formatTime(numericalTime);\n    *\n    *   // When the time parameter is a number, with decimals.\n    *   var decimalTime = 1372187084.424;\n    *   var decimalTimeFormatted = Event.formatTime(decimalTime);\n    *\n    *   // When the time parameter is a Date object.\n    *   var dateObjectTime = Date.now();\n    *   var dateObjectTimeFormatted = Event.formatTime(dateObjectTime);\n    *\n    * @param {Anything} time The unformatted time in seconds or milliseconds, typically a String, Number, or `Date` Object.\n    * @return {Number} The formatted time in seconds.\n    * @function splunkjs.ModularInputs.Event\n    */\n    Event.formatTime = function(time) {\n        var cleanTime;\n        \n        // If time is a Date object, return its value.\n        if (time instanceof Date) {\n            time = time.valueOf();\n        }\n\n        if (!time || time === null) {\n            return null;\n        }\n\n        // Values with decimals\n        if (time.toString().indexOf(\".\") !== -1) {\n            time = parseFloat(time).toFixed(3); // Clean up the extra decimals right away.\n\n            // A perfect time in milliseconds, with the decimal in the right spot.\n            if (time.toString().indexOf(\".\") >= 10) {\n                cleanTime = parseFloat(time.toString().substring(0,14)).toFixed(3);\n            }\n            // A time with fewer than expected digits, or with a decimal too far to the left.\n            else if (time.toString().length <= 13 || time.toString().indexOf(\".\") < 10) {\n                cleanTime = parseFloat(time).toFixed(3);\n            }\n            // Any other value has more digits than the expected time format, get the first 15.\n            else {\n                cleanTime = (parseFloat(time.toString().substring(0,14))/1000).toFixed(3);\n            }\n        }\n        // Values without decimals\n        else {\n            // A time in milliseconds, no decimal (ex: Date.now()).\n            if (time.toString().length === 13) {\n                cleanTime = (parseFloat(time)/1000).toFixed(3);\n            }\n            // A time with fewer than expected digits.\n            else if (time.toString().length <= 12) {\n                cleanTime = parseFloat(time).toFixed(3);\n            }\n            // Any other value has more digits than the expected time format, get the first 14.\n            else {\n                cleanTime = parseFloat(time.toString().substring(0, 13)/1000).toFixed(3);\n            }\n        }\n        return cleanTime;\n    };\n\n    /** \n    * Writes an XML representation of this, and Event object to the provided `Stream`,\n    * starting at the provided offset.\n    *\n    * If this.data is undefined, or if there is an error writing to the provided `Stream`,\n    * an error will be thrown.\n    *\n    * @param {Object} stream A `Stream` object to write this `Event` to.\n    * @function splunkjs.ModularInputs.Event\n    */\n    Event.prototype._writeTo = function(stream) {\n        if (!this.data) {\n            throw new Error(\"Events must have at least the data field set to be written to XML.\");\n        }\n        \n        var xmlEvent = ET.Element(\"event\");\n\n        if (this.stanza) {\n            xmlEvent.set(\"stanza\", this.stanza);\n        }\n        // Convert this.unbroken (a boolean) to a number (0 or 1), then to a string\n        xmlEvent.set(\"unbroken\", (+this.unbroken).toString());\n        \n        if (!utils.isUndefined(this.time) && this.time !== null) {\n            ET.SubElement(xmlEvent, \"time\").text = Event.formatTime(this.time).toString();\n        }\n\n        // If this.data is a JS object, stringify it\n        if (typeof this.data === \"object\") {\n            this.data = JSON.stringify(this.data);\n        }\n\n        var subElements = [\n            {tag: \"source\", text: this.source},\n            {tag: \"sourcetype\", text: this.sourcetype},\n            {tag: \"index\", text: this.index},\n            {tag: \"host\", text: this.host},\n            {tag: \"data\", text: this.data}\n        ];\n        for (var i = 0; i < subElements.length; i++) {\n            var node = subElements[i];\n            if (node.text) {\n                ET.SubElement(xmlEvent, node.tag).text = node.text;\n            }\n        }\n\n        if (this.done || !utils.isUndefined(this.done)) {\n            ET.SubElement(xmlEvent, \"done\");\n        }\n\n        var eventString = ET.tostring(xmlEvent, {\"xml_declaration\": false});\n\n        // Throws an exception if there's an error writing to the stream.\n        stream.write(eventString);\n    };\n\n    module.exports = Event;\n})();\n"]},"metadata":{},"sourceType":"script"}