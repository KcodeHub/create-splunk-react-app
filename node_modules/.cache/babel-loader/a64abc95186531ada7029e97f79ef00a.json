{"ast":null,"code":"/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var utils = require('./utils');\n\n  var root = exports || this;\n  var levels = {\n    \"ALL\": 4,\n    \"INFO\": 3,\n    \"WARN\": 2,\n    \"ERROR\": 1,\n    \"NONE\": 0\n  }; // Normalize the value of the environment variable $LOG_LEVEL to\n  // an integer (look up named levels like \"ERROR\" in levels above),\n  // and default to \"ERROR\" if there is no value or an invalid value\n  // set.\n\n  var setLevel = function (level) {\n    if (utils.isString(level) && levels.hasOwnProperty(level)) {\n      process.env.LOG_LEVEL = levels[level];\n    } else if (!isNaN(parseInt(level, 10)) && utils.keyOf(parseInt(level, 10), levels)) {\n      process.env.LOG_LEVEL = level;\n    } else {\n      process.env.LOG_LEVEL = levels[\"ERROR\"];\n    }\n  };\n\n  if (process.env.LOG_LEVEL) {\n    setLevel(process.env.LOG_LEVEL);\n  } else {\n    process.env.LOG_LEVEL = levels[\"ERROR\"];\n  } // Set the actual output functions\n  // This section is not covered by unit tests, since there's no\n  // straightforward way to control what the console object will be.\n\n\n  var _log, _warn, _error, _info;\n\n  _log = _warn = _error = _info = function () {};\n\n  if (typeof console !== \"undefined\") {\n    var logAs = function (level) {\n      return function (str) {\n        try {\n          console[level].apply(console, arguments);\n        } catch (ex) {\n          console[level](str);\n        }\n      };\n    };\n\n    if (console.log) {\n      _log = logAs(\"log\");\n    }\n\n    if (console.error) {\n      _error = logAs(\"error\");\n    }\n\n    if (console.warn) {\n      _warn = logAs(\"warn\");\n    }\n\n    if (console.info) {\n      _info = logAs(\"info\");\n    }\n  }\n  /**\n   * A controllable logging module that lets you display different types of\n   * debugging information to the console.  \n   *\n   * @module splunkjs.Logger\n   */\n\n\n  exports.Logger = {\n    /**\n     * Logs debug messages to the console. This function is the same as \n     * `console.log`.\n     *\n     * @function splunkjs.Logger\n     */\n    log: function () {\n      if (process.env.LOG_LEVEL >= levels.ALL) {\n        _log.apply(null, arguments);\n      }\n    },\n\n    /**\n     * Logs debug errors to the console. This function is the same as \n     * `console.error`.\n     *\n     * @function splunkjs.Logger\n     */\n    error: function () {\n      if (process.env.LOG_LEVEL >= levels.ERROR) {\n        _error.apply(null, arguments);\n      }\n    },\n\n    /**\n     * Logs debug warnings to the console. This function is the same as \n     * `console.warn`.\n     *\n     * @function splunkjs.Logger\n     */\n    warn: function () {\n      if (process.env.LOG_LEVEL >= levels.WARN) {\n        _warn.apply(null, arguments);\n      }\n    },\n\n    /**\n     * Logs debug info to the console. This function is the same as \n     * `console.info`.\n     *\n     * @function splunkjs.Logger\n     */\n    info: function () {\n      if (process.env.LOG_LEVEL >= levels.INFO) {\n        _info.apply(null, arguments);\n      }\n    },\n\n    /**\n     * Prints all messages that are retrieved from the splunkd server to the\n     * console.\n     *\n     * @function splunkjs.Logger\n     */\n    printMessages: function (allMessages) {\n      allMessages = allMessages || [];\n\n      for (var i = 0; i < allMessages.length; i++) {\n        var message = allMessages[i];\n        var type = message[\"type\"];\n        var text = message[\"text\"];\n        var msg = '[SPLUNKD] ' + text;\n\n        switch (type) {\n          case 'HTTP':\n          case 'FATAL':\n          case 'ERROR':\n            this.error(msg);\n            break;\n\n          case 'WARN':\n            this.warn(msg);\n            break;\n\n          case 'INFO':\n            this.info(msg);\n            break;\n\n          case 'HTTP':\n            this.error(msg);\n            break;\n\n          default:\n            this.info(msg);\n            break;\n        }\n      }\n    },\n\n    /**\n     * Sets the global logging level to indicate which information to log.\n     *\n     * @example\n     *\n     *      splunkjs.Logger.setLevel(\"WARN\");\n     *      splunkjs.Logger.setLevel(0); // equivalent to NONE\n     *\n     * @param {String|Number} level A string or number (\"ALL\" = 4 | \"INFO\" = 3 | \"WARN\" = 2 | \"ERROR\" = 1 | \"NONE\" = 0) indicating the logging level.\n     *\n     * @function splunkjs.Logger\n     */\n    setLevel: function (level) {\n      setLevel.apply(this, arguments);\n    },\n\n    /*!*/\n    levels: levels\n  };\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/log.js"],"names":["utils","require","root","exports","levels","setLevel","level","isString","hasOwnProperty","process","env","LOG_LEVEL","isNaN","parseInt","keyOf","_log","_warn","_error","_info","console","logAs","str","apply","arguments","ex","log","error","warn","info","Logger","ALL","ERROR","WARN","INFO","printMessages","allMessages","i","length","message","type","text","msg"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    \"use strict\";\n    var utils = require('./utils');\n    \n    var root = exports || this;\n\n    var levels = {\n        \"ALL\": 4,\n        \"INFO\": 3,\n        \"WARN\": 2,\n        \"ERROR\": 1,\n        \"NONE\": 0\n    };\n\n    // Normalize the value of the environment variable $LOG_LEVEL to\n    // an integer (look up named levels like \"ERROR\" in levels above),\n    // and default to \"ERROR\" if there is no value or an invalid value\n    // set.\n    var setLevel = function(level) {    \n        if (utils.isString(level) && levels.hasOwnProperty(level)) {\n            process.env.LOG_LEVEL = levels[level];\n        } \n        else if (!isNaN(parseInt(level, 10)) &&\n                   utils.keyOf(parseInt(level, 10), levels)) {\n            process.env.LOG_LEVEL = level;\n        } \n        else {\n            process.env.LOG_LEVEL = levels[\"ERROR\"];                \n        }\n    };\n\n    if (process.env.LOG_LEVEL) {\n        setLevel(process.env.LOG_LEVEL);\n    } \n    else {\n        process.env.LOG_LEVEL = levels[\"ERROR\"];\n    }\n\n    // Set the actual output functions\n    // This section is not covered by unit tests, since there's no\n    // straightforward way to control what the console object will be.\n    var _log, _warn, _error, _info;\n    _log = _warn = _error = _info = function() {};\n    if (typeof(console) !== \"undefined\") {\n\n        var logAs = function(level) {\n            return function(str) {\n                try { \n                    console[level].apply(console, arguments);\n                }\n                catch(ex) { \n                    console[level](str);\n                }\n            };\n        };\n\n        if (console.log) { _log = logAs(\"log\"); }\n        if (console.error) { _error = logAs(\"error\"); }\n        if (console.warn) { _warn = logAs(\"warn\"); }\n        if (console.info) { _info = logAs(\"info\"); }\n    }\n\n    /**\n     * A controllable logging module that lets you display different types of\n     * debugging information to the console.  \n     *\n     * @module splunkjs.Logger\n     */\n    exports.Logger = {\n        /**\n         * Logs debug messages to the console. This function is the same as \n         * `console.log`.\n         *\n         * @function splunkjs.Logger\n         */\n        log: function() {\n            if (process.env.LOG_LEVEL >= levels.ALL) {\n                _log.apply(null, arguments);\n            }\n        },\n        \n        /**\n         * Logs debug errors to the console. This function is the same as \n         * `console.error`.\n         *\n         * @function splunkjs.Logger\n         */\n        error: function() {\n            if (process.env.LOG_LEVEL >= levels.ERROR) {\n                _error.apply(null, arguments);\n            }\n        },\n        \n        /**\n         * Logs debug warnings to the console. This function is the same as \n         * `console.warn`.\n         *\n         * @function splunkjs.Logger\n         */\n        warn: function() {\n            if (process.env.LOG_LEVEL >= levels.WARN) {\n                _warn.apply(null, arguments);\n            }\n        },\n        \n        /**\n         * Logs debug info to the console. This function is the same as \n         * `console.info`.\n         *\n         * @function splunkjs.Logger\n         */\n        info: function() {\n            if (process.env.LOG_LEVEL >= levels.INFO) {\n                _info.apply(null, arguments);\n            }\n        },\n        \n        /**\n         * Prints all messages that are retrieved from the splunkd server to the\n         * console.\n         *\n         * @function splunkjs.Logger\n         */\n        printMessages: function(allMessages) {\n            allMessages = allMessages || [];\n            \n            for(var i = 0; i < allMessages.length; i++) {\n                var message = allMessages[i];\n                var type = message[\"type\"];\n                var text = message[\"text\"];\n                var msg = '[SPLUNKD] ' + text;\n                switch (type) {\n                    case 'HTTP':\n                    case 'FATAL':\n                    case 'ERROR':\n                        this.error(msg);\n                        break;\n                    case 'WARN':\n                        this.warn(msg);\n                        break;\n                    case 'INFO':\n                        this.info(msg);\n                        break;\n                    case 'HTTP':\n                        this.error(msg);\n                        break;\n                    default:\n                        this.info(msg);\n                        break;\n                }\n            }  \n        },\n        \n        /**\n         * Sets the global logging level to indicate which information to log.\n         *\n         * @example\n         *\n         *      splunkjs.Logger.setLevel(\"WARN\");\n         *      splunkjs.Logger.setLevel(0); // equivalent to NONE\n         *\n         * @param {String|Number} level A string or number (\"ALL\" = 4 | \"INFO\" = 3 | \"WARN\" = 2 | \"ERROR\" = 1 | \"NONE\" = 0) indicating the logging level.\n         *\n         * @function splunkjs.Logger\n         */\n        setLevel: function(level) { setLevel.apply(this, arguments); },\n        \n        /*!*/\n        levels: levels\n    };\n})();\n"]},"metadata":{},"sourceType":"script"}