{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n  /**\n   * Class representing an argument to a modular input kind.\n   *\n   * `Argument` is meant to be used with `Scheme` to generate an XML \n   * definition of the modular input kind that Splunk understands.\n   *\n   * `name` is the only required parameter for the constructor.\n   *\n   * @example\n   *      \n   *      // Example with minimal parameters\n   *      var myArg1 = new Argument({name: \"arg1\"});\n   *\n   *      // Example with all parameters\n   *      var myArg2 = new Argument({\n   *          name: \"arg1\",\n   *          description: \"This an argument with lots of parameters\",\n   *          validation: \"is_pos_int('some_name')\",\n   *          dataType: Argument.dataTypeNumber,\n   *          requiredOnEdit: true,\n   *          requiredOnCreate: true\n   *      });\n   *\n   * @param {Object} argumentConfig An object containing at least the name property to configure this Argument\n   * @class splunkjs.ModularInputs.Argument\n   */\n\n\n  function Argument(argumentConfig) {\n    if (!argumentConfig) {\n      argumentConfig = {};\n    }\n\n    this.name = utils.isUndefined(argumentConfig.name) ? \"\" : argumentConfig.name;\n    this.description = utils.isUndefined(argumentConfig.description) ? null : argumentConfig.description;\n    this.validation = utils.isUndefined(argumentConfig.validation) ? null : argumentConfig.validation;\n    this.dataType = utils.isUndefined(argumentConfig.dataType) ? Argument.dataTypeString : argumentConfig.dataType;\n    this.requiredOnEdit = utils.isUndefined(argumentConfig.requiredOnEdit) ? false : argumentConfig.requiredOnEdit;\n    this.requiredOnCreate = utils.isUndefined(argumentConfig.requiredOnCreate) ? false : argumentConfig.requiredOnCreate;\n  } // Constant values, do not change\n  // These should be used for setting the value of an Argument object's dataType field.\n\n\n  Argument.dataTypeBoolean = \"BOOLEAN\";\n  Argument.dataTypeNumber = \"NUMBER\";\n  Argument.dataTypeString = \"STRING\";\n  /**\n   * Adds an `Argument` object the passed in elementtree object.\n   * \n   * Adds an <arg> subelement to the parent element, typically <args>,\n   * and sets up its subelements with their respective text.\n   *\n   * @param {Object} parent An elementtree element object to be the parent of a new <arg> subelement\n   * @return {Object} An elementtree element object representing this argument.\n   * @function splunkjs.ModularInputs.Argument\n   */\n\n  Argument.prototype.addToDocument = function (parent) {\n    var arg = ET.SubElement(parent, \"arg\");\n    arg.set(\"name\", this.name);\n\n    if (this.description) {\n      ET.SubElement(arg, \"description\").text = this.description;\n    }\n\n    if (this.validation) {\n      ET.SubElement(arg, \"validation\").text = this.validation;\n    } // Add all other subelements to this <arg>, represented by (tag, text)\n\n\n    var subElements = [{\n      tag: \"data_type\",\n      value: this.dataType\n    }, {\n      tag: \"required_on_edit\",\n      value: this.requiredOnEdit\n    }, {\n      tag: \"required_on_create\",\n      value: this.requiredOnCreate\n    }];\n\n    for (var i = 0; i < subElements.length; i++) {\n      ET.SubElement(arg, subElements[i].tag).text = subElements[i].value.toString().toLowerCase();\n    }\n\n    return arg;\n  };\n\n  module.exports = Argument;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/argument.js"],"names":["ET","require","utils","Argument","argumentConfig","name","isUndefined","description","validation","dataType","dataTypeString","requiredOnEdit","requiredOnCreate","dataTypeBoolean","dataTypeNumber","prototype","addToDocument","parent","arg","SubElement","set","text","subElements","tag","value","i","length","toString","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET = require(\"elementtree\");\n    var utils = require(\"./utils\");\n\n    /**\n     * Class representing an argument to a modular input kind.\n     *\n     * `Argument` is meant to be used with `Scheme` to generate an XML \n     * definition of the modular input kind that Splunk understands.\n     *\n     * `name` is the only required parameter for the constructor.\n     *\n     * @example\n     *      \n     *      // Example with minimal parameters\n     *      var myArg1 = new Argument({name: \"arg1\"});\n     *\n     *      // Example with all parameters\n     *      var myArg2 = new Argument({\n     *          name: \"arg1\",\n     *          description: \"This an argument with lots of parameters\",\n     *          validation: \"is_pos_int('some_name')\",\n     *          dataType: Argument.dataTypeNumber,\n     *          requiredOnEdit: true,\n     *          requiredOnCreate: true\n     *      });\n     *\n     * @param {Object} argumentConfig An object containing at least the name property to configure this Argument\n     * @class splunkjs.ModularInputs.Argument\n     */\n    function Argument(argumentConfig) {\n        if (!argumentConfig) {\n            argumentConfig = {};\n        }\n\n        this.name = utils.isUndefined(argumentConfig.name) ? \"\" : argumentConfig.name;\n        this.description = utils.isUndefined(argumentConfig.description) ? null : argumentConfig.description;\n        this.validation = utils.isUndefined(argumentConfig.validation) ? null : argumentConfig.validation;\n        this.dataType = utils.isUndefined(argumentConfig.dataType) ? Argument.dataTypeString : argumentConfig.dataType;\n        this.requiredOnEdit = utils.isUndefined(argumentConfig.requiredOnEdit) ? false : argumentConfig.requiredOnEdit;\n        this.requiredOnCreate = utils.isUndefined(argumentConfig.requiredOnCreate) ? false : argumentConfig.requiredOnCreate;\n    }\n\n    // Constant values, do not change\n    // These should be used for setting the value of an Argument object's dataType field.\n    Argument.dataTypeBoolean = \"BOOLEAN\";\n    Argument.dataTypeNumber = \"NUMBER\";\n    Argument.dataTypeString = \"STRING\";\n\n    /**\n     * Adds an `Argument` object the passed in elementtree object.\n     * \n     * Adds an <arg> subelement to the parent element, typically <args>,\n     * and sets up its subelements with their respective text.\n     *\n     * @param {Object} parent An elementtree element object to be the parent of a new <arg> subelement\n     * @return {Object} An elementtree element object representing this argument.\n     * @function splunkjs.ModularInputs.Argument\n     */\n    Argument.prototype.addToDocument = function (parent) {\n        var arg = ET.SubElement(parent, \"arg\");\n        arg.set(\"name\", this.name);\n\n        if (this.description) {\n            ET.SubElement(arg, \"description\").text = this.description;\n        }\n\n        if (this.validation) {\n            ET.SubElement(arg, \"validation\").text = this.validation;\n        }\n\n        // Add all other subelements to this <arg>, represented by (tag, text)\n        var subElements = [\n            {tag: \"data_type\", value: this.dataType},\n            {tag: \"required_on_edit\", value: this.requiredOnEdit},\n            {tag: \"required_on_create\", value: this.requiredOnCreate}\n        ];\n\n        for (var i = 0; i < subElements.length; i++) {\n            ET.SubElement(arg, subElements[i].tag).text = subElements[i].value.toString().toLowerCase();\n        }\n\n        return arg;\n    }; \n    \n    module.exports = Argument;\n})();"]},"metadata":{},"sourceType":"script"}