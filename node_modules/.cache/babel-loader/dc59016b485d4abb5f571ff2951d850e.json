{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n  /**\n   * `InputDefinition` encodes the XML defining inputs that Splunk passes to\n   * a modular input script.\n   *\n   * @example\n   *\n   *      var i =  new InputDefinition();\n   *\n   * @class splunkjs.ModularInputs.InputDefinition\n   */\n\n\n  function InputDefinition() {\n    this.metadata = {};\n    this.inputs = {};\n  }\n  /**\n   * Parse a string containing XML into an `InputDefinition`.\n   *\n   * This function will throw an exception if `str`\n   * contains unexpected XML.\n   *\n   * The XML typically will look like this:\n   * \n   * `<input>`\n   *   `<server_host>tiny</server_host>`\n   *   `<server_uri>https://127.0.0.1:8089</server_uri>`\n   *   `<checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`\n   *   `<session_key>123102983109283019283</session_key>`\n   *   `<configuration>`\n   *     `<stanza name=\"foobar://aaa\">`\n   *       `<param name=\"param1\">value1</param>`\n   *       `<param name=\"param2\">value2</param>`\n   *       `<param name=\"disabled\">0</param>`\n   *       `<param name=\"index\">default</param>`\n   *     `</stanza>`\n   *     `<stanza name=\"foobar://bbb\">`\n   *       `<param name=\"param1\">value11</param>`\n   *       `<param name=\"param2\">value22</param>`\n   *       `<param name=\"disabled\">0</param>`\n   *       `<param name=\"index\">default</param>`\n   *       `<param_list name=\"multiValue\">`\n   *         `<value>value1</value>`\n   *         `<value>value2</value>`\n   *       `</param_list>`\n   *       `<param_list name=\"multiValue2\">`\n   *         `<value>value3</value>`\n   *         `<value>value4</value>`\n   *       `</param_list>`\n   *     `</stanza>`\n   *   `</configuration>`\n   * `</input>`\n   *\n   * @param {String} str A string containing XML to parse.\n   * @return {Object} An InputDefiniion object.\n   * @function splunkjs.ModularInputs.InputDefinition\n   */\n\n\n  InputDefinition.parse = function (str) {\n    var definition = new InputDefinition();\n    var rootChildren = ET.parse(str).getroot().getchildren();\n\n    for (var i = 0; i < rootChildren.length; i++) {\n      var node = rootChildren[i];\n\n      if (node.tag === \"configuration\") {\n        definition.inputs = utils.parseXMLData(node, \"stanza\");\n      } else {\n        definition.metadata[node.tag] = node.text;\n      }\n    }\n\n    return definition;\n  };\n\n  module.exports = InputDefinition;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/inputdefinition.js"],"names":["ET","require","utils","InputDefinition","metadata","inputs","parse","str","definition","rootChildren","getroot","getchildren","i","length","node","tag","parseXMLData","text","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,YAAW;AACR,MAAIA,EAAE,GAAQC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAIC,KAAK,GAAKD,OAAO,CAAC,SAAD,CAArB;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASE,eAAT,GAA2B;AACvB,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,eAAe,CAACG,KAAhB,GAAwB,UAASC,GAAT,EAAc;AAClC,QAAIC,UAAU,GAAG,IAAIL,eAAJ,EAAjB;AACA,QAAIM,YAAY,GAAGT,EAAE,CAACM,KAAH,CAASC,GAAT,EAAcG,OAAd,GAAwBC,WAAxB,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,YAAY,CAACI,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,UAAIE,IAAI,GAAGL,YAAY,CAACG,CAAD,CAAvB;;AACA,UAAIE,IAAI,CAACC,GAAL,KAAa,eAAjB,EAAkC;AAC9BP,QAAAA,UAAU,CAACH,MAAX,GAAoBH,KAAK,CAACc,YAAN,CAAmBF,IAAnB,EAAyB,QAAzB,CAApB;AACH,OAFD,MAGK;AACDN,QAAAA,UAAU,CAACJ,QAAX,CAAoBU,IAAI,CAACC,GAAzB,IAAgCD,IAAI,CAACG,IAArC;AACH;AACJ;;AACD,WAAOT,UAAP;AACH,GAbD;;AAeAU,EAAAA,MAAM,CAACC,OAAP,GAAiBhB,eAAjB;AACH,CA5ED","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET      = require(\"elementtree\");\n    var utils   = require(\"./utils\");\n\n    /**\n     * `InputDefinition` encodes the XML defining inputs that Splunk passes to\n     * a modular input script.\n     *\n     * @example\n     *\n     *      var i =  new InputDefinition();\n     *\n     * @class splunkjs.ModularInputs.InputDefinition\n     */\n    function InputDefinition() {\n        this.metadata = {};\n        this.inputs = {};\n    }\n\n    /**\n     * Parse a string containing XML into an `InputDefinition`.\n     *\n     * This function will throw an exception if `str`\n     * contains unexpected XML.\n     *\n     * The XML typically will look like this:\n     * \n     * `<input>`\n     *   `<server_host>tiny</server_host>`\n     *   `<server_uri>https://127.0.0.1:8089</server_uri>`\n     *   `<checkpoint_dir>/opt/splunk/var/lib/splunk/modinputs</checkpoint_dir>`\n     *   `<session_key>123102983109283019283</session_key>`\n     *   `<configuration>`\n     *     `<stanza name=\"foobar://aaa\">`\n     *       `<param name=\"param1\">value1</param>`\n     *       `<param name=\"param2\">value2</param>`\n     *       `<param name=\"disabled\">0</param>`\n     *       `<param name=\"index\">default</param>`\n     *     `</stanza>`\n     *     `<stanza name=\"foobar://bbb\">`\n     *       `<param name=\"param1\">value11</param>`\n     *       `<param name=\"param2\">value22</param>`\n     *       `<param name=\"disabled\">0</param>`\n     *       `<param name=\"index\">default</param>`\n     *       `<param_list name=\"multiValue\">`\n     *         `<value>value1</value>`\n     *         `<value>value2</value>`\n     *       `</param_list>`\n     *       `<param_list name=\"multiValue2\">`\n     *         `<value>value3</value>`\n     *         `<value>value4</value>`\n     *       `</param_list>`\n     *     `</stanza>`\n     *   `</configuration>`\n     * `</input>`\n     *\n     * @param {String} str A string containing XML to parse.\n     * @return {Object} An InputDefiniion object.\n     * @function splunkjs.ModularInputs.InputDefinition\n     */\n    InputDefinition.parse = function(str) {\n        var definition = new InputDefinition();\n        var rootChildren = ET.parse(str).getroot().getchildren();\n        for (var i = 0; i < rootChildren.length; i++) {\n            var node = rootChildren[i];\n            if (node.tag === \"configuration\") {\n                definition.inputs = utils.parseXMLData(node, \"stanza\");\n            }\n            else {\n                definition.metadata[node.tag] = node.text;\n            }\n        }\n        return definition;\n    };\n\n    module.exports = InputDefinition;\n})();"]},"metadata":{},"sourceType":"script"}