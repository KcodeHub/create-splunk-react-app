{"ast":null,"code":"/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  var ET = require(\"elementtree\");\n\n  var utils = require(\"./utils\");\n\n  var Logger = require(\"./logger\");\n\n  var stream = require(\"stream\");\n\n  var Async = require(\"../async\");\n  /**\n   * `EventWriter` writes events and error messages to Splunk from a modular input.\n   *\n   * Its two important methods are `writeEvent`, which takes an `Event` object,\n   * and `log`, which takes a severity and an error message.\n   *\n   * @param {Object} output A stream to output data, defaults to `process.stdout`\n   * @param {Object} error A stream to output errors, defaults to `process.stderr`\n   * @class splunkjs.ModularInputs.EventWriter\n   */\n\n\n  function EventWriter(output, error) {\n    this._out = utils.isUndefined(output) ? process.stdout : output;\n    this._err = utils.isUndefined(error) ? process.stderr : error; // Has the opening <stream> tag been written yet?\n\n    this._headerWritten = false;\n  }\n  /**\n  * Writes an `Event` object to the output stream specified\n  * in the constructor.\n  *\n  * @param {Object} event An `Event` Object.\n  * @function splunkjs.ModularInputs.EventWriter\n  */\n\n\n  EventWriter.prototype.writeEvent = function (event) {\n    if (!this._headerWritten) {\n      this._out.write(\"<stream>\");\n\n      this._headerWritten = true;\n    }\n\n    try {\n      event._writeTo(this._out);\n    } catch (e) {\n      if (e.message === \"Events must have at least the data field set to be written to XML.\") {\n        Logger.warn(\"\", e.message, this._err);\n        throw e;\n      }\n\n      Logger.error(\"\", e.message, this._err);\n      throw e;\n    }\n  };\n  /**\n  * Writes a string representation of an `Elementtree` Object to the \n  * output stream specified in the constructor.\n  *\n  * This function will throw an exception if there is an error\n  * while making a string from `xmlDocument`, or\n  * while writing the string created from `xmlDocument`.\n  *\n  * @param {Object} xmlDocument An `Elementtree` Object representing an XML document.\n  * @function splunkjs.ModularInputs.EventWriter\n  */\n\n\n  EventWriter.prototype.writeXMLDocument = function (xmlDocument) {\n    var xmlString = ET.tostring(xmlDocument, {\n      \"xml_declaration\": false\n    });\n\n    this._out.write(xmlString);\n  };\n  /**\n  * Writes the closing </stream> tag to make the XML well formed.\n  *\n  * @function splunkjs.ModularInputs.EventWriter\n  */\n\n\n  EventWriter.prototype.close = function () {\n    this._out.write(\"</stream>\");\n  };\n\n  module.exports = EventWriter;\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/modularinputs/eventwriter.js"],"names":["ET","require","utils","Logger","stream","Async","EventWriter","output","error","_out","isUndefined","process","stdout","_err","stderr","_headerWritten","prototype","writeEvent","event","write","_writeTo","e","message","warn","writeXMLDocument","xmlDocument","xmlString","tostring","close","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,YAAW;AACR,MAAIA,EAAE,GAAQC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAIC,KAAK,GAAKD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAIE,MAAM,GAAIF,OAAO,CAAC,UAAD,CAArB;;AACA,MAAIG,MAAM,GAAIH,OAAO,CAAC,QAAD,CAArB;;AACA,MAAII,KAAK,GAAKJ,OAAO,CAAC,UAAD,CAArB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASK,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAChC,SAAKC,IAAL,GAAYP,KAAK,CAACQ,WAAN,CAAkBH,MAAlB,IAA4BI,OAAO,CAACC,MAApC,GAA6CL,MAAzD;AACA,SAAKM,IAAL,GAAYX,KAAK,CAACQ,WAAN,CAAkBF,KAAlB,IAA2BG,OAAO,CAACG,MAAnC,GAA4CN,KAAxD,CAFgC,CAIhC;;AACA,SAAKO,cAAL,GAAsB,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIT,EAAAA,WAAW,CAACU,SAAZ,CAAsBC,UAAtB,GAAmC,UAASC,KAAT,EAAgB;AAC/C,QAAI,CAAC,KAAKH,cAAV,EAA0B;AACtB,WAAKN,IAAL,CAAUU,KAAV,CAAgB,UAAhB;;AACA,WAAKJ,cAAL,GAAsB,IAAtB;AACH;;AAED,QAAI;AACAG,MAAAA,KAAK,CAACE,QAAN,CAAe,KAAKX,IAApB;AACH,KAFD,CAGA,OAAOY,CAAP,EAAU;AACN,UAAIA,CAAC,CAACC,OAAF,KAAc,oEAAlB,EAAwF;AACpFnB,QAAAA,MAAM,CAACoB,IAAP,CAAY,EAAZ,EAAgBF,CAAC,CAACC,OAAlB,EAA2B,KAAKT,IAAhC;AACA,cAAMQ,CAAN;AACH;;AACDlB,MAAAA,MAAM,CAACK,KAAP,CAAa,EAAb,EAAiBa,CAAC,CAACC,OAAnB,EAA4B,KAAKT,IAAjC;AACA,YAAMQ,CAAN;AACH;AACJ,GAjBD;AAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIf,EAAAA,WAAW,CAACU,SAAZ,CAAsBQ,gBAAtB,GAAyC,UAASC,WAAT,EAAsB;AAC3D,QAAIC,SAAS,GAAG1B,EAAE,CAAC2B,QAAH,CAAYF,WAAZ,EAAyB;AAAC,yBAAmB;AAApB,KAAzB,CAAhB;;AACA,SAAKhB,IAAL,CAAUU,KAAV,CAAgBO,SAAhB;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;;;AACIpB,EAAAA,WAAW,CAACU,SAAZ,CAAsBY,KAAtB,GAA8B,YAAW;AACrC,SAAKnB,IAAL,CAAUU,KAAV,CAAgB,WAAhB;AACH,GAFD;;AAIAU,EAAAA,MAAM,CAACC,OAAP,GAAiBxB,WAAjB;AACH,CA5ED","sourcesContent":["/*!*/\n// Copyright 2014 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    var ET      = require(\"elementtree\");\n    var utils   = require(\"./utils\");\n    var Logger  = require(\"./logger\");\n    var stream  = require(\"stream\");\n    var Async   = require(\"../async\");\n    /**\n     * `EventWriter` writes events and error messages to Splunk from a modular input.\n     *\n     * Its two important methods are `writeEvent`, which takes an `Event` object,\n     * and `log`, which takes a severity and an error message.\n     *\n     * @param {Object} output A stream to output data, defaults to `process.stdout`\n     * @param {Object} error A stream to output errors, defaults to `process.stderr`\n     * @class splunkjs.ModularInputs.EventWriter\n     */\n    function EventWriter(output, error) {\n        this._out = utils.isUndefined(output) ? process.stdout : output;\n        this._err = utils.isUndefined(error) ? process.stderr : error;\n\n        // Has the opening <stream> tag been written yet?\n        this._headerWritten = false;\n    }\n\n    /**\n    * Writes an `Event` object to the output stream specified\n    * in the constructor.\n    *\n    * @param {Object} event An `Event` Object.\n    * @function splunkjs.ModularInputs.EventWriter\n    */\n    EventWriter.prototype.writeEvent = function(event) {        \n        if (!this._headerWritten) {\n            this._out.write(\"<stream>\");\n            this._headerWritten = true;\n        }\n\n        try {\n            event._writeTo(this._out);\n        }\n        catch (e) {\n            if (e.message === \"Events must have at least the data field set to be written to XML.\") {\n                Logger.warn(\"\", e.message, this._err);\n                throw e;\n            }\n            Logger.error(\"\", e.message, this._err);\n            throw e;\n        }\n    };\n\n    /**\n    * Writes a string representation of an `Elementtree` Object to the \n    * output stream specified in the constructor.\n    *\n    * This function will throw an exception if there is an error\n    * while making a string from `xmlDocument`, or\n    * while writing the string created from `xmlDocument`.\n    *\n    * @param {Object} xmlDocument An `Elementtree` Object representing an XML document.\n    * @function splunkjs.ModularInputs.EventWriter\n    */\n    EventWriter.prototype.writeXMLDocument = function(xmlDocument) {\n        var xmlString = ET.tostring(xmlDocument, {\"xml_declaration\": false});\n        this._out.write(xmlString);\n    };\n\n    /**\n    * Writes the closing </stream> tag to make the XML well formed.\n    *\n    * @function splunkjs.ModularInputs.EventWriter\n    */\n    EventWriter.prototype.close = function() {\n        this._out.write(\"</stream>\");\n    };\n\n    module.exports = EventWriter;\n})();\n"]},"metadata":{},"sourceType":"script"}