{"ast":null,"code":"/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n(function () {\n  \"use strict\";\n\n  var fs = require(\"fs\");\n\n  var path = require(\"path\");\n\n  var root = exports || this;\n  /**\n   * Provides various utility functions, which are mostly modeled after \n   * [Underscore.js](http://documentcloud.github.com/underscore/).\n   *\n   * @module splunkjs.Utils\n   */\n\n  /**\n   * Binds a function to a specific object.\n   *\n   * @example\n   *      \n   *      var obj = {a: 1, b: function() { console.log(a); }};\n   *      var bound = splunkjs.Utils.bind(obj, obj.b);\n   *      bound(); // prints 1\n   *\n   * @param {Object} me The object to bind to.\n   * @param {Function} fn The function to bind.\n   * @return {Function} The bound function.\n   *\n   * @function splunkjs.Utils\n   */\n\n  root.bind = function (me, fn) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n  /**\n   * Strips a string of all leading and trailing whitespace characters.\n   *\n   * @example\n   *      \n   *      var a = \" aaa \";\n   *      var b = splunkjs.Utils.trim(a); //== \"aaa\"\n   *\n   * @param {String} str The string to trim.\n   * @return {String} The trimmed string.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.trim = function (str) {\n    str = str || \"\";\n\n    if (String.prototype.trim) {\n      return String.prototype.trim.call(str);\n    } else {\n      return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n  };\n  /**\n   * Searches an array for a specific object and returns its location.\n   *\n   * @example\n   *      \n   *      var a = [\"a\", \"b', \"c\"];\n   *      console.log(splunkjs.Utils.indexOf(a, \"b\")) //== 1\n   *      console.log(splunkjs.Utils.indexOf(a, \"d\")) //== -1\n   *\n   * @param {Array} arr The array to search in.\n   * @param {Anything} search The object to search for.\n   * @return {Number} The index of the object (`search`), or `-1` if the object wasn't found.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.indexOf = function (arr, search) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === search) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Indicates whether an array contains a specific object.\n   *\n   * @example\n   *      \n   *      var a = {a: 3};\n   *      var b = [{}, {c: 1}, {b: 1}, a];\n   *      var contained = splunkjs.Utils.contains(b, a); // true\n   *\n   * @param {Array} arr The array to search in.\n   * @param {Anything} obj The object to search for.\n   * @return {Boolean} `true` if the array contains the object, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.contains = function (arr, obj) {\n    arr = arr || [];\n    return root.indexOf(arr, obj) >= 0;\n  };\n  /**\n   * Indicates whether a string starts with a specific prefix.\n   *\n   * @example\n   *      \n   *      var starts = splunkjs.Utils.startsWith(\"splunk-foo\", \"splunk-\");\n   *\n   * @param {String} original The string to search in.\n   * @param {String} prefix The prefix to search for.\n   * @return {Boolean} `true` if the string starts with the prefix, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.startsWith = function (original, prefix) {\n    var matches = original.match(\"^\" + prefix);\n    return matches && matches.length > 0 && matches[0] === prefix;\n  };\n  /**\n   * Indicates whether a string ends with a specific suffix.\n   *\n   * @example\n   *      \n   *      var ends = splunkjs.Utils.endsWith(\"foo-splunk\", \"-splunk\");\n   *\n   * @param {String} original The string to search in.\n   * @param {String} suffix The suffix to search for.\n   * @return {Boolean} `true` if the string ends with the suffix, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.endsWith = function (original, suffix) {\n    var matches = original.match(suffix + \"$\");\n    return matches && matches.length > 0 && matches[0] === suffix;\n  };\n\n  var toString = Object.prototype.toString;\n  /**\n   * Converts an iterable to an array.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(arguments instanceof Array); // false\n   *          var arr = console.log(splunkjs.Utils.toArray(arguments) instanceof Array); // true\n   *      }\n   *\n   * @param {Arguments} iterable The iterable to convert.\n   * @return {Array} The converted array.\n   *\n   * @function splunkjs.Utils\n   */\n\n  root.toArray = function (iterable) {\n    return Array.prototype.slice.call(iterable);\n  };\n  /**\n   * Indicates whether an argument is an array.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isArray(arguments)); // false\n   *          console.log(splunkjs.Utils.isArray([1,2,3])); // true\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is an array, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isArray = Array.isArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n  /**\n   * Indicates whether an argument is a function.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isFunction([1,2,3]); // false\n   *          console.log(splunkjs.Utils.isFunction(function() {})); // true\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is a function, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isFunction = function (obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  };\n  /**\n   * Indicates whether an argument is a number.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isNumber(1); // true\n   *          console.log(splunkjs.Utils.isNumber(function() {})); // false\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is a number, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isNumber = function (obj) {\n    return !!(obj === 0 || obj && obj.toExponential && obj.toFixed);\n  };\n  /**\n   * Indicates whether an argument is a string.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isString(\"abc\"); // true\n   *          console.log(splunkjs.Utils.isString(function() {})); // false\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is a string, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isString = function (obj) {\n    return !!(obj === '' || obj && obj.charCodeAt && obj.substr);\n  };\n  /**\n   * Indicates whether an argument is an object.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isObject({abc: \"abc\"}); // true\n   *          console.log(splunkjs.Utils.isObject(\"abc\"); // false\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is an object, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isObject = function (obj) {\n    /*jslint newcap:false */\n    return obj === Object(obj);\n  };\n  /**\n   * Indicates whether an argument is empty.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.isEmpty({})); // true\n   *          console.log(splunkjs.Utils.isEmpty({a: 1})); // false\n   *      }\n   *\n   * @param {Anything} obj The argument to evaluate.\n   * @return {Boolean} `true` if the argument is empty, `false` if not.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.isEmpty = function (obj) {\n    if (root.isArray(obj) || root.isString(obj)) {\n      return obj.length === 0;\n    }\n\n    for (var key in obj) {\n      if (this.hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Applies an iterator function to each element in an object.\n   *\n   * @example\n   *      \n   *      splunkjs.Utils.forEach([1,2,3], function(el) { console.log(el); }); // 1,2,3\n   *\n   * @param {Object|Array} obj An object or array.\n   * @param {Function} iterator The function to apply to each element: `(element, list, index)`.\n   * @param {Object} context A context to apply to the function (optional).\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.forEach = function (obj, iterator, context) {\n    if (obj === null) {\n      return;\n    }\n\n    if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === {}) {\n          return;\n        }\n      }\n    } else {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          if (iterator.call(context, obj[key], key, obj) === {}) {\n            return;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Extends a given object with all the properties from other source objects.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.extend({foo: \"bar\"}, {a: 2})); // {foo: \"bar\", a: 2}\n   *      }\n   *\n   * @param {Object} obj The object to extend.\n   * @param {Object...} sources The source objects from which to take properties.\n   * @return {Object} The extended object.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.extend = function (obj) {\n    root.forEach(Array.prototype.slice.call(arguments, 1), function (source) {\n      for (var prop in source) {\n        obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n  /**\n   * Creates a shallow-cloned copy of an object or array.\n   *\n   * @example\n   *      \n   *      function() { \n   *          console.log(splunkjs.Utils.clone({foo: \"bar\"})); // {foo: \"bar\"}\n   *          console.log(splunkjs.Utils.clone([1,2,3])); // [1,2,3]\n   *      }\n   *\n   * @param {Object|Array} obj The object or array to clone.\n   * @return {Object|Array} The cloned object or array.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.clone = function (obj) {\n    if (!root.isObject(obj)) {\n      return obj;\n    }\n\n    return root.isArray(obj) ? obj.slice() : root.extend({}, obj);\n  };\n  /**\n   * Extracts namespace information from a dictionary of properties. Namespace\n   * information includes values for _owner_, _app_, and _sharing_.\n   *\n   * @param {Object} props The dictionary of properties.\n   * @return {Object} Namespace information from the properties dictionary.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.namespaceFromProperties = function (props) {\n    if (root.isUndefined(props) || root.isUndefined(props.acl)) {\n      return {\n        owner: '',\n        app: '',\n        sharing: ''\n      };\n    }\n\n    return {\n      owner: props.acl.owner,\n      app: props.acl.app,\n      sharing: props.acl.sharing\n    };\n  };\n  /**\n    * Tests whether a value appears in a given object.\n    *\n    * @param {Anything} val The value to search for.\n    * @param {Object} obj The object to search in.\n    *\n    * @function splunkjs.Utils\n    */\n\n\n  root.keyOf = function (val, obj) {\n    for (var k in obj) {\n      if (obj.hasOwnProperty(k) && obj[k] === val) {\n        return k;\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Finds a version in a dictionary.\n   *\n   * @param {String} version The version to search for.\n   * @param {Object} map The dictionary to search.\n   * @return {Anything} The value of the dictionary at the closest version match.\n   *\n   * @function splunkjs.Utils\n   */\n\n\n  root.getWithVersion = function (version, map) {\n    map = map || {};\n    var currentVersion = version + \"\" || \"\";\n\n    while (currentVersion !== \"\") {\n      if (map.hasOwnProperty(currentVersion)) {\n        return map[currentVersion];\n      } else {\n        currentVersion = currentVersion.slice(0, currentVersion.lastIndexOf(\".\"));\n      }\n    }\n\n    return map[\"default\"];\n  };\n  /**\n   * Checks if an object is undefined.\n   *\n   * @param {Object} obj An object.\n   * @return {Boolean} `true` if the object is undefined, `false` if not.\n   */\n\n\n  root.isUndefined = function (obj) {\n    return typeof obj === \"undefined\";\n  };\n  /**\n   * Read files in a way that makes unit tests work as well.\n   *\n   * @example\n   *\n   *      // To read `splunk-sdk-javascript/tests/data/empty_data_model.json`  \n   *      // from    `splunk-sdk-javascript/tests/test_service.js`\n   *      var fileContents = utils.readFile(__filename, \"../data/empty_data_model.json\");\n   *      \n   * @param {String} __filename of the script calling this function.\n   * @param {String} a path relative to the script calling this function.\n   * @return {String} The contents of the file.\n   */\n\n\n  root.readFile = function (filename, relativePath) {\n    return fs.readFileSync(path.resolve(filename, relativePath)).toString();\n  };\n})();","map":{"version":3,"sources":["/Users/cyfi/Downloads/splunk-sdk-javascript-create-react-app/examples/browser/create-splunk-react-app/node_modules/splunk-sdk/lib/utils.js"],"names":["fs","require","path","root","exports","bind","me","fn","apply","arguments","trim","str","String","prototype","call","replace","indexOf","arr","search","i","length","contains","obj","startsWith","original","prefix","matches","match","endsWith","suffix","toString","Object","toArray","iterable","Array","slice","isArray","isFunction","constructor","isNumber","toExponential","toFixed","isString","charCodeAt","substr","isObject","isEmpty","key","hasOwnProperty","forEach","iterator","context","l","extend","source","prop","clone","namespaceFromProperties","props","isUndefined","acl","owner","app","sharing","keyOf","val","k","undefined","getWithVersion","version","map","currentVersion","lastIndexOf","readFile","filename","relativePath","readFileSync","resolve"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,YAAW;AACR;;AAEA,MAAIA,EAAE,GAAKC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAIE,IAAI,GAAGC,OAAO,IAAI,IAAtB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACID,EAAAA,IAAI,CAACE,IAAL,GAAY,UAASC,EAAT,EAAaC,EAAb,EAAiB;AACzB,WAAO,YAAW;AACd,aAAOA,EAAE,CAACC,KAAH,CAASF,EAAT,EAAaG,SAAb,CAAP;AACH,KAFD;AAGH,GAJD;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIN,EAAAA,IAAI,CAACO,IAAL,GAAY,UAASC,GAAT,EAAc;AACtBA,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;;AAEA,QAAIC,MAAM,CAACC,SAAP,CAAiBH,IAArB,EAA2B;AACvB,aAAOE,MAAM,CAACC,SAAP,CAAiBH,IAAjB,CAAsBI,IAAtB,CAA2BH,GAA3B,CAAP;AACH,KAFD,MAGK;AACD,aAAOA,GAAG,CAACI,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,EAA0BA,OAA1B,CAAkC,QAAlC,EAA4C,EAA5C,CAAP;AACH;AACJ,GATD;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIZ,EAAAA,IAAI,CAACa,OAAL,GAAe,UAASC,GAAT,EAAcC,MAAd,EAAsB;AACjC,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,GAAG,CAACG,MAAnB,EAA2BD,CAAC,EAA5B,EAAgC;AAC5B,UAAIF,GAAG,CAACE,CAAD,CAAH,KAAWD,MAAf,EAAuB;AACnB,eAAOC,CAAP;AACH;AACJ;;AACD,WAAO,CAAC,CAAR;AACH,GAPD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhB,EAAAA,IAAI,CAACkB,QAAL,GAAgB,UAASJ,GAAT,EAAcK,GAAd,EAAmB;AAC/BL,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACA,WAAQd,IAAI,CAACa,OAAL,CAAaC,GAAb,EAAkBK,GAAlB,KAA0B,CAAlC;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACoB,UAAL,GAAkB,UAASC,QAAT,EAAmBC,MAAnB,EAA2B;AACzC,QAAIC,OAAO,GAAGF,QAAQ,CAACG,KAAT,CAAe,MAAMF,MAArB,CAAd;AACA,WAAOC,OAAO,IAAIA,OAAO,CAACN,MAAR,GAAiB,CAA5B,IAAiCM,OAAO,CAAC,CAAD,CAAP,KAAeD,MAAvD;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItB,EAAAA,IAAI,CAACyB,QAAL,GAAgB,UAASJ,QAAT,EAAmBK,MAAnB,EAA2B;AACvC,QAAIH,OAAO,GAAGF,QAAQ,CAACG,KAAT,CAAeE,MAAM,GAAG,GAAxB,CAAd;AACA,WAAOH,OAAO,IAAIA,OAAO,CAACN,MAAR,GAAiB,CAA5B,IAAiCM,OAAO,CAAC,CAAD,CAAP,KAAeG,MAAvD;AACH,GAHD;;AAKA,MAAIC,QAAQ,GAAGC,MAAM,CAAClB,SAAP,CAAiBiB,QAAhC;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI3B,EAAAA,IAAI,CAAC6B,OAAL,GAAe,UAASC,QAAT,EAAmB;AAC9B,WAAOC,KAAK,CAACrB,SAAN,CAAgBsB,KAAhB,CAAsBrB,IAAtB,CAA2BmB,QAA3B,CAAP;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI9B,EAAAA,IAAI,CAACiC,OAAL,GAAeF,KAAK,CAACE,OAAN,IAAiB,UAASd,GAAT,EAAc;AAC1C,WAAOQ,QAAQ,CAAChB,IAAT,CAAcQ,GAAd,MAAuB,gBAA9B;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACkC,UAAL,GAAkB,UAASf,GAAT,EAAc;AAC5B,WAAO,CAAC,EAAEA,GAAG,IAAIA,GAAG,CAACgB,WAAX,IAA0BhB,GAAG,CAACR,IAA9B,IAAsCQ,GAAG,CAACd,KAA5C,CAAR;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,IAAI,CAACoC,QAAL,GAAgB,UAASjB,GAAT,EAAc;AAC1B,WAAO,CAAC,EAAEA,GAAG,KAAK,CAAR,IAAcA,GAAG,IAAIA,GAAG,CAACkB,aAAX,IAA4BlB,GAAG,CAACmB,OAAhD,CAAR;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACItC,EAAAA,IAAI,CAACuC,QAAL,GAAgB,UAASpB,GAAT,EAAc;AAC1B,WAAO,CAAC,EAAEA,GAAG,KAAK,EAAR,IAAeA,GAAG,IAAIA,GAAG,CAACqB,UAAX,IAAyBrB,GAAG,CAACsB,MAA9C,CAAR;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIzC,EAAAA,IAAI,CAAC0C,QAAL,GAAgB,UAASvB,GAAT,EAAc;AAC1B;AACA,WAAOA,GAAG,KAAKS,MAAM,CAACT,GAAD,CAArB;AACH,GAHD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAAC2C,OAAL,GAAe,UAASxB,GAAT,EAAc;AACzB,QAAInB,IAAI,CAACiC,OAAL,CAAad,GAAb,KAAqBnB,IAAI,CAACuC,QAAL,CAAcpB,GAAd,CAAzB,EAA6C;AACzC,aAAOA,GAAG,CAACF,MAAJ,KAAe,CAAtB;AACH;;AAED,SAAK,IAAI2B,GAAT,IAAgBzB,GAAhB,EAAqB;AACjB,UAAI,KAAK0B,cAAL,CAAoBlC,IAApB,CAAyBQ,GAAzB,EAA8ByB,GAA9B,CAAJ,EAAwC;AACpC,eAAO,KAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GAZD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5C,EAAAA,IAAI,CAAC8C,OAAL,GAAe,UAAS3B,GAAT,EAAc4B,QAAd,EAAwBC,OAAxB,EAAiC;AAC5C,QAAI7B,GAAG,KAAK,IAAZ,EAAkB;AACd;AACH;;AACD,QAAIY,KAAK,CAACrB,SAAN,CAAgBoC,OAAhB,IAA2B3B,GAAG,CAAC2B,OAAJ,KAAgBf,KAAK,CAACrB,SAAN,CAAgBoC,OAA/D,EAAwE;AACpE3B,MAAAA,GAAG,CAAC2B,OAAJ,CAAYC,QAAZ,EAAsBC,OAAtB;AACH,KAFD,MAGK,IAAI7B,GAAG,CAACF,MAAJ,KAAe,CAACE,GAAG,CAACF,MAAxB,EAAgC;AACjC,WAAK,IAAID,CAAC,GAAG,CAAR,EAAWiC,CAAC,GAAG9B,GAAG,CAACF,MAAxB,EAAgCD,CAAC,GAAGiC,CAApC,EAAuCjC,CAAC,EAAxC,EAA4C;AACxC,YAAIA,CAAC,IAAIG,GAAL,IAAY4B,QAAQ,CAACpC,IAAT,CAAcqC,OAAd,EAAuB7B,GAAG,CAACH,CAAD,CAA1B,EAA+BA,CAA/B,EAAkCG,GAAlC,MAA2C,EAA3D,EAA+D;AAC3D;AACH;AACJ;AACJ,KANI,MAOA;AACD,WAAK,IAAIyB,GAAT,IAAgBzB,GAAhB,EAAqB;AACjB,YAAIA,GAAG,CAAC0B,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AACzB,cAAIG,QAAQ,CAACpC,IAAT,CAAcqC,OAAd,EAAuB7B,GAAG,CAACyB,GAAD,CAA1B,EAAiCA,GAAjC,EAAsCzB,GAAtC,MAA+C,EAAnD,EAAuD;AACnD;AACH;AACJ;AACJ;AACJ;AACJ,GAvBD;AAyBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACkD,MAAL,GAAc,UAAS/B,GAAT,EAAc;AACxBnB,IAAAA,IAAI,CAAC8C,OAAL,CAAaf,KAAK,CAACrB,SAAN,CAAgBsB,KAAhB,CAAsBrB,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,CAAb,EAAuD,UAAS6C,MAAT,EAAiB;AACpE,WAAK,IAAIC,IAAT,IAAiBD,MAAjB,EAAyB;AACrBhC,QAAAA,GAAG,CAACiC,IAAD,CAAH,GAAYD,MAAM,CAACC,IAAD,CAAlB;AACH;AACJ,KAJD;AAKA,WAAOjC,GAAP;AACH,GAPD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACqD,KAAL,GAAa,UAASlC,GAAT,EAAc;AACvB,QAAI,CAACnB,IAAI,CAAC0C,QAAL,CAAcvB,GAAd,CAAL,EAAyB;AACrB,aAAOA,GAAP;AACH;;AACD,WAAOnB,IAAI,CAACiC,OAAL,CAAad,GAAb,IAAoBA,GAAG,CAACa,KAAJ,EAApB,GAAkChC,IAAI,CAACkD,MAAL,CAAY,EAAZ,EAAgB/B,GAAhB,CAAzC;AACH,GALD;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACsD,uBAAL,GAA+B,UAASC,KAAT,EAAgB;AAC3C,QAAIvD,IAAI,CAACwD,WAAL,CAAiBD,KAAjB,KAA2BvD,IAAI,CAACwD,WAAL,CAAiBD,KAAK,CAACE,GAAvB,CAA/B,EAA4D;AACxD,aAAO;AACHC,QAAAA,KAAK,EAAE,EADJ;AAEHC,QAAAA,GAAG,EAAE,EAFF;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;AAKH;;AACD,WAAO;AACHF,MAAAA,KAAK,EAAEH,KAAK,CAACE,GAAN,CAAUC,KADd;AAEHC,MAAAA,GAAG,EAAEJ,KAAK,CAACE,GAAN,CAAUE,GAFZ;AAGHC,MAAAA,OAAO,EAAEL,KAAK,CAACE,GAAN,CAAUG;AAHhB,KAAP;AAKH,GAbD;AAeA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI5D,EAAAA,IAAI,CAAC6D,KAAL,GAAa,UAASC,GAAT,EAAc3C,GAAd,EAAmB;AAC5B,SAAK,IAAI4C,CAAT,IAAc5C,GAAd,EAAmB;AACf,UAAIA,GAAG,CAAC0B,cAAJ,CAAmBkB,CAAnB,KAAyB5C,GAAG,CAAC4C,CAAD,CAAH,KAAWD,GAAxC,EAA6C;AACzC,eAAOC,CAAP;AACH;AACJ;;AACD,WAAOC,SAAP;AACH,GAPD;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIhE,EAAAA,IAAI,CAACiE,cAAL,GAAsB,UAASC,OAAT,EAAkBC,GAAlB,EAAuB;AACzCA,IAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACA,QAAIC,cAAc,GAAIF,OAAO,GAAG,EAAX,IAAkB,EAAvC;;AACA,WAAOE,cAAc,KAAK,EAA1B,EAA8B;AAC1B,UAAID,GAAG,CAACtB,cAAJ,CAAmBuB,cAAnB,CAAJ,EAAwC;AACpC,eAAOD,GAAG,CAACC,cAAD,CAAV;AACH,OAFD,MAGK;AACDA,QAAAA,cAAc,GAAGA,cAAc,CAACpC,KAAf,CACb,CADa,EAEboC,cAAc,CAACC,WAAf,CAA2B,GAA3B,CAFa,CAAjB;AAIH;AACJ;;AAED,WAAOF,GAAG,CAAC,SAAD,CAAV;AACH,GAhBD;AAkBA;AACJ;AACA;AACA;AACA;AACA;;;AACInE,EAAAA,IAAI,CAACwD,WAAL,GAAmB,UAAUrC,GAAV,EAAe;AAC9B,WAAQ,OAAOA,GAAP,KAAe,WAAvB;AACH,GAFD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACInB,EAAAA,IAAI,CAACsE,QAAL,GAAgB,UAASC,QAAT,EAAmBC,YAAnB,EAAiC;AAC7C,WAAO3E,EAAE,CAAC4E,YAAH,CAAgB1E,IAAI,CAAC2E,OAAL,CAAaH,QAAb,EAAuBC,YAAvB,CAAhB,EAAsD7C,QAAtD,EAAP;AACH,GAFD;AAIH,CAhdD","sourcesContent":["/*!*/\n// Copyright 2012 Splunk, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"): you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n(function() {\n    \"use strict\";\n\n    var fs   = require(\"fs\");\n    var path = require(\"path\");\n    var root = exports || this;\n\n    /**\n     * Provides various utility functions, which are mostly modeled after \n     * [Underscore.js](http://documentcloud.github.com/underscore/).\n     *\n     * @module splunkjs.Utils\n     */\n\n    /**\n     * Binds a function to a specific object.\n     *\n     * @example\n     *      \n     *      var obj = {a: 1, b: function() { console.log(a); }};\n     *      var bound = splunkjs.Utils.bind(obj, obj.b);\n     *      bound(); // prints 1\n     *\n     * @param {Object} me The object to bind to.\n     * @param {Function} fn The function to bind.\n     * @return {Function} The bound function.\n     *\n     * @function splunkjs.Utils\n     */\n    root.bind = function(me, fn) { \n        return function() { \n            return fn.apply(me, arguments); \n        }; \n    };\n    \n    /**\n     * Strips a string of all leading and trailing whitespace characters.\n     *\n     * @example\n     *      \n     *      var a = \" aaa \";\n     *      var b = splunkjs.Utils.trim(a); //== \"aaa\"\n     *\n     * @param {String} str The string to trim.\n     * @return {String} The trimmed string.\n     *\n     * @function splunkjs.Utils\n     */\n    root.trim = function(str) {\n        str = str || \"\";\n        \n        if (String.prototype.trim) {\n            return String.prototype.trim.call(str);\n        }\n        else {\n            return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');   \n        }\n    };\n    \n    /**\n     * Searches an array for a specific object and returns its location.\n     *\n     * @example\n     *      \n     *      var a = [\"a\", \"b', \"c\"];\n     *      console.log(splunkjs.Utils.indexOf(a, \"b\")) //== 1\n     *      console.log(splunkjs.Utils.indexOf(a, \"d\")) //== -1\n     *\n     * @param {Array} arr The array to search in.\n     * @param {Anything} search The object to search for.\n     * @return {Number} The index of the object (`search`), or `-1` if the object wasn't found.\n     *\n     * @function splunkjs.Utils\n     */\n    root.indexOf = function(arr, search) {\n        for(var i=0; i<arr.length; i++) {\n            if (arr[i] === search) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Indicates whether an array contains a specific object.\n     *\n     * @example\n     *      \n     *      var a = {a: 3};\n     *      var b = [{}, {c: 1}, {b: 1}, a];\n     *      var contained = splunkjs.Utils.contains(b, a); // true\n     *\n     * @param {Array} arr The array to search in.\n     * @param {Anything} obj The object to search for.\n     * @return {Boolean} `true` if the array contains the object, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.contains = function(arr, obj) {\n        arr = arr || [];\n        return (root.indexOf(arr, obj) >= 0);\n    };\n\n    /**\n     * Indicates whether a string starts with a specific prefix.\n     *\n     * @example\n     *      \n     *      var starts = splunkjs.Utils.startsWith(\"splunk-foo\", \"splunk-\");\n     *\n     * @param {String} original The string to search in.\n     * @param {String} prefix The prefix to search for.\n     * @return {Boolean} `true` if the string starts with the prefix, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.startsWith = function(original, prefix) {\n        var matches = original.match(\"^\" + prefix);\n        return matches && matches.length > 0 && matches[0] === prefix;  \n    };\n\n    /**\n     * Indicates whether a string ends with a specific suffix.\n     *\n     * @example\n     *      \n     *      var ends = splunkjs.Utils.endsWith(\"foo-splunk\", \"-splunk\");\n     *\n     * @param {String} original The string to search in.\n     * @param {String} suffix The suffix to search for.\n     * @return {Boolean} `true` if the string ends with the suffix, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.endsWith = function(original, suffix) {\n        var matches = original.match(suffix + \"$\");\n        return matches && matches.length > 0 && matches[0] === suffix;  \n    };\n    \n    var toString = Object.prototype.toString;\n    \n    /**\n     * Converts an iterable to an array.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(arguments instanceof Array); // false\n     *          var arr = console.log(splunkjs.Utils.toArray(arguments) instanceof Array); // true\n     *      }\n     *\n     * @param {Arguments} iterable The iterable to convert.\n     * @return {Array} The converted array.\n     *\n     * @function splunkjs.Utils\n     */\n    root.toArray = function(iterable) {\n        return Array.prototype.slice.call(iterable);\n    };\n    \n    /**\n     * Indicates whether an argument is an array.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isArray(arguments)); // false\n     *          console.log(splunkjs.Utils.isArray([1,2,3])); // true\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is an array, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isArray = Array.isArray || function(obj) {\n        return toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Indicates whether an argument is a function.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isFunction([1,2,3]); // false\n     *          console.log(splunkjs.Utils.isFunction(function() {})); // true\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is a function, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isFunction = function(obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    };\n\n    /**\n     * Indicates whether an argument is a number.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isNumber(1); // true\n     *          console.log(splunkjs.Utils.isNumber(function() {})); // false\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is a number, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isNumber = function(obj) {\n        return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));\n    };\n    \n    /**\n     * Indicates whether an argument is a string.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isString(\"abc\"); // true\n     *          console.log(splunkjs.Utils.isString(function() {})); // false\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is a string, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isString = function(obj) {\n        return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));\n    };\n    \n    /**\n     * Indicates whether an argument is an object.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isObject({abc: \"abc\"}); // true\n     *          console.log(splunkjs.Utils.isObject(\"abc\"); // false\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is an object, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isObject = function(obj) {\n        /*jslint newcap:false */\n        return obj === Object(obj);\n    };\n    \n    /**\n     * Indicates whether an argument is empty.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.isEmpty({})); // true\n     *          console.log(splunkjs.Utils.isEmpty({a: 1})); // false\n     *      }\n     *\n     * @param {Anything} obj The argument to evaluate.\n     * @return {Boolean} `true` if the argument is empty, `false` if not.\n     *\n     * @function splunkjs.Utils\n     */\n    root.isEmpty = function(obj) {\n        if (root.isArray(obj) || root.isString(obj)) {\n            return obj.length === 0;\n        }\n        \n        for (var key in obj) {\n            if (this.hasOwnProperty.call(obj, key)) {\n                return false;\n            }\n        }\n        \n        return true;\n    };\n    \n    /**\n     * Applies an iterator function to each element in an object.\n     *\n     * @example\n     *      \n     *      splunkjs.Utils.forEach([1,2,3], function(el) { console.log(el); }); // 1,2,3\n     *\n     * @param {Object|Array} obj An object or array.\n     * @param {Function} iterator The function to apply to each element: `(element, list, index)`.\n     * @param {Object} context A context to apply to the function (optional).\n     *\n     * @function splunkjs.Utils\n     */\n    root.forEach = function(obj, iterator, context) {\n        if (obj === null) {\n            return;\n        }\n        if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) {\n            obj.forEach(iterator, context);\n        } \n        else if (obj.length === +obj.length) {\n            for (var i = 0, l = obj.length; i < l; i++) {\n                if (i in obj && iterator.call(context, obj[i], i, obj) === {}) {\n                    return;\n                }\n            }\n        } \n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    if (iterator.call(context, obj[key], key, obj) === {}) {\n                        return;\n                    }\n                }\n            }\n        }\n    };\n    \n    /**\n     * Extends a given object with all the properties from other source objects.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.extend({foo: \"bar\"}, {a: 2})); // {foo: \"bar\", a: 2}\n     *      }\n     *\n     * @param {Object} obj The object to extend.\n     * @param {Object...} sources The source objects from which to take properties.\n     * @return {Object} The extended object.\n     *\n     * @function splunkjs.Utils\n     */\n    root.extend = function(obj) {\n        root.forEach(Array.prototype.slice.call(arguments, 1), function(source) {\n            for (var prop in source) {\n                obj[prop] = source[prop];\n            }\n        });\n        return obj;\n    };\n  \n    /**\n     * Creates a shallow-cloned copy of an object or array.\n     *\n     * @example\n     *      \n     *      function() { \n     *          console.log(splunkjs.Utils.clone({foo: \"bar\"})); // {foo: \"bar\"}\n     *          console.log(splunkjs.Utils.clone([1,2,3])); // [1,2,3]\n     *      }\n     *\n     * @param {Object|Array} obj The object or array to clone.\n     * @return {Object|Array} The cloned object or array.\n     *\n     * @function splunkjs.Utils\n     */\n    root.clone = function(obj) {\n        if (!root.isObject(obj)) {\n            return obj;\n        }\n        return root.isArray(obj) ? obj.slice() : root.extend({}, obj);\n    };\n    \n    /**\n     * Extracts namespace information from a dictionary of properties. Namespace\n     * information includes values for _owner_, _app_, and _sharing_.\n     *\n     * @param {Object} props The dictionary of properties.\n     * @return {Object} Namespace information from the properties dictionary.\n     *\n     * @function splunkjs.Utils\n     */\n    root.namespaceFromProperties = function(props) {\n        if (root.isUndefined(props) || root.isUndefined(props.acl)) {\n            return {\n                owner: '',\n                app: '',\n                sharing: ''\n            };\n        }\n        return {\n            owner: props.acl.owner,\n            app: props.acl.app,\n            sharing: props.acl.sharing\n        };\n    };  \n\n    /**\n      * Tests whether a value appears in a given object.\n      *\n      * @param {Anything} val The value to search for.\n      * @param {Object} obj The object to search in.\n      *\n      * @function splunkjs.Utils\n      */\n    root.keyOf = function(val, obj) {\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k) && obj[k] === val) {\n                return k;\n            }\n        }\n        return undefined;\n    };\n\n    /**\n     * Finds a version in a dictionary.\n     *\n     * @param {String} version The version to search for.\n     * @param {Object} map The dictionary to search.\n     * @return {Anything} The value of the dictionary at the closest version match.\n     *\n     * @function splunkjs.Utils\n     */\n    root.getWithVersion = function(version, map) {\n        map = map || {};\n        var currentVersion = (version + \"\") || \"\";\n        while (currentVersion !== \"\") {\n            if (map.hasOwnProperty(currentVersion)) {\n                return map[currentVersion];\n            }\n            else {\n                currentVersion = currentVersion.slice(\n                    0, \n                    currentVersion.lastIndexOf(\".\")\n                );\n            }\n        }\n        \n        return map[\"default\"];\n    };\n\n    /**\n     * Checks if an object is undefined.\n     *\n     * @param {Object} obj An object.\n     * @return {Boolean} `true` if the object is undefined, `false` if not.\n     */\n    root.isUndefined = function (obj) {\n        return (typeof obj === \"undefined\");\n    };\n\n    /**\n     * Read files in a way that makes unit tests work as well.\n     *\n     * @example\n     *\n     *      // To read `splunk-sdk-javascript/tests/data/empty_data_model.json`  \n     *      // from    `splunk-sdk-javascript/tests/test_service.js`\n     *      var fileContents = utils.readFile(__filename, \"../data/empty_data_model.json\");\n     *      \n     * @param {String} __filename of the script calling this function.\n     * @param {String} a path relative to the script calling this function.\n     * @return {String} The contents of the file.\n     */\n    root.readFile = function(filename, relativePath) {\n        return fs.readFileSync(path.resolve(filename, relativePath)).toString();\n    };\n\n})();"]},"metadata":{},"sourceType":"script"}